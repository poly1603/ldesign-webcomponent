/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonIconPosition, ButtonShape, ButtonType, MentionEntity, MentionItem, MentionModel, MentionSegment, MentionTriggerConfig, Size, Theme } from "./types";
import { AlertSize, AlertType, AlertVariant } from "./components/alert/alert";
import { ButtonColor, ButtonHTMLType, ButtonSize, ButtonVariant } from "./components/button/interface";
import { CalEvent } from "./components/calendar/calendar";
import { Breakpoints, CascaderOption, CascaderOverlay, CascaderTrigger } from "./components/cascader/cascader";
import { Placement } from "@floating-ui/dom";
import { CloseReason, DrawerButton, DrawerLevel, DrawerPlacement, DrawerState, DrawerTheme, SizePreset, SnapPoint } from "./components/drawer/drawer.types";
import { DropdownItem, DropdownNode, DropdownPlacement, DropdownTrigger, DropdownVariant } from "./components/dropdown/dropdown";
import { ImageViewerItem } from "./components/image-viewer/image-viewer";
import { MenuItem, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
import { MessageType } from "./components/message/message";
import { ModalAnimation, ModalHeaderConfig, ModalSize, ModalTheme, ModalVariant } from "./components/modal/modal";
import { NotificationPlacement, NotificationType } from "./components/notification/notification";
import { PickerOption } from "./components/picker/picker";
import { PopconfirmIcon, PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
import { PopupAnimation, PopupPlacement, PopupSize, PopupTrigger } from "./components/popup/popup";
import { Element } from "@stencil/core";
import { SelectOption, SelectPlacement, SelectTrigger } from "./components/select/select";
import { TabMeta, TabsPlacement, TabsType } from "./components/tabs/tabs";
import { TagData } from "./components/tag-group/tag-group";
import { Breakpoints as Breakpoints1, TimePickerLocale, TimePickerOverlay, TimePickerSize, TimePickerTrigger, TimePreset } from "./components/time-picker/time-picker";
import { TooltipAnimation, TooltipPlacement, TooltipSize, TooltipTrigger } from "./components/tooltip/tooltip";
import { TransferItem } from "./components/transfer/transfer";
import { TreeNode } from "./components/tree/tree";
export { ButtonIconPosition, ButtonShape, ButtonType, MentionEntity, MentionItem, MentionModel, MentionSegment, MentionTriggerConfig, Size, Theme } from "./types";
export { AlertSize, AlertType, AlertVariant } from "./components/alert/alert";
export { ButtonColor, ButtonHTMLType, ButtonSize, ButtonVariant } from "./components/button/interface";
export { CalEvent } from "./components/calendar/calendar";
export { Breakpoints, CascaderOption, CascaderOverlay, CascaderTrigger } from "./components/cascader/cascader";
export { Placement } from "@floating-ui/dom";
export { CloseReason, DrawerButton, DrawerLevel, DrawerPlacement, DrawerState, DrawerTheme, SizePreset, SnapPoint } from "./components/drawer/drawer.types";
export { DropdownItem, DropdownNode, DropdownPlacement, DropdownTrigger, DropdownVariant } from "./components/dropdown/dropdown";
export { ImageViewerItem } from "./components/image-viewer/image-viewer";
export { MenuItem, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
export { MessageType } from "./components/message/message";
export { ModalAnimation, ModalHeaderConfig, ModalSize, ModalTheme, ModalVariant } from "./components/modal/modal";
export { NotificationPlacement, NotificationType } from "./components/notification/notification";
export { PickerOption } from "./components/picker/picker";
export { PopconfirmIcon, PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
export { PopupAnimation, PopupPlacement, PopupSize, PopupTrigger } from "./components/popup/popup";
export { Element } from "@stencil/core";
export { SelectOption, SelectPlacement, SelectTrigger } from "./components/select/select";
export { TabMeta, TabsPlacement, TabsType } from "./components/tabs/tabs";
export { TagData } from "./components/tag-group/tag-group";
export { Breakpoints as Breakpoints1, TimePickerLocale, TimePickerOverlay, TimePickerSize, TimePickerTrigger, TimePreset } from "./components/time-picker/time-picker";
export { TooltipAnimation, TooltipPlacement, TooltipSize, TooltipTrigger } from "./components/tooltip/tooltip";
export { TransferItem } from "./components/transfer/transfer";
export { TreeNode } from "./components/tree/tree";
export namespace Components {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme": Theme;
    }
    interface LDropdownPanel {
        /**
          * 动画模式：'scale' 展开动画，'slide' 滑动动画
          * @default 'scale'
         */
        "animationMode": 'scale' | 'slide';
        /**
          * 动画持续时间（毫秒）
          * @default 300
         */
        "duration": number;
        /**
          * 隐藏面板
         */
        "hide": () => Promise<void>;
        /**
          * 遮罩层背景色
          * @default 'rgba(0, 0, 0, 0.3)'
         */
        "maskBackground": string;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 面板最大高度
          * @default '60vh'
         */
        "maxHeight": string;
        /**
          * 面板弹出位置，'top' 或 'bottom'，'auto' 自动判断
          * @default 'auto'
         */
        "placement": 'top' | 'bottom' | 'auto';
        /**
          * 面板与遮罩边缘的安全距离（像素）
          * @default 16
         */
        "safeDistance": number;
        /**
          * 显示面板
         */
        "show": () => Promise<void>;
        /**
          * 切换面板显示状态
         */
        "toggle": () => Promise<void>;
        /**
          * 面板是否可见
          * @default false
         */
        "visible": boolean;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset": number;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget": boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Alert 警告信息
     * 用于在页面中展示重要的提示信息，支持多种状态、样式变体、尺寸、标题/描述、操作区与可关闭。
     */
    interface LdesignAlert {
        /**
          * 标题（避开标准 HTMLElement.title 冲突）
         */
        "alertTitle"?: string;
        /**
          * 是否启用动画效果
          * @default true
         */
        "animated": boolean;
        /**
          * 横幅样式（常用于页面顶部）
          * @default false
         */
        "banner": boolean;
        /**
          * 自定义边框宽度
          * @default 1
         */
        "borderWidth": number;
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画）
         */
        "close": () => Promise<void>;
        /**
          * 自定义颜色（仅在 type 为 custom 时生效）
         */
        "color"?: string;
        /**
          * 是否为紧凑模式
          * @default false
         */
        "compact": boolean;
        /**
          * 描述（也可通过默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自定义图标名称
         */
        "iconName"?: string;
        /**
          * 启用滚动公告（Marquee）
          * @default false
         */
        "marquee": boolean;
        /**
          * 方向
          * @default 'left'
         */
        "marqueeDirection": 'left' | 'right';
        /**
          * 两段内容之间的间距（px）
          * @default 24
         */
        "marqueeGap": number;
        /**
          * 悬停时是否暂停
          * @default true
         */
        "marqueePauseOnHover": boolean;
        /**
          * 滚动速度（px/s）
          * @default 60
         */
        "marqueeSpeed": number;
        /**
          * 是否圆角
          * @default true
         */
        "rounded": boolean;
        /**
          * 是否带有阴影效果
          * @default false
         */
        "shadow": boolean;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": AlertSize;
        /**
          * 警告类型
          * @default 'info'
         */
        "type": AlertType;
        /**
          * 样式变体
          * @default 'light'
         */
        "variant": AlertVariant;
    }
    /**
     * Avatar 头像
     * - 三种展示形态：图片、图标、文字
     * - 三种尺寸：small / medium / large，或自定义像素
     * - 两种形状：circle / square
     * - 文本头像自动缩放，支持 gap 调节左右留白
     * - 支持徽标（红点或计数）
     * - 支持响应式尺寸（clamp）
     */
    interface LdesignAvatar {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * 是否根据宽度自动缩放文字
          * @default true
         */
        "autosize": boolean;
        /**
          * 背景色（图标与文字时有效；图片时作为容器背景）
         */
        "background"?: string;
        /**
          * 是否显示徽标红点
          * @default false
         */
        "badge": boolean;
        /**
          * 徽标颜色（红点/气泡背景色）
          * @default '#ff4d4f'
         */
        "badgeColor": string;
        /**
          * 徽标偏移量
          * @default [0, 0]
         */
        "badgeOffset": [number, number];
        /**
          * 徽标位置
          * @default 'top-right'
         */
        "badgePosition": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        /**
          * 徽标数字，设置后显示计数气泡，优先级高于 badge
         */
        "badgeValue"?: number | string;
        /**
          * 是否显示边框
          * @default false
         */
        "border": boolean;
        /**
          * 边框颜色
          * @default '#e8e8e8'
         */
        "borderColor": string;
        /**
          * 边框宽度
          * @default 2
         */
        "borderWidth": number;
        /**
          * 是否可点击（会添加悬浮效果）
          * @default false
         */
        "clickable": boolean;
        /**
          * 文本/图标颜色
         */
        "color"?: string;
        /**
          * 图片填充模式
          * @default 'cover'
         */
        "fit": 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * 文字与容器左右间距（px），仅文字头像生效
          * @default 4
         */
        "gap": number;
        /**
          * 图标名称（Lucide），无 src 时生效
         */
        "icon"?: string;
        /**
          * 是否显示加载态
          * @default false
         */
        "loading": boolean;
        /**
          * 响应式尺寸（使用 CSS clamp 设置宽高）
          * @default false
         */
        "responsive": boolean;
        /**
          * clamp 最大像素（responsive 为 true 时生效）
          * @default 64
         */
        "responsiveMax": number;
        /**
          * clamp 中间项，接受任何 CSS 长度表达式，默认 10vw
          * @default '10vw'
         */
        "responsiveMid": string;
        /**
          * clamp 最小像素（responsive 为 true 时生效）
          * @default 28
         */
        "responsiveMin": number;
        /**
          * 形状：圆形或方形
          * @default 'circle'
         */
        "shape": 'circle' | 'square';
        /**
          * 尺寸：预设 small/middle/medium/large 或自定义像素
          * @default 'medium'
         */
        "size": 'small' | 'middle' | 'medium' | 'large' | number;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 图片地址
         */
        "src"?: string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 在线状态指示器
         */
        "status"?: 'online' | 'offline' | 'busy' | 'away';
        /**
          * 状态指示器颜色（覆盖默认）
         */
        "statusColor"?: string;
        /**
          * 文字内容（不传则使用默认插槽的文本节点）
         */
        "text"?: string;
    }
    /**
     * Avatar.Group 头像组合
     * - 支持溢出显示 +N
     * - 支持统一 size/shape
     * - 支持重叠间距（gap）
     */
    interface LdesignAvatarGroup {
        /**
          * 边框颜色（用于实现“描边”效果以区分重叠）
          * @default '#fff'
         */
        "borderColor": string;
        /**
          * 重叠间距（正值，单位px），默认 8
          * @default 8
         */
        "gap": number;
        /**
          * 展示的最大头像数；超出后折叠为 +N
         */
        "max"?: number;
        /**
          * 统一形状（未在子项显式指定时生效）
         */
        "shape"?: 'circle' | 'square';
        /**
          * 统一尺寸（未在子项显式指定时生效）
         */
        "size"?: 'small' | 'middle' | 'medium' | 'large' | number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed": number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight": number;
    }
    /**
     * Button 按钮组件
     * 基于 Ant Design 按钮组件架构重构
     * 提供多种类型、尺寸、状态的按钮
     */
    interface LdesignButton {
        /**
          * 是否自动插入空格（仅在子节点为两个中文字符时生效）
          * @default true
          * @since v5.17.0
         */
        "autoInsertSpace": boolean;
        /**
          * 是否为块级按钮
          * @default false
         */
        "block": boolean;
        /**
          * 按钮颜色 (v5.21.0+) 设置按钮的颜色
         */
        "color"?: ButtonColor;
        /**
          * 是否为危险按钮 (语法糖，当设置 color 时会以后者为准)
          * @default false
         */
        "danger": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否为幽灵按钮
          * @default false
         */
        "ghost": boolean;
        /**
          * 点击跳转的地址（将按钮作为 a 标签）
         */
        "href"?: string;
        /**
          * 原生按钮类型
          * @default 'button'
         */
        "htmlType": ButtonHTMLType;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置
          * @default 'start'
         */
        "iconPosition": ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 加载延迟时间（毫秒）
         */
        "loadingDelay"?: number;
        /**
          * 自定义加载图标
         */
        "loadingIcon"?: string;
        /**
          * 是否启用水波纹
          * @default true
         */
        "ripple": boolean;
        /**
          * 是否居中触发
          * @default false
         */
        "rippleCentered": boolean;
        /**
          * 波纹颜色（默认跟随 currentColor/主题）
         */
        "rippleColor"?: string;
        /**
          * 扩散动画时长
          * @default 550
         */
        "rippleDuration": number;
        /**
          * 缓动
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "rippleEasing": string;
        /**
          * 淡出时长
          * @default 260
         */
        "rippleFadeOutDuration": number;
        /**
          * 最大并发波纹数
          * @default 6
         */
        "rippleMaxRipples": number;
        /**
          * 波纹不透明度
          * @default 0.2
         */
        "rippleOpacity": number;
        /**
          * 触发方式
          * @default 'pointerdown'
         */
        "rippleTrigger": 'pointerdown' | 'mousedown' | 'click';
        /**
          * 是否不裁剪边界
          * @default false
         */
        "rippleUnbounded": boolean;
        /**
          * 按钮形状
          * @default 'default'
         */
        "shape": ButtonShape;
        /**
          * 按钮尺寸
          * @default 'middle'
         */
        "size": ButtonSize;
        /**
          * 相当于 a 链接的 target 属性
         */
        "target"?: string;
        /**
          * 按钮类型 (语法糖，推荐使用 variant 和 color)
          * @default 'default'
         */
        "type": ButtonType;
        /**
          * 按钮变体 (v5.21.0+) 设置按钮的样式变体
         */
        "variant"?: ButtonVariant;
    }
    interface LdesignCalendar {
        /**
          * @default true
         */
        "allowCrossWeek": boolean;
        /**
          * @default true
         */
        "allowMonthCrossWeek": boolean;
        "defaultValue"?: string;
        "disabledDate"?: (d: Date) => boolean;
        /**
          * @default false
         */
        "draggableEvents": boolean;
        /**
          * 是否启用内置的CRUD功能
          * @default true
         */
        "enableCrud": boolean;
        /**
          * 自定义新增处理器
         */
        "eventCreateHandler"?: (detail: any) => boolean | Promise<boolean>;
        /**
          * 自定义删除处理器
         */
        "eventDeleteHandler"?: (event: CalEvent) => boolean | Promise<boolean>;
        /**
          * 自定义编辑处理器
         */
        "eventEditHandler"?: (event: CalEvent) => boolean | Promise<boolean>;
        /**
          * 事件数据（JSON 字符串），例如：[{"date":"2025-09-27","title":"发布","color":"#1677ff"}]
         */
        "events"?: string;
        /**
          * 事件数据（JS 设置），与 events 二选一，前者用于 attribute，后者用于 property
         */
        "eventsData"?: Array<CalEvent>;
        /**
          * @default 1
         */
        "firstDayOfWeek": 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'YYYY-MM-DD'
         */
        "format": string;
        /**
          * @default 20
         */
        "hourEnd": number;
        /**
          * 时间轴起止与步长（周/日视图）
          * @default 8
         */
        "hourStart": number;
        /**
          * 自定义农历格式化（优先级高于内置），返回文本，例如 “初九” 或 “正月初一”
         */
        "lunarFormatter"?: (d: Date) => string;
        /**
          * @default 3
         */
        "maxAllDayRows": number;
        "maxDate"?: string;
        "maxDuration"?: number;
        /**
          * 单元格最多展示的事件条数
          * @default 3
         */
        "maxEventsPerCell": number;
        "minDate"?: string;
        /**
          * @default 15
         */
        "minDuration": number;
        /**
          * @default false
         */
        "resizableEvents": boolean;
        /**
          * @default true
         */
        "showAllDay": boolean;
        /**
          * 是否显示农历（默认关闭）。若浏览器支持 Intl Chinese Calendar，将自动使用内置格式化
          * @default false
         */
        "showLunar": boolean;
        /**
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * @default true
         */
        "snapToGrid": boolean;
        /**
          * @default 30
         */
        "stepMinutes": number;
        "value"?: string;
        /**
          * 视图：月/周/日/年
          * @default 'month'
         */
        "view": 'month' | 'week' | 'day' | 'year';
    }
    /**
     * ldesign-cascader
     * - PC: 多层级 popup (每层独立弹出)
     * - Mobile: drawer (auto by viewport width; can be forced by overlay prop)
     */
    interface LdesignCascader {
        "breakpoints"?: Breakpoints;
        /**
          * 点击非叶子是否直接触发变更（默认仅叶子触发）
          * @default false
         */
        "changeOnSelect": boolean;
        /**
          * @default false
         */
        "clearable": boolean;
        /**
          * 选择后是否自动关闭（手动触发模式除外）
          * @default true
         */
        "closeOnSelect": boolean;
        "defaultValue"?: string[];
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 'bottom'
         */
        "drawerPlacement": 'left' | 'right' | 'top' | 'bottom';
        "drawerSize"?: number | string;
        /**
          * @default '请选择'
         */
        "drawerTitle"?: string;
        /**
          * 列表最大高度（列会滚动）
          * @default 280
         */
        "listMaxHeight": number;
        /**
          * @default []
         */
        "options": string | CascaderOption[];
        /**
          * @default 'auto'
         */
        "overlay": CascaderOverlay;
        /**
          * 面板宽度（popup 模式下可用）
         */
        "panelWidth"?: number | string;
        /**
          * @default '请选择'
         */
        "placeholder": string;
        /**
          * @default 'bottom-start' as Placement
         */
        "placement": Placement;
        /**
          * @default ' / '
         */
        "separator": string;
        /**
          * @default 'click'
         */
        "trigger": CascaderTrigger;
        "value"?: string[];
        /**
          * @default false
         */
        "visible": boolean;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate": boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 形状
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value": Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CircleNavigation 圆形导航组件
     * 支持通过 width/height 控制圆的尺寸，默认正上方为第一个元素
     */
    interface LdesignCircleNavigation {
        /**
          * 是否顺时针排布
          * @default true
         */
        "clockwise": boolean;
        /**
          * 椭圆端点轴：auto 根据宽高选择；x 左右为端点；y 上下为端点
          * @default 'auto'
         */
        "ellipseAxis": 'auto' | 'x' | 'y';
        /**
          * 椭圆半弧内的间距策略：'arc' 按弧长均分，'angle' 按角度均分（更“均匀”的视觉效果）
          * @default 'angle'
         */
        "ellipseSpacing": 'arc' | 'angle';
        /**
          * 是否启用拖动旋转
          * @default true
         */
        "enableDrag": boolean;
        /**
          * 惯性摩擦系数（0-1，越小惯性越大）
          * @default 0.95
         */
        "friction": number;
        /**
          * 视角正前方的角度（度），默认 90° 即底部为“最近”
          * @default 90
         */
        "frontAngle": number;
        /**
          * 圆形容器高度（不传则等于 width）
         */
        "height"?: number | string;
        /**
          * @default 1.2
         */
        "maxScale": number;
        /**
          * 透视缩放范围：最小与最大缩放因子
          * @default 0.8
         */
        "minScale": number;
        /**
          * 最小旋转速度（度/帧，低于此速度停止旋转）
          * @default 0.1
         */
        "minVelocity": number;
        /**
          * 是否启用惯性/动量效果
          * @default true
         */
        "momentum": boolean;
        /**
          * 与圆边缘的内边距（px），用于避免项目贴边
          * @default 8
         */
        "padding": number;
        /**
          * 是否启用透视（近大远小）效果
          * @default false
         */
        "perspective": boolean;
        /**
          * 3D 透视距离（px，对应 CSS perspective），zDepth>0 时生效
          * @default 600
         */
        "perspectiveDistance": number;
        /**
          * 3D 透视原点（CSS perspective-origin），如 '50% 50%' 'center 80%'
         */
        "perspectiveOrigin"?: string;
        /**
          * 旋转灵敏度（度/像素）
          * @default 0.5
         */
        "rotateSensitivity": number;
        /**
          * 是否显示圆形轨道
          * @default true
         */
        "showTrack": boolean;
        /**
          * 吸附角度间隔（度）
          * @default 45
         */
        "snapAngle": number;
        /**
          * 是否启用吸附点
          * @default false
         */
        "snapPoints": boolean;
        /**
          * 吸附阈值（度，在此范围内会自动吸附）
          * @default 15
         */
        "snapThreshold": number;
        /**
          * 起始角度（度），默认 -90 表示第一个项在正上方；0 表示第一个项在最右侧
          * @default -90
         */
        "startAngle": number;
        /**
          * 是否启用触摸手势旋转
          * @default true
         */
        "touchRotate": boolean;
        /**
          * 圆形容器宽度（数字按 px 处理，亦可传入如 '20rem' / '240px' / '50%'）
          * @default 240
         */
        "width": number | string;
        /**
          * 3D 透视：Z 轴偏移幅度（px）。>0 则开启 translateZ；与 perspectiveDistance 联动
          * @default 0
         */
        "zDepth": number;
    }
    /**
     * Col 列
     * - 作为 ldesign-row 的子项，通过 span 指定跨列数
     * - 会观察父 Row 或祖先 Grid 的 cols 变化以自适应
     */
    interface LdesignCol {
        /**
          * 占用的列数
          * @default 1
         */
        "span": number;
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     * - 支持尺寸变体、主题、展开/收起全部、嵌套等高级功能
     */
    interface LdesignCollapse {
        /**
          * 手风琴模式：同层级仅允许展开一个
          * @default false
         */
        "accordion": boolean;
        /**
          * 动画持续时间（毫秒）
          * @default 200
         */
        "animationDuration": number;
        /**
          * 动画缓动函数
          * @default 'ease'
         */
        "animationEasing": string;
        /**
          * 边框样式
          * @default true
         */
        "bordered": boolean;
        /**
          * 卡片模式
          * @default false
         */
        "cardStyle": boolean;
        /**
          * 收起全部面板
         */
        "collapseAll": () => Promise<void>;
        /**
          * 内容加载方式
          * @default 'sync'
         */
        "contentLoading": 'sync' | 'async' | 'lazy';
        /**
          * 默认展开的面板标识列表（非受控）
          * @default []
         */
        "defaultValue": string[];
        /**
          * 整体禁用（子面板不可交互）
          * @default false
         */
        "disabled": boolean;
        /**
          * 展开全部面板
         */
        "expandAll": () => Promise<void>;
        /**
          * 展开图标位置
          * @default 'left'
         */
        "expandIconPlacement": 'left' | 'right';
        /**
          * 获取当前展开的面板
         */
        "getOpenPanels": () => Promise<string[]>;
        /**
          * 幽灵（无背景，仅分隔线）
          * @default false
         */
        "ghost": boolean;
        /**
          * 是否高亮搜索结果
          * @default true
         */
        "highlightSearch": boolean;
        /**
          * 是否可通过键盘导航
          * @default true
         */
        "keyboardNavigation": boolean;
        /**
          * 异步加载函数
         */
        "loadContent"?: (name: string) => Promise<string>;
        /**
          * 折叠模式：普通、紧凑、分离、卡片
          * @default 'default'
         */
        "mode": 'default' | 'compact' | 'separated' | 'card';
        /**
          * 嵌套缩进（像素）
          * @default 20
         */
        "nestingIndent": number;
        /**
          * 圆角样式
          * @default 'medium'
         */
        "rounded": 'none' | 'small' | 'medium' | 'large';
        /**
          * 搜索过滤关键词
          * @default ''
         */
        "searchKeyword": string;
        /**
          * 是否显示阴影
          * @default false
         */
        "shadow": boolean;
        /**
          * 是否显示展开图标
          * @default true
         */
        "showExpandIcon": boolean;
        /**
          * 尺寸变体
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 是否可拖拽排序
          * @default false
         */
        "sortable": boolean;
        /**
          * 主题颜色
          * @default 'default'
         */
        "theme": 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 切换指定面板
         */
        "togglePanel": (name: string) => Promise<void>;
        /**
          * 展开的面板标识列表（受控） - 可以是数组或JSON字符串
         */
        "value"?: string[] | string;
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface LdesignCollapsePanel {
        /**
          * 激活状态（由父级控制）
          * @default false
         */
        "active": boolean;
        /**
          * 动画延迟
          * @default 0
         */
        "animationDelay": number;
        /**
          * 动画持续时间（毫秒）
          * @default 200
         */
        "animationDuration": number;
        /**
          * 动画缓动函数
          * @default 'ease'
         */
        "animationEasing": string;
        /**
          * 动画曲线预设
          * @default 'default'
         */
        "animationPreset": 'default' | 'spring' | 'bounce' | 'smooth' | 'sharp';
        /**
          * 自定义折叠图标
         */
        "collapsedIcon"?: string;
        /**
          * 内容动画类型
          * @default 'fade'
         */
        "contentAnimation": 'none' | 'fade' | 'slide' | 'scale' | 'slide-fade';
        /**
          * 内容淡入延迟
          * @default 100
         */
        "contentFadeDelay": number;
        /**
          * 内容内边距
         */
        "contentPadding"?: string;
        /**
          * 收起后是否销毁内容（优先级高于 lazy）
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * 禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 空状态文本
         */
        "emptyText"?: string;
        /**
          * 展开图标名称（默认 chevron-right）
          * @default 'chevron-right'
         */
        "expandIcon": string;
        /**
          * 图标位置（由父级传入，也可单独覆盖）
          * @default 'left'
         */
        "expandIconPlacement": 'left' | 'right';
        /**
          * 自定义展开图标
         */
        "expandedIcon"?: string;
        /**
          * 右侧附加区（可用 slot="extra" 覆盖）
         */
        "extra"?: string;
        /**
          * 头部文本（可用 slot="header" 覆盖）
         */
        "header"?: string;
        /**
          * 头部背景色
         */
        "headerBackground"?: string;
        /**
          * 图标旋转角度
          * @default 90
         */
        "iconRotation": number;
        /**
          * 首次激活才渲染内容（懒渲染）
          * @default false
         */
        "lazy": boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 面板唯一标识（由父级匹配）
         */
        "name"?: string;
        /**
          * 嵌套层级
          * @default 0
         */
        "nestingLevel": number;
        /**
          * 是否反向旋转图标
          * @default false
         */
        "reverseIconRotation": boolean;
        /**
          * 是否显示分隔线
          * @default true
         */
        "showDivider": boolean;
        /**
          * 是否显示展开图标
          * @default true
         */
        "showExpandIcon": boolean;
        /**
          * 尺寸变体
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 是否可排序（由父级传入）
          * @default false
         */
        "sortable": boolean;
        /**
          * 主题颜色
          * @default 'default'
         */
        "theme": 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface LdesignColorInput {
        /**
          * 是否可清空
          * @default true
         */
        "clearable": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 显示/输出格式
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect": boolean;
        /**
          * 输入占位符
          * @default ''
         */
        "placeholder": string;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement": 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 预设颜色
          * @default []
         */
        "presets": string[];
        /**
          * 最近颜色最大条数
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha": boolean;
        /**
          * 是否显示最近使用
          * @default true
         */
        "showHistory": boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 当前颜色字符串（与 ColorPicker 格式一致）
          * @default '#1677ff'
         */
        "value": string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface LdesignColorPicker {
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 自定义按钮文案
          * @default '确定'
         */
        "confirmText": string;
        /**
          * 使用具名插槽自定义触发器（slot="trigger"）；为 true 时不渲染默认触发器
          * @default false
         */
        "customTrigger": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：'linear' | 'radial' | 'both'（传递给面板）
          * @default 'both'
         */
        "gradientTypes": 'linear' | 'radial' | 'both';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect": boolean;
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 1（透传给面板）
          * @default 1
         */
        "minStopGap": number;
        /**
          * 面板模式：'solid' | 'gradient' | 'both'
          * @default 'both'
         */
        "modes": 'solid' | 'gradient' | 'both';
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement": 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 设置弹层宽度（数字或 CSS 长度），panel 将铺满此宽度
         */
        "popupWidth"?: number | string;
        /**
          * @default []
         */
        "presets": string[];
        /**
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示“确定/取消”操作区（默认 false）
          * @default false
         */
        "showActions": boolean;
        /**
          * @default true
         */
        "showAlpha": boolean;
        /**
          * @default true
         */
        "showHistory": boolean;
        /**
          * @default true
         */
        "showPreset": boolean;
        /**
          * @default 'medium'
         */
        "size": Size;
        /**
          * 透传面板 UI 模式
          * @default 'pro'
         */
        "ui": 'simple' | 'pro';
        /**
          * @default '#1677ff'
         */
        "value": string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface LdesignColorPickerPanel {
        /**
          * 是否禁用（禁用交互）
          * @default false
         */
        "disabled": boolean;
        /**
          * 默认显示格式
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：线性/径向/两者（仅在 activeMode=gradient 时生效）
          * @default 'both'
         */
        "gradientTypes": 'linear' | 'radial' | 'both';
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 1
          * @default 1
         */
        "minStopGap": number;
        /**
          * 面板模式：单色 | 渐变 | 两者
          * @default 'both'
         */
        "modes": 'solid' | 'gradient' | 'both';
        /**
          * 预设颜色
          * @default [     '#ff4d4f', '#ff7a45', '#ffa940', '#ffc53d', '#ffec3d', '#bae637', '#73d13d', '#36cfc9', '#40a9ff', '#597ef7', '#9254de', '#f759ab',     '#d4380d', '#d46b08', '#d48806', '#ad8b00', '#5b8c00', '#08979c', '#096dd9', '#1d39c4', '#531dab', '#c41d7f', '#8c8c8c', '#595959',   ]
         */
        "presets": string[];
        /**
          * 最近使用最多条数
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha": boolean;
        /**
          * 是否在渐变面板中显示“线性/径向”切换按钮（默认不显示）
          * @default false
         */
        "showGradientTypeTabs": boolean;
        /**
          * 是否显示最近使用（无数据时自动隐藏）
          * @default true
         */
        "showHistory": boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset": boolean;
        /**
          * 在渐变-径向模式下，于右侧显示径向面板（中心拖拽与参数）
          * @default false
         */
        "showRadialSidebar": boolean;
        /**
          * 尺寸（影响整体间距）
          * @default 'medium'
         */
        "size": Size;
        /**
          * UI 模式：simple 为精简界面，仅保留必要控件；pro 为完整界面
          * @default 'pro'
         */
        "ui": 'simple' | 'pro';
        /**
          * 当前颜色（默认 hex），支持 #RRGGBB/#RRGGBBAA、rgb/rgba、hsl/hsla、hsv
          * @default '#3498db'
         */
        "value": string;
    }
    /**
     * Countdown 倒计时组件
     * 支持按结束时间或时长倒计时，提供格式化显示、事件与方法控制
     */
    interface LdesignCountdown {
        /**
          * 是否在初始化时自动开始
          * @default true
         */
        "autoStart": boolean;
        /**
          * 环形进度的像素尺寸（正方形）
         */
        "circleSize"?: number;
        /**
          * 环形进度的描边宽度
          * @default 4
         */
        "circleStroke": number;
        /**
          * 绝对结束时间（优先级高于 value），支持时间戳、日期字符串或 Date 对象
         */
        "endTime"?: number | string | Date;
        /**
          * 显示格式，支持 DD、HH、mm、ss、SSS 令牌组合
          * @default 'HH:mm:ss'
         */
        "format": string;
        /**
          * 可选标题文本（展示在数值前）。属性名仍使用 title，避免与 HTMLElement.prototype.title 冲突
         */
        "label"?: string;
        /**
          * 是否以更高频率更新毫秒（约 50ms 一次）。为 false 时每秒更新一次
          * @default false
         */
        "millisecond": boolean;
        /**
          * 暂停倒计时（不会重置剩余时间）
         */
        "pause": () => Promise<void>;
        /**
          * 是否暂停（受控）
          * @default false
         */
        "paused": boolean;
        /**
          * 进度展示采用已消耗还是剩余（用于 progress-* 样式）
          * @default 'elapsed'
         */
        "progressAs": 'elapsed' | 'remaining';
        /**
          * 重置并（在 autoStart=true 且未暂停时）重新开始
         */
        "reset": () => Promise<void>;
        /**
          * 是否在分段/翻牌样式中显示单位（天/时/分/秒/毫秒）
          * @default false
         */
        "showUnit": boolean;
        /**
          * 尺寸（对齐其他组件的 size 体系）
          * @default 'middle'
         */
        "size": Size;
        /**
          * 开始/继续倒计时
         */
        "start": () => Promise<void>;
        /**
          * 倒计时时长（毫秒）。当未提供 endTime 时，以当前时间为起点倒计时 value 毫秒
         */
        "value"?: number;
        /**
          * 展现形式：文本、分段、翻牌、进度条、环形进度
          * @default 'text'
         */
        "variant": 'text' | 'segment' | 'flip' | 'progress-line' | 'progress-circle';
    }
    interface LdesignDatePicker {
        /**
          * @default true
         */
        "clearable": boolean;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled": boolean;
        "disabledDate"?: (d: Date) => boolean;
        /**
          * @default 1
         */
        "firstDayOfWeek": 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'YYYY-MM-DD'
         */
        "format": string;
        "maxDate"?: string;
        "minDate"?: string;
        /**
          * @default 'date'
         */
        "mode": 'date' | 'week' | 'month' | 'quarter' | 'year';
        /**
          * @default '请选择日期'
         */
        "placeholder": string;
        /**
          * @default false
         */
        "showWeekNumbers": boolean;
        "value"?: string;
    }
    /**
     * ldesign-draggable
     * 通用可拖拽/缩放/旋转容器（图片优先），支持：
     * - PC：滚轮缩放、拖拽平移、双击 1x/2x 切换
     * - 移动端：双指缩放+旋转、单指平移、松手回弹、动量滚动
     * 用法：
     * 1) 直接传入 src 渲染图片
     *    <ldesign-draggable src="/big.jpg" style="width:100%;height:100%" />
     * 2) 插槽自定义内容（若无 src）：
     *    <ldesign-draggable style="width:100%;height:100%">
     *      <img src="/big.jpg" />
     *    </ldesign-draggable>
     */
    interface LdesignDraggable {
        /**
          * 是否允许双击/双指双击缩放
          * @default true
         */
        "allowDoubleTap": boolean;
        "alt"?: string;
        /**
          * 边界弹性系数
          * @default 0.15
         */
        "boundsElasticity": number;
        /**
          * @default 'top-right'
         */
        "controlsPosition": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        /**
          * 是否禁用右键菜单（避免干扰拖拽）
          * @default true
         */
        "disableContextMenu": boolean;
        /**
          * 双击切换到的缩放倍数
          * @default 2
         */
        "doubleTapZoom": number;
        /**
          * 是否启用网格吸附
          * @default false
         */
        "enableGrid": boolean;
        /**
          * 是否启用撤销/重做
          * @default false
         */
        "enableHistory": boolean;
        /**
          * 是否启用动量滚动
          * @default true
         */
        "enableMomentum": boolean;
        /**
          * 是否允许旋转（移动端双指）
          * @default true
         */
        "enableRotate": boolean;
        "fitContain": () => Promise<void>;
        "fitCover": () => Promise<void>;
        "getState": () => Promise<{ scale: number; rotate: number; offsetX: number; offsetY: number; }>;
        "getTransformString": () => Promise<string>;
        "goToPresetView": (index: number) => Promise<void>;
        /**
          * 网格大小（像素）
          * @default 20
         */
        "gridSize": number;
        /**
          * @default 0
         */
        "initialOffsetX": number;
        /**
          * @default 0
         */
        "initialOffsetY": number;
        /**
          * @default 0
         */
        "initialRotate": number;
        /**
          * 初始状态
          * @default 1
         */
        "initialScale": number;
        /**
          * 按住 Shift 时的平移步长倍率
          * @default 3
         */
        "keyPanFastMultiplier": number;
        /**
          * 方向键平移基础步长（像素）
          * @default 40
         */
        "keyPanStep": number;
        /**
          * 是否启用键盘交互（方向键平移、+/- 缩放、R 旋转、0 重置）
          * @default true
         */
        "keyboard": boolean;
        /**
          * 历史记录最大数量
          * @default 20
         */
        "maxHistory": number;
        /**
          * @default 4
         */
        "maxScale": number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale": number;
        /**
          * 缩略图导航位置
          * @default 'bottom-right'
         */
        "minimapPosition": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        "panBy": (dx: number, dy: number, clamp?: boolean) => Promise<void>;
        "panTo": (x: number, y: number, clamp?: boolean) => Promise<void>;
        /**
          * 预设视角
         */
        "presetViews"?: Array<{ name: string; scale: number; rotate: number; offsetX: number; offsetY: number }>;
        "redo": () => Promise<void>;
        "reset": () => Promise<void>;
        "rotateBy": (deltaDeg: number) => Promise<void>;
        /**
          * 旋转吸附角度（度）。大于 0 时在捏合旋转接近该步进的倍数会吸附
          * @default 0
         */
        "rotateSnapDeg": number;
        /**
          * 旋转吸附阈值（度），仅当与最近倍数的差值不超过该阈值时生效
          * @default 3
         */
        "rotateSnapEpsilon": number;
        "setOffsets": (x: number, y: number) => Promise<void>;
        "setRotate": (deg: number) => Promise<void>;
        /**
          * @default false
         */
        "showControls": boolean;
        /**
          * 是否显示缩放/旋转指示器
          * @default false
         */
        "showIndicators": boolean;
        /**
          * 是否启用缩略图导航
          * @default false
         */
        "showMinimap": boolean;
        /**
          * 是否显示性能监控
          * @default false
         */
        "showPerformance": boolean;
        /**
          * 是否启用平滑边界
          * @default true
         */
        "smoothBounds": boolean;
        /**
          * 若提供则内部渲染 img；否则使用默认插槽
         */
        "src"?: string;
        "toggleGrid": () => Promise<void>;
        "toggleIndicators": () => Promise<void>;
        "toggleMinimap": () => Promise<void>;
        "undo": () => Promise<void>;
        /**
          * 允许使用滚轮进行平移（当未触发缩放时）
          * @default true
         */
        "wheelPan": boolean;
        /**
          * PC 滚轮缩放
          * @default true
         */
        "wheelZoom": boolean;
        /**
          * 是否需要按住 Ctrl/⌘ 才进行滚轮缩放；否则滚轮优先缩放
          * @default false
         */
        "wheelZoomRequiresCtrl": boolean;
        "zoomIn": (step?: number) => Promise<void>;
        "zoomOut": (step?: number) => Promise<void>;
        /**
          * 缩放步进（滚轮/按钮）
          * @default 0.1
         */
        "zoomStep": number;
        "zoomTo": (scale: number, clientX?: number, clientY?: number) => Promise<void>;
    }
    interface LdesignDrawer {
        /**
          * 是否启用动画
          * @default true
         */
        "animation": boolean;
        /**
          * 动画持续时间（毫秒）
          * @default 300
         */
        "animationDuration": number;
        /**
          * 动画缓动函数
          * @default 'ease-in-out'
         */
        "animationEasing": string;
        /**
          * 动画类型
          * @default 'slide'
         */
        "animationType": string;
        /**
          * ARIA 标签
         */
        "ariaLabelText"?: string;
        /**
          * 自动聚焦
          * @default true
         */
        "autoFocus": boolean;
        /**
          * 圆角大小
          * @default '8px'
         */
        "borderRadius": string;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭抽屉
         */
        "close": (reason?: CloseReason) => Promise<void>;
        /**
          * 按 ESC 关闭
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * 容器选择器或元素
         */
        "container"?: string | HTMLElement;
        /**
          * 性能优化：使用 CSS contain
          * @default true
         */
        "cssContain": boolean;
        /**
          * 自定义类名
          * @default ''
         */
        "customClass": string;
        /**
          * 关闭时销毁
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * 标题
         */
        "drawerTitle"?: string;
        /**
          * 焦点捕获
          * @default true
         */
        "focusTrap": boolean;
        /**
          * 底部按钮对齐方式
          * @default 'right'
         */
        "footerAlign": 'left' | 'center' | 'right' | 'space-between';
        /**
          * 是否显示底部边框
          * @default true
         */
        "footerBorder": boolean;
        /**
          * 底部按钮配置
          * @default []
         */
        "footerButtons": DrawerButton[];
        /**
          * 是否全屏
          * @default false
         */
        "fullscreen": boolean;
        /**
          * 是否可全屏切换
          * @default false
         */
        "fullscreenable": boolean;
        /**
          * 获取当前尺寸
         */
        "getSize": () => Promise<{ drawerWidth: number; drawerHeight: number; }>;
        /**
          * 获取当前状态
         */
        "getState": () => Promise<DrawerState>;
        /**
          * 性能优化：GPU 加速
          * @default true
         */
        "gpuAcceleration": boolean;
        /**
          * 是否显示头部边框
          * @default true
         */
        "headerBorder": boolean;
        /**
          * 头部是否吸顶
          * @default false
         */
        "headerSticky": boolean;
        /**
          * 隐藏加载状态
         */
        "hideLoading": () => Promise<void>;
        /**
          * 标题图标
         */
        "icon"?: string;
        /**
          * 性能优化：懒加载内容
          * @default false
         */
        "lazyLoad": boolean;
        /**
          * 抽屉层级
          * @default 'normal'
         */
        "level": DrawerLevel;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 加载文本
          * @default '加载中...'
         */
        "loadingText": string;
        /**
          * 是否锁定页面滚动
          * @default true
         */
        "lockScroll": boolean;
        /**
          * 是否显示遮罩
          * @default true
         */
        "mask": boolean;
        /**
          * 遮罩样式类名
          * @default ''
         */
        "maskClass": string;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 最大尺寸
          * @default '90%'
         */
        "maxSize": number | string;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable": boolean;
        /**
          * 最大化
         */
        "maximize": () => Promise<void>;
        /**
          * 最小尺寸
          * @default 200
         */
        "minSize": number | string;
        /**
          * 是否可最小化
          * @default false
         */
        "minimizable": boolean;
        /**
          * 最小化
         */
        "minimize": () => Promise<void>;
        /**
          * 打开抽屉
         */
        "open": () => Promise<void>;
        /**
          * 内容内边距
          * @default true
         */
        "padding": string | boolean;
        /**
          * 抽屉位置
          * @default 'right'
         */
        "placement": DrawerPlacement;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable": boolean;
        /**
          * 调整大小
         */
        "resize": (size: number | string) => Promise<void>;
        /**
          * 恢复
         */
        "restore": () => Promise<void>;
        /**
          * 恢复焦点
          * @default true
         */
        "restoreFocus": boolean;
        /**
          * 是否启用圆角
          * @default true
         */
        "rounded": boolean;
        /**
          * 是否显示返回按钮
          * @default false
         */
        "showBack": boolean;
        /**
          * 显示加载状态
         */
        "showLoading": (text?: string) => Promise<void>;
        /**
          * 是否显示尺寸提示
          * @default true
         */
        "showSizeHint": boolean;
        /**
          * 抽屉大小
          * @default 'md'
         */
        "size": number | string | SizePreset;
        /**
          * 吸附点
          * @default []
         */
        "snapPoints": SnapPoint[];
        /**
          * 吸附阈值
          * @default 30
         */
        "snapThreshold": number;
        /**
          * 吸附到指定点
         */
        "snapTo": (point: SnapPoint) => Promise<void>;
        /**
          * 副标题
         */
        "subtitle"?: string;
        /**
          * 滑动阈值（0-1）
          * @default 0.3
         */
        "swipeThreshold": number;
        /**
          * 是否启用滑动关闭
          * @default false
         */
        "swipeToClose": boolean;
        /**
          * 滑动触发区域
          * @default 'edge'
         */
        "swipeTriggerArea": 'anywhere' | 'handle' | 'header' | 'edge';
        /**
          * 主题
          * @default 'light'
         */
        "theme": DrawerTheme;
        /**
          * 切换显示状态
         */
        "toggle": () => Promise<void>;
        /**
          * 性能优化：使用 transform
          * @default true
         */
        "useTransform": boolean;
        /**
          * 性能优化：使用虚拟滚动
          * @default false
         */
        "virtualScroll": boolean;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible": boolean;
        /**
          * z-index 层级
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Dropdown 下拉菜单（PC 级联 + 移动端单列）
     * 兼容鼠标和触屏，默认根据指针类型自适应（variant=auto）。
     */
    interface LdesignDropdown {
        /**
          * 移动端选中态颜色（文本与对勾）
          * @default '#F53F3F'
         */
        "activeColor": string;
        /**
          * 浮层挂载位置：默认 body，避免在文档容器中被裁剪
          * @default 'body'
         */
        "appendTo": 'self' | 'body' | 'closest-popup';
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow": boolean;
        /**
          * 点击选项后是否自动关闭
          * @default true
         */
        "closeOnSelect": boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 菜单宽度是否跟随触发器宽度（默认否）
          * @default false
         */
        "fitTriggerWidth": boolean;
        /**
          * 下拉节点（数组或 JSON 字符串）
          * @default []
         */
        "items": string | DropdownNode[];
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight": number;
        /**
          * 触发器文本（默认触发器显示的固定文案，不随选择变化）
          * @default '请选择'
         */
        "placeholder": string;
        /**
          * 出现位置
          * @default 'bottom-start'
         */
        "placement": DropdownPlacement;
        /**
          * 是否将选中项同步到默认触发器文本（默认不同步）
          * @default false
         */
        "reflectSelectionOnTrigger": boolean;
        /**
          * 是否在菜单项上展示选中样式（PC，默认不展示）
          * @default false
         */
        "showSelected": boolean;
        /**
          * 子菜单的触发方式（hover/click），默认 hover，仅 PC 生效
          * @default 'hover'
         */
        "submenuTrigger": 'hover' | 'click';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（PC）
          * @default 'click'
         */
        "trigger": DropdownTrigger;
        /**
          * 选中值（受控）
         */
        "value"?: string;
        /**
          * 自适应：'auto' | 'pc' | 'mobile'
          * @default 'auto'
         */
        "variant": DropdownVariant;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible": boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * ldesign-ellipsis 文本省略/展开组件
     * - 折叠时按指定行数展示，右下角显示"更多"按钮
     * - 展开后：若最后一行还有空间，则"收起"出现在最后一行最右侧；否则换到下一行右侧
     * - 兼容 PC 与移动端，按钮有较大点击热区
     */
    interface LdesignEllipsis {
        /**
          * 自定义按钮 class 和 style
         */
        "actionClass"?: string;
        /**
          * 行为控制：auto（默认）| inline（强制同行右置）| newline（强制换行右对齐）
          * @default 'auto'
         */
        "actionPlacement": 'auto' | 'inline' | 'newline';
        "actionStyle"?: any;
        /**
          * 自动折叠延迟（毫秒，0为不自动折叠）
          * @default 0
         */
        "autoCollapseDelay": number;
        "collapseIcon"?: string;
        /**
          * 展开态允许 ESC 收起
          * @default false
         */
        "collapseOnEscape": boolean;
        /**
          * 收起按钮文案（展开态）
          * @default '收起'
         */
        "collapseText": string;
        /**
          * 要展示的文本内容（纯文本）
         */
        "content"?: string;
        /**
          * 是否默认展开
          * @default false
         */
        "defaultExpanded": boolean;
        /**
          * 双击文本切换展开/收起
          * @default false
         */
        "doubleClickToggle": boolean;
        /**
          * 按钮悬浮效果增强
          * @default true
         */
        "enhancedHover": boolean;
        /**
          * 按钮图标（可选）
         */
        "expandIcon"?: string;
        /**
          * 展开按钮文案（折叠态）
          * @default '更多'
         */
        "expandText": string;
        /**
          * 当前是否展开（受控模式，可选）
         */
        "expanded"?: boolean;
        /**
          * 渐变遮罩颜色（可自定义多个颜色点）
         */
        "fadeColors"?: string;
        /**
          * 渐变遮罩宽度（如 40% 或 120）
          * @default '40%'
         */
        "fadeWidth": number | string;
        /**
          * 同行放置时，文本与"收起"的间距（像素）
          * @default 8
         */
        "inlineGap": number;
        /**
          * 折叠时显示的行数
          * @default 3
         */
        "lines": number;
        /**
          * 响应式行数，根据屏宽选择不同行数
         */
        "linesMap"?: { sm?: number; md?: number; lg?: number; xl?: number };
        /**
          * 收起时滚动到组件顶部
          * @default false
         */
        "scrollIntoViewOnCollapse": boolean;
        /**
          * 展开时滚动到组件顶部
          * @default false
         */
        "scrollIntoViewOnExpand": boolean;
        /**
          * 折叠态是否显示渐变遮罩
          * @default true
         */
        "showFade": boolean;
        /**
          * Tooltip 最大宽度
          * @default 320
         */
        "tooltipMaxWidth": number;
        /**
          * 折叠且溢出时，悬浮显示全文
          * @default false
         */
        "tooltipOnCollapsed": boolean;
        /**
          * Tooltip 位置
          * @default 'top'
         */
        "tooltipPlacement": string;
        /**
          * 展开/收起高度变化动画时长（ms）
          * @default 200
         */
        "transitionDuration": number;
        "update": () => Promise<void>;
    }
    /**
     * Grid 容器（grid -> grid-item 用法）
     * - 在内部通过计算为每个 grid-item 设置明确的行/列位置与跨度
     * - 支持设置每行列数与横纵间距
     */
    interface LdesignGrid {
        /**
          * 固定列数（可选）。若不设置，则根据 minColWidth 自动计算最佳列数
         */
        "cols"?: number;
        /**
          * 折叠时默认显示的行数；0 或未设置表示显示全部
         */
        "defaultRows"?: number;
        /**
          * 是否使用密集填充（尽量填补空位）；显式定位下仅作类名标识
          * @default false
         */
        "dense": boolean;
        /**
          * 同时设置横纵间距（数字按 px）
         */
        "gap"?: number | string;
        /**
          * 每列的最小宽度，用于自适应计算列数；数字为 px；默认 240
          * @default 240
         */
        "minColWidth": number | string;
        /**
          * 展开按钮所在列宽（span）
          * @default 8
         */
        "toggleSpan": number;
        /**
          * 横向列间距
         */
        "xGap"?: number | string;
        /**
          * 纵向行间距
         */
        "yGap"?: number | string;
    }
    /**
     * Grid 子项
     * - 通过 span 指定跨越列数
     * - 根据父容器的 cols 自动限制最大跨度
     */
    interface LdesignGridItem {
        /**
          * 占用的列数
          * @default 1
         */
        "span": number;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 动画类型
          * @default 'none'
         */
        "animation"?: 'spin' | 'pulse' | 'bounce' | 'flash' | 'shake' | 'none';
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 自定义SVG内容
         */
        "customSvg"?: string;
        /**
          * 是否为装饰性图标（无语义）
          * @default false
         */
        "decorative": boolean;
        /**
          * 翻转方向
         */
        "flip"?: 'horizontal' | 'vertical' | 'both';
        /**
          * 是否使用渐变色
          * @default false
         */
        "gradient": boolean;
        /**
          * 渐变色数组
         */
        "gradientColors"?: string | string[];
        /**
          * 渐变方向
          * @default 'horizontal'
         */
        "gradientDirection": 'horizontal' | 'vertical' | 'diagonal';
        /**
          * 无障碍标签
         */
        "label"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 预加载图标（公开方法）
         */
        "preloadIcons": (iconNames: string[]) => Promise<void>;
        /**
          * 旋转角度
         */
        "rotate"?: number;
        /**
          * 搜索图标（公开方法）
         */
        "searchIcons": (keyword: string) => Promise<string[]>;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size": Size | number;
        /**
          * 是否旋转（兼容旧版）
          * @default false
         */
        "spin": boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth": number;
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface LdesignImage {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * BlurHash 占位符
         */
        "blurhash"?: string;
        /**
          * 启用图片对比模式
          * @default false
         */
        "comparison": boolean;
        /**
          * 对比图片源
         */
        "comparisonSrc"?: string;
        /**
          * crossorigin
         */
        "crossorigin"?: 'anonymous' | 'use-credentials';
        /**
          * HTMLImageElement.decoding
          * @default 'auto'
         */
        "decoding": 'async' | 'sync' | 'auto';
        /**
          * 是否禁用（影响交互，如预览）
          * @default false
         */
        "disabled": boolean;
        /**
          * 预览工具栏显示下载按钮
          * @default true
         */
        "downloadable": boolean;
        /**
          * 失败时的回退图片 URL
         */
        "fallback"?: string;
        /**
          * 图片加载优先级
          * @default 'auto'
         */
        "fetchpriority"?: 'high' | 'low' | 'auto';
        /**
          * 图片滤镜效果
          * @default 'none'
         */
        "filter"?: 'grayscale' | 'sepia' | 'blur' | 'brightness' | 'contrast' | 'none';
        /**
          * object-fit
          * @default 'cover'
         */
        "fit": 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * 预览工具栏显示全屏按钮
          * @default true
         */
        "fullscreenable": boolean;
        /**
          * GIF 默认静止，点击播放。建议同时提供 gifPreviewSrc（第一帧快照）与 ratio 避免CLS
          * @default false
         */
        "gifPlayOnClick": boolean;
        /**
          * GIF 静止时展示的静态预览图（例如第一帧 webp/jpg）
         */
        "gifPreviewSrc"?: string;
        /**
          * 高度（number 自动补 px，string 原样输出，如 '50%'、'200px'）
         */
        "height"?: number | string;
        /**
          * 是否允许拖拽原图（仅影响 img 的原生 draggable 属性，预览层可拖拽不受此限制）
          * @default false
         */
        "imgDraggable": boolean;
        /**
          * 提示文本（用于 img 的 title 属性，为避免与 HTMLElement.title 冲突，这里命名为 imgTitle）
         */
        "imgTitle"?: string;
        /**
          * IntersectionObserver rootMargin（预加载阈值）
          * @default '200px'
         */
        "intersectionRootMargin": string;
        /**
          * 是否懒加载（首屏建议关闭）
          * @default true
         */
        "lazy": boolean;
        /**
          * 最大重试次数
          * @default 3
         */
        "maxRetries": number;
        /**
          * 自定义占位图 URL（优先级高于骨架）
         */
        "placeholder"?: string;
        /**
          * 占位背景颜色（无自定义占位图时显示）
          * @default '#f5f5f5'
         */
        "placeholderColor": string;
        /**
          * object-position
          * @default 'center center'
         */
        "position": string;
        /**
          * 点击开启预览
          * @default false
         */
        "preview": boolean;
        /**
          * 预览遮罩主题
          * @default 'dark'
         */
        "previewBackdrop": 'dark' | 'light';
        /**
          * 当前图片在预览组中的索引
          * @default 0
         */
        "previewCurrentIndex": number;
        /**
          * 预览图片组（用于gallery模式）
          * @default []
         */
        "previewImages": string[];
        /**
          * 预览使用的高清图（不填则使用 src）
         */
        "previewSrc"?: string;
        /**
          * 圆角（number 自动补 px，string 原样输出）
         */
        "radius"?: number | string;
        /**
          * 期望的宽高比（用于在未设置高度、尚未加载时提供正确的占位比例，避免布局抖动） - 可传 16/9、4/3 等字符串，或数值（如 1.777） - 若不传，则在图片加载完成后自动以 naturalWidth/naturalHeight 填充比例
         */
        "ratio"?: string | number;
        /**
          * referrerPolicy
         */
        "referrerPolicy"?: string;
        /**
          * 显示重试按钮
          * @default true
         */
        "retryable": boolean;
        /**
          * 预览工具栏显示旋转按钮
          * @default true
         */
        "rotatable": boolean;
        /**
          * 形状：square（默认）| rounded | circle
          * @default 'square'
         */
        "shape": 'square' | 'rounded' | 'circle';
        /**
          * 是否展示错误占位层
          * @default true
         */
        "showError": boolean;
        /**
          * 显示图片信息（尺寸、大小等）
          * @default false
         */
        "showInfo": boolean;
        /**
          * 是否展示加载中骨架（当无自定义占位图时）
          * @default true
         */
        "showLoading": boolean;
        /**
          * 显示加载进度条
          * @default false
         */
        "showProgress": boolean;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 多源图片，支持 AVIF/WebP 等，JSON 字符串或对象数组：[{ type, srcset, media? }]
         */
        "sources"?: string | Array<{ type: string; srcset: string; media?: string }>;
        /**
          * 图片地址
         */
        "src": string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 使用外部预览组件（用于多图gallery模式）
          * @default false
         */
        "useExternalPreview": boolean;
        /**
          * 水印文本
         */
        "watermark"?: string;
        /**
          * 水印位置
          * @default 'bottom-right'
         */
        "watermarkPosition": 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';
        /**
          * 宽度（number 自动补 px，string 原样输出，如 '50%'、'320px'）
         */
        "width"?: number | string;
        /**
          * 预览是否可缩放
          * @default true
         */
        "zoomable": boolean;
    }
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface LdesignImageGroup {
        /**
          * 列数
          * @default 3
         */
        "columns": number;
        /**
          * 间距（px）
          * @default 8
         */
        "gap": number;
        /**
          * 统一子项形状（子项已设置 shape 时不覆盖）
         */
        "shape"?: 'square' | 'rounded' | 'circle';
    }
    /**
     * ldesign-image-preview
     * 图片预览组件，支持缩放、拖拽、旋转等交互
     * 用法：
     * 1) 编程式调用：
     *    const preview = document.querySelector('ldesign-image-preview');
     *    preview.show('https://example.com/image.jpg');
     * 2) 作为图片组件的预览功能：
     *    <ldesign-image src="..." preview></ldesign-image>
     */
    interface LdesignImagePreview {
        /**
          * 当前显示的图片索引
          * @default 0
         */
        "currentIndex": number;
        /**
          * 是否启用旋转
          * @default true
         */
        "enableRotate": boolean;
        "hide": () => Promise<void>;
        /**
          * 当前预览的图片列表
          * @default []
         */
        "images": string[];
        /**
          * 初始缩放比例
          * @default 1
         */
        "initialScale": number;
        /**
          * 是否启用键盘操作
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否循环切换
          * @default true
         */
        "loop": boolean;
        /**
          * 是否在点击遮罩时关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 最大缩放比例
          * @default 4
         */
        "maxScale": number;
        /**
          * 最小缩放比例
          * @default 0.25
         */
        "minScale": number;
        "next": () => Promise<void>;
        "prev": () => Promise<void>;
        "reset": () => Promise<void>;
        "rotateLeft": () => Promise<void>;
        "rotateRight": () => Promise<void>;
        "show": (images?: string | string[], index?: number) => Promise<void>;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "showCloseBtn": boolean;
        /**
          * 是否显示图片索引
          * @default true
         */
        "showIndex": boolean;
        /**
          * 是否显示工具栏
          * @default true
         */
        "showToolbar": boolean;
        /**
          * 动画过渡时长 (ms)
          * @default 300
         */
        "transitionDuration": number;
        /**
          * 是否显示预览
          * @default false
         */
        "visible": boolean;
        "zoomIn": (step?: number) => Promise<void>;
        "zoomOut": (step?: number) => Promise<void>;
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface LdesignImageViewer {
        /**
          * 主题：暗色/亮色遮罩
          * @default 'dark'
         */
        "backdrop": 'dark' | 'light';
        /**
          * 标题与描述的对齐方式：left 左对齐；center 居中；right 右对齐
          * @default 'center'
         */
        "captionAlign": 'left' | 'center' | 'right';
        /**
          * 标题与描述的显示位置：bottom 底部（工具栏上方）；top 顶部（缩略图下方）
          * @default 'bottom'
         */
        "captionPosition": 'bottom' | 'top';
        /**
          * 关闭动画效果（不设置则使用 openAnimation）
         */
        "closeAnimation"?: 'fade' | 'zoom' | 'fade-zoom' | 'slide-up' | 'slide-down' | 'none';
        /**
          * 关闭动画时长（ms，不设置则使用 openDuration 或 transitionDuration）
         */
        "closeDuration"?: number;
        /**
          * 图片列表（数组或 JSON 字符串）
         */
        "images": string | Array<ImageViewerItem | string>;
        /**
          * 是否启用键盘快捷键
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否循环播放
          * @default true
         */
        "loop": boolean;
        /**
          * 点击遮罩是否可关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * @default 4
         */
        "maxScale": number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale": number;
        /**
          * 打开/关闭动画效果：fade 淡入淡出；zoom 缩放；slide-up 上滑；slide-down 下滑；none 无动画
          * @default 'fade-zoom'
         */
        "openAnimation": 'fade' | 'zoom' | 'fade-zoom' | 'slide-up' | 'slide-down' | 'none';
        /**
          * 打开动画时长（ms，不设置则使用 transitionDuration）
         */
        "openDuration"?: number;
        /**
          * 小窗拖拽方式：title 标题栏拖拽；anywhere 全面板可拖拽
          * @default 'title'
         */
        "panelDraggable": 'title' | 'anywhere';
        "panelHeight"?: number | string;
        /**
          * 小窗宽高（viewerMode=modal 时生效）
         */
        "panelWidth"?: number | string;
        /**
          * 是否显示标题与描述
          * @default true
         */
        "showCaption": boolean;
        /**
          * 是否展示顶部缩略图
          * @default true
         */
        "showThumbnails": boolean;
        /**
          * 初始索引
          * @default 0
         */
        "startIndex": number;
        /**
          * 图片切换过渡类型
          * @default 'fade-zoom'
         */
        "transition": 'fade' | 'fade-zoom';
        /**
          * 过渡时长（ms）
          * @default 240
         */
        "transitionDuration": number;
        /**
          * 过渡缓动函数
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "transitionEasing": string;
        /**
          * 查看窗口模式：overlay 全屏；modal 小窗
          * @default 'overlay'
         */
        "viewerMode": 'overlay' | 'modal' | 'embedded';
        /**
          * 小窗标题（modal模式顶部标题栏）
         */
        "viewerTitle"?: string;
        /**
          * 是否显示
          * @default false
         */
        "visible": boolean;
        /**
          * 是否启用滚轮缩放
          * @default true
         */
        "wheelZoom": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
        /**
          * 缩放步进
          * @default 0.1
         */
        "zoomStep": number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize": boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows": number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount": boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword": boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type": 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value": string;
    }
    /**
     * InputNumber 数字输入框
     * - 支持步进按钮、键盘操作（可关闭）、最小/最大值限制、精度控制
     * - 提供 formatter / parser 以实现显示格式化与解析
     */
    interface LdesignInputNumber {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 自定义显示格式化
         */
        "formatter"?: (value: number | null) => string;
        /**
          * 是否启用键盘增减（方向键/页键）
          * @default true
         */
        "keyboard": boolean;
        /**
          * 最大值（可不设）
         */
        "max"?: number;
        /**
          * 最小值（可不设）
         */
        "min"?: number;
        /**
          * 是否允许鼠标滚轮调整
          * @default false
         */
        "mouseWheel": boolean;
        /**
          * 自定义解析（将输入字符串转成数值）
         */
        "parser"?: (input: string) => number | null;
        /**
          * 占位符
         */
        "placeholder"?: string;
        /**
          * 精度（小数位数）。不设则按 step 与输入自动推断
         */
        "precision"?: number;
        /**
          * 是否只读（可选，禁用输入但可复制）
          * @default false
         */
        "readonly": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 状态样式
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 步长（增减用，不强制对齐输入）
          * @default 1
         */
        "step": number;
        /**
          * 当前值（受控，支持双向）
          * @default 0
         */
        "value": number | null;
    }
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface LdesignLoading {
        /**
          * 全屏模式（覆盖整个视口）
          * @default false
         */
        "fullscreen": boolean;
        /**
          * 全屏时是否锁定页面滚动
          * @default true
         */
        "lockScroll": boolean;
        /**
          * 全屏时是否显示遮罩背景
          * @default true
         */
        "mask": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 是否处于加载中
          * @default true
         */
        "spinning": boolean;
        /**
          * 说明文字
         */
        "tip"?: string;
        /**
          * 加载指示类型
          * @default 'spinner'
         */
        "type": 'spinner' | 'dots';
        /**
          * 垂直布局（图标在上、文字在下）
          * @default false
         */
        "vertical": boolean;
        /**
          * 全屏时的层级（可选）
         */
        "zIndex"?: number;
    }
    /**
     * ldesign-mention 提及组件（contenteditable 版本）
     * - 使用可编辑 div 实现富文本输入，支持在文本中高亮渲染提及 token
     * - 候选浮层定位于光标位置（通过隐藏锚点 + ldesign-popup 定位）
     */
    interface LdesignMention {
        /**
          * 浮层挂载到：self|body|closest-popup（透传给 popup）
          * @default 'body'
         */
        "appendTo": 'self' | 'body' | 'closest-popup';
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus": boolean;
        /**
          * token 是否默认可关闭
          * @default true
         */
        "closable": boolean;
        /**
          * 受控模式（为 true 时不在内部修改 value）
          * @default false
         */
        "controlled": boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 自定义过滤函数（返回 true 表示保留）
         */
        "filterOption"?: (input: string, option: MentionItem) => boolean;
        /**
          * 加载中（用于异步搜索）
          * @default false
         */
        "loading": boolean;
        /**
          * 列表最大高度
          * @default 240
         */
        "maxHeight": number;
        /**
          * 最大可见行数（超过后出现滚动条）；不设置则不限制
         */
        "maxRows"?: number;
        /**
          * 结构化初始化（分段）
         */
        "model"?: string | MentionSegment[];
        /**
          * 是否多行模式。多行模式下允许回车换行，并可按 rows/maxRows 控制显示高度
          * @default false
         */
        "multiline": boolean;
        /**
          * 候选项（数组或 JSON 字符串）
          * @default []
         */
        "options": string | MentionItem[];
        /**
          * 是否在加载时将文本中的
          * @xxx /#xxx 解析为标签（仅在未提供 model/valueModel 时生效）
         */
        "parseOnInit"?: boolean;
        /**
          * 解析策略：label（直接转换）/options（仅命中候选时转换）
          * @default 'label'
         */
        "parseStrategy": 'label' | 'options';
        /**
          * 占位文本
         */
        "placeholder"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 是否允许用户手动拖拽调整高度（vertical）
          * @default true
         */
        "resizable": boolean;
        /**
          * 初始可见行数（用于计算最小高度）
          * @default 3
         */
        "rows": number;
        "setOptions": (options: MentionItem[]) => Promise<void>;
        /**
          * 尺寸（影响样式）
          * @default 'medium'
         */
        "size": Size;
        /**
          * 默认 token 外观
          * @default 'primary'
         */
        "tokenType": 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 触发字符（如 @ 或 #），兼容旧属性
          * @default '@'
         */
        "trigger": string;
        /**
          * 触发符个性化配置（JS 对象或 JSON 字符串）
         */
        "triggerConfigs"?: string | MentionTriggerConfig[];
        /**
          * 多个触发字符
         */
        "triggers"?: string | string[];
        /**
          * 当前值（受控，文本值，包含渲染后的
          * @name 文本）
          * @default ''
         */
        "value": string;
        /**
          * 事件/受控值格式（默认 model）
          * @default 'model'
         */
        "valueFormat": 'model' | 'segments' | 'text';
        /**
          * 结构化初始化（模型）
         */
        "valueModel"?: string | MentionModel;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式：同层级只允许展开一个
          * @default false
         */
        "accordion": boolean;
        /**
          * 折叠模式：仅显示一级图标，悬停右侧弹出；无子级时显示 tooltip（仅纵向）
          * @default false
         */
        "collapse": boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控）
          * @default []
         */
        "defaultOpenKeys": string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent": number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items": string | MenuItem[];
        /**
          * 展示模式：vertical（纵向）| horizontal（横向）
          * @default 'vertical'
         */
        "mode": 'vertical' | 'horizontal';
        /**
          * 横向模式下 “更多” 文案
          * @default '更多'
         */
        "moreLabel": string;
        /**
          * 当前打开的子菜单 key 列表（受控）
         */
        "openKeys"?: string[];
        /**
          * 顶层（一级）是否强制显示图标占位（保证对齐）。若条目没有 icon，将渲染一个占位。
          * @default true
         */
        "requireTopIcon": boolean;
        /**
          * 弹出子菜单的触发方式（仅在 flyout/mixed 生效；横向模式同样适用）
          * @default 'hover'
         */
        "submenuTrigger": SubmenuTrigger;
        /**
          * 纵向模式：顶层互斥展开（无论 inline 或 flyout），默认开启
          * @default true
         */
        "topLevelExclusive": boolean;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式展开方式：inline（内嵌）、flyout（右侧弹出）、mixed（一级内嵌，其余弹出）
          * @default 'inline'
         */
        "verticalExpand": VerticalExpand;
    }
    /**
     * Message 全局提示
     * 高性能轻量级的全局反馈组件
     * 特性：
     * - 支持多种消息类型
     * - GPU 加速动画
     * - 内存优化与对象池
     * - 响应式设计
     * - 暗黑模式支持
     * - 无障碍访问
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续消息平滑上移）
         */
        "close": () => Promise<void>;
        /**
          * 自定义类名
         */
        "customClass"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration": number;
        /**
          * 是否支持HTML内容
          * @default false
         */
        "html": boolean;
        /**
          * 最大宽度
         */
        "maxWidth"?: string;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 标题内容
         */
        "messageTitle"?: string;
        /**
          * 消息内容
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置
          * @default 'top'
         */
        "placement": 'top' | 'top-left' | 'top-right' | 'bottom' | 'bottom-left' | 'bottom-right' | 'center';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type": MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        "animEase"?: string;
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation": ModalAnimation;
        /**
          * 新增：是否显示动画效果
          * @default true
         */
        "animationEnabled": boolean;
        /**
          * 新增：自动检测系统深色模式
          * @default true
         */
        "autoDetectDarkMode": boolean;
        /**
          * 软键盘（移动端）避让
          * @default true
         */
        "avoidKeyboard": boolean;
        /**
          * 关闭/确认前拦截钩子（函数属性，需 JS 赋值）
         */
        "beforeClose"?: (reason: 'ok' | 'close' | 'mask' | 'esc' | 'api') => boolean | Promise<boolean>;
        /**
          * 向导步进前置钩子：返回 false 阻止切换
         */
        "beforeStepChange"?: (from: number, to: number) => boolean | Promise<boolean>;
        /**
          * 新增：模糊程度
          * @default 10
         */
        "blurAmount": number;
        /**
          * 新增：模糊背景
          * @default false
         */
        "blurBackground": boolean;
        /**
          * 新增：内容内边距
         */
        "bodyPadding"?: string | number;
        "breakpoints"?: { xs: number; sm: number; md: number; lg: number };
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * @default 'secondary'
         */
        "cancelType": ButtonType;
        /**
          * 是否居中显示
          * @default false
         */
        "centered": boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭模态框
         */
        "close": () => Promise<void>;
        /**
          * 新增：是否显示关闭动画
          * @default true
         */
        "closeAnimation": boolean;
        /**
          * 图标可配置
          * @default 'close'
         */
        "closeIcon": string;
        /**
          * 当前步骤（0-based，可受控）
          * @default 0
         */
        "currentStep": number;
        /**
          * 新增：自定义按钮
         */
        "customButtons"?: Array<{
    text: string;
    type?: ButtonType;
    loading?: boolean;
    disabled?: boolean;
    onClick?: () => void | Promise<void>;
  }>;
        /**
          * 新增：自定义类名
         */
        "customClass"?: string;
        /**
          * 新增：深色模式
          * @default false
         */
        "darkMode": boolean;
        /**
          * 新增：是否允许双击标题栏最大化
          * @default true
         */
        "dblclickMaximize": boolean;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * 新增：是否禁用过渡效果
          * @default false
         */
        "disableTransition": boolean;
        /**
          * Drawer 滑动关闭阈值（距离）：默认 '30%'（以抽屉宽度为基准）
         */
        "drawerCloseThreshold"?: number | string;
        /**
          * Drawer 边缘滑动关闭
          * @default true
         */
        "drawerSwipeToClose": boolean;
        /**
          * 动画参数（也可通过 CSS 变量覆盖）：duration(ms)、ease、animEase
         */
        "duration"?: number;
        "ease"?: string;
        /**
          * 边缘感应宽度（px）
          * @default 24
         */
        "edgeSwipeWidth": number;
        /**
          * 新增：是否启用手势操作
          * @default true
         */
        "enableGestures": boolean;
        /**
          * 新增：是否支持画中画模式
          * @default false
         */
        "enablePictureInPicture": boolean;
        /**
          * 新增：底部按钮对齐
          * @default 'right'
         */
        "footerAlign": 'left' | 'center' | 'right' | 'space-between';
        /**
          * 新增：是否默认满屏
          * @default false
         */
        "fullscreen": boolean;
        /**
          * 容器（选择器或元素）：若提供，则在加载时把组件节点移动到该容器下
         */
        "getContainer"?: string | HTMLElement;
        /**
          * 新增：头部配置
         */
        "headerConfig"?: ModalHeaderConfig;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        /**
          * 隐藏模态框
         */
        "hide": () => Promise<void>;
        "initialFocus"?: string;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable": boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard": boolean;
        /**
          * 新增：是否展示加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 新增：加载文字
          * @default '加载中...'
         */
        "loadingText": string;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable": boolean;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable": boolean;
        /**
          * 最大化模态框
         */
        "maximize": () => Promise<void>;
        /**
          * @default 'maximize'
         */
        "maximizeIcon": string;
        "minHeight"?: number;
        /**
          * 调整大小边界
         */
        "minWidth"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * @default false
         */
        "okDisabled": boolean;
        /**
          * OK 按钮状态
          * @default false
         */
        "okLoading": boolean;
        /**
          * 底部按钮文案和类型控制（仅在未自定义 footer 时生效）
          * @default '确定'
         */
        "okText": string;
        /**
          * @default 'primary'
         */
        "okType": ButtonType;
        /**
          * 屏幕边缘滑动打开抽屉（需 destroyOnClose=false 以便组件常驻）
          * @default false
         */
        "openOnEdgeSwipe": boolean;
        "preOk"?: () => boolean | Promise<boolean>;
        /**
          * 新增：当前进度（0-100）
          * @default 0
         */
        "progress": number;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable": boolean;
        /**
          * 恢复模态框
         */
        "restore": () => Promise<void>;
        /**
          * @default 'restore'
         */
        "restoreIcon": string;
        /**
          * 显示模态框
         */
        "show": () => Promise<void>;
        /**
          * 新增：是否显示取消按钮
          * @default true
         */
        "showCancelButton": boolean;
        /**
          * 新增：是否显示底部分割线
          * @default true
         */
        "showFooterDivider": boolean;
        /**
          * 新增：是否显示满屏按钮
          * @default false
         */
        "showFullscreenButton": boolean;
        /**
          * 新增：是否显示头部分割线
          * @default true
         */
        "showHeaderDivider": boolean;
        /**
          * 新增：是否显示确认按钮
          * @default true
         */
        "showOkButton": boolean;
        /**
          * 新增：是否显示进度指示器
          * @default false
         */
        "showProgress": boolean;
        /**
          * 新增：是否显示阴影
          * @default true
         */
        "showShadow": boolean;
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size": ModalSize;
        /**
          * 步骤标题（JS 赋值）
         */
        "steps"?: string[];
        /**
          * 新增：主题
          * @default 'light'
         */
        "theme": ModalTheme;
        /**
          * 切换最大化状态
         */
        "toggleMaximize": () => Promise<void>;
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 焦点与可访问性
          * @default true
         */
        "trapFocus": boolean;
        /**
          * 变体：抽屉/底部弹层等
          * @default 'modal'
         */
        "variant": ModalVariant;
        /**
          * 响应式变体：根据断点自动切换
         */
        "variantAt"?: Partial<Record<'xs'|'sm'|'md'|'lg', ModalVariant>>;
        /**
          * 新增：支持虚拟化滚动
          * @default false
         */
        "virtualScroll": boolean;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible": boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * 向导模式
          * @default false
         */
        "wizard": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续通知平滑归位）
         */
        "close": () => Promise<void>;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration": number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement": NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type": NotificationType;
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface LdesignPagination {
        /**
          * 页码省略边界数（两端保留）
          * @default 1
         */
        "boundaryCount": number;
        /**
          * 当前页（受控）
         */
        "current"?: number;
        /**
          * 默认当前页（非受控）
          * @default 1
         */
        "defaultCurrent": number;
        /**
          * 默认每页条数（非受控）
          * @default 10
         */
        "defaultPageSize": number;
        /**
          * 组件禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 仅一页时是否隐藏
          * @default false
         */
        "hideOnSinglePage": boolean;
        /**
          * 每页条数（受控）
         */
        "pageSize"?: number;
        /**
          * 页大小选项（可传数组或逗号分隔字符串）
          * @default [10, 20, 50, 100]
         */
        "pageSizeOptions": number[] | string;
        /**
          * 下拉展示文案模板，仅在 dropdown 模式下生效，支持 {size}
          * @default '{size} 条/页'
         */
        "pageSizeText": string;
        /**
          * 页信息文案模板，支持 {current}、{pageCount}
          * @default '{current}/{pageCount} 页'
         */
        "pageText": string;
        /**
          * 是否显示首页/末页
          * @default false
         */
        "showFirstLast": boolean;
        /**
          * 是否显示快速跳转输入框
          * @default false
         */
        "showQuickJumper": boolean;
        /**
          * 是否显示每页条数切换器
          * @default false
         */
        "showSizeChanger": boolean;
        /**
          * 是否显示总数文案
          * @default false
         */
        "showTotal": boolean;
        /**
          * 当前页两侧展示的邻接页数
          * @default 1
         */
        "siblingCount": number;
        /**
          * 简洁模式（仅上一页/下一页 + 页码输入）
          * @default false
         */
        "simple": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 切换器类型：native 原生下拉；dropdown 使用组件弹层
          * @default 'dropdown'
         */
        "sizeChangerType": 'native' | 'dropdown';
        /**
          * 总条目数
          * @default 0
         */
        "total": number;
        /**
          * 总数文案模板，支持 {total}、{rangeStart}、{rangeEnd}
          * @default '共 {total} 条'
         */
        "totalText": string;
    }
    /**
     * ldesign-picker
     * 通用滚轮选择器（单列）
     * - PC：鼠标滚轮按“行”步进，按速度取整步数
     * - 移动端：手势滑动（Pointer Events）+ 惯性 + 吸附到最近项
     * - 支持配置容器高度与每项高度；容器通常为 itemHeight 的奇数倍（3/5/7...）
     * - 正中间指示器高度与子项一致
     */
    interface LdesignPicker {
        "centerToCurrent": (smooth?: boolean) => Promise<void>;
        /**
          * 3D圆柱半径（像素）
         */
        "cylinderRadius"?: number;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 手势拖拽跟随比例（0-1），1 表示 1:1 跟手，越小阻力越大，默认 1
          * @default 1
         */
        "dragFollow": number;
        /**
          * 手势拖拽平滑时间常数（毫秒），>0 时使用一阶平滑使位移逐步接近手指，营造"越来越慢"的阻力感，默认 0（关闭）
         */
        "dragSmoothing"?: number;
        /**
          * 是否启用 3D 效果
          * @default false
         */
        "enable3d": boolean;
        /**
          * 惯性摩擦 0-1（越小减速越快）
          * @default 0.92
         */
        "friction": number;
        /**
          * 是否启用触觉反馈（需要浏览器支持 Vibration API）
          * @default true
         */
        "hapticFeedback": boolean;
        /**
          * 触觉反馈强度（毫秒）
          * @default 5
         */
        "hapticIntensity": number;
        /**
          * 搜索时是否高亮匹配文本
          * @default true
         */
        "highlightMatch": boolean;
        /**
          * 行高（自动根据 size 推导，亦可显式覆盖）
         */
        "itemHeight"?: number;
        /**
          * 键盘快捷定位是否启用（输入字母快速定位）
          * @default true
         */
        "keyboardQuickJump": boolean;
        /**
          * 最大橡皮筋越界（像素）。优先级高于比例
         */
        "maxOverscroll"?: number;
        /**
          * 最大橡皮筋越界比例（相对于容器高度 0-1）。当未提供像素值时生效；未设置则默认 0.5（即容器高度的一半）
         */
        "maxOverscrollRatio"?: number;
        /**
          * 是否启用惯性
          * @default true
         */
        "momentum": boolean;
        /**
          * 选项列表（数组或 JSON 字符串）
          * @default []
         */
        "options": string | PickerOption[];
        /**
          * 可视高度（优先），未设置时使用 visibleItems * itemHeight
         */
        "panelHeight"?: number;
        /**
          * 边界阻力系数 0-1（越小阻力越大）
          * @default 0.3
         */
        "resistance": number;
        /**
          * 3D旋转步长（度）
         */
        "rotateStep"?: number;
        "scrollToIndex": (index: number, opts?: { trigger?: "program" | "click" | "scroll" | "wheel" | "keyboard" | "touch"; animate?: boolean; silent?: boolean; }) => Promise<void>;
        "scrollToValue": (value: string, opts?: { trigger?: "program" | "click" | "scroll" | "wheel" | "keyboard" | "touch"; animate?: boolean; silent?: boolean; }) => Promise<void>;
        /**
          * 搜索防抖延迟（毫秒）
          * @default 300
         */
        "searchDebounce": number;
        /**
          * 是否在搜索时大小写不敏感
          * @default true
         */
        "searchIgnoreCase": boolean;
        /**
          * 搜索框占位符
          * @default '搜索选项...'
         */
        "searchPlaceholder": string;
        /**
          * 是否显示搜索框
          * @default false
         */
        "searchable": boolean;
        /**
          * 是否显示渐变遮罩
          * @default true
         */
        "showMask": boolean;
        /**
          * 尺寸，影响每行高度
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 吸附/回弹动画时长（毫秒，适用于触摸/键盘/滚动吸附），未设置默认 300ms
         */
        "snapDuration"?: number;
        /**
          * 滚轮专用吸附动画时长（毫秒），未设置默认 150ms
         */
        "snapDurationWheel"?: number;
        /**
          * 是否启用音效
          * @default false
         */
        "soundEffects": boolean;
        /**
          * 自定义音效 URL
         */
        "soundUrl"?: string;
        /**
          * 音效音量 (0-1)
          * @default 0.3
         */
        "soundVolume": number;
        /**
          * 回弹动画基础时长（毫秒），未设置默认 bounce: 500ms, ease: 600ms
         */
        "springBackDuration"?: number;
        /**
          * 边界回弹模式：'bounce' 弹簧回弹（默认） | 'ease' 缓慢恢复
          * @default 'bounce'
         */
        "springBackMode": 'bounce' | 'ease';
        /**
          * 主题模式
          * @default 'light'
         */
        "theme": 'light' | 'dark' | 'auto';
        /**
          * 当前值（受控）
         */
        "value"?: string;
        /**
          * 可视条目数（未显式 panelHeight 时生效，建议奇数：3/5/7）
          * @default 5
         */
        "visibleItems": number;
        /**
          * 3D可视角度范围（度）
         */
        "visibleRange"?: number;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于最新 Popup 进行封装，提供确认/取消操作
     * 支持动画、主题、尺寸等特性
     */
    interface LdesignPopconfirm {
        /**
          * 动画类型（继承自 popup）
          * @default 'scale'
         */
        "animation": 'fade' | 'scale' | 'slide';
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow": boolean;
        /**
          * 自动关闭延迟（毫秒），0 表示不自动关闭
          * @default 0
         */
        "autoCloseDelay": number;
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside": boolean;
        /**
          * 确认按钮加载状态
          * @default false
         */
        "confirmLoading": boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay": number;
        /**
          * 图标类型/名称
          * @default 'question'
         */
        "icon": PopconfirmIcon;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 与触发元素的距离
          * @default 8
         */
        "offsetDistance": number;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText": string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement": PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle": string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay": number;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 尺寸（影响内容区域大小）
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger": PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible": boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface LdesignPopup {
        /**
          * 动画类型
          * @default 'scale'
         */
        "animation": PopupAnimation;
        /**
          * @default 'self'
         */
        "appendTo": 'self' | 'body' | 'closest-popup';
        /**
          * @default true
         */
        "arrow": boolean;
        /**
          * 自动关闭延迟（ms），0表示不自动关闭
          * @default 0
         */
        "autoCloseDelay": number;
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable": boolean;
        /**
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * @default true
         */
        "closeOnOutside": boolean;
        "content"?: string;
        /**
          * @default false
         */
        "debug": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 0
         */
        "hideDelay": number;
        /**
          * @default true
         */
        "interactive": boolean;
        /**
          * 加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * @default false
         */
        "lockOnScroll": boolean;
        "maxWidth"?: number | string;
        /**
          * 动画位移距离（px），用于"朝触发器靠近"的起始位移
          * @default 10
         */
        "motionDistance": number;
        /**
          * 动画时长（ms）
          * @default 200
         */
        "motionDuration": number;
        /**
          * 是否开启动画（基于 data-placement 的定向靠近/离开）
          * @default true
         */
        "motionEnabled": boolean;
        /**
          * 与触发元素的距离：参见组件注释中的语义说明
          * @default 8
         */
        "offsetDistance": number | string;
        /**
          * @default 'bottom'
         */
        "placement": PopupPlacement;
        /**
          * 自定义弹层类名
         */
        "popupClass"?: string;
        /**
          * @default 'dialog'
         */
        "popupRole": string;
        "popupTitle"?: string;
        /**
          * @default 0
         */
        "showDelay": number;
        /**
          * 预设尺寸
         */
        "size"?: PopupSize;
        /**
          * @default 'auto'
         */
        "strategy": 'auto' | 'fixed' | 'absolute';
        /**
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * @default 'hover'
         */
        "trigger": PopupTrigger;
        /**
          * @default false
         */
        "visible": boolean;
        "width"?: number | string;
    }
    /**
     * Progress 进度�?
     * 支持：线形、环形、仪表盘、步骤条，多尺寸/状�?文本/自定义颜色等
     */
    interface LdesignProgress {
        /**
          * 启用百分比过渡动�?
          * @default false
         */
        "animated": boolean;
        /**
          * 圆形分段之间的间隔角度（度数�?
          * @default 2
         */
        "circleStepGapDegree": number;
        /**
          * 圆形分段步数（用于环形步进样式）
         */
        "circleSteps"?: number;
        /**
          * 仪表盘变体（仅dashboard类型）：standard | bottom | left | right | fan
          * @default 'standard'
         */
        "dashboardVariant": 'standard' | 'bottom' | 'left' | 'right' | 'fan';
        /**
          * 3D效果（仅line类型�?
          * @default false
         */
        "effect3d": boolean;
        /**
          * 文本格式化，使用 {percent} 占位符，例如�?{percent} / 100"
          * @default '{percent}%'
         */
        "format": string;
        /**
          * 仪表盘缺口角度（0-360，仅 circle/dashboard�?
         */
        "gapDegree"?: number;
        /**
          * 缺口位置（top/right/bottom/left，仅 circle/dashboard�?
          * @default 'top'
         */
        "gapPosition": 'top' | 'right' | 'bottom' | 'left';
        /**
          * 发光效果
          * @default false
         */
        "glow": boolean;
        /**
          * 渐变方向：horizontal | vertical | diagonal
          * @default 'horizontal'
         */
        "gradientDirection": 'horizontal' | 'vertical' | 'diagonal';
        /**
          * 环形渐变（可选，�?circle/dashboard）：起止�?
         */
        "gradientFrom"?: string;
        /**
          * 渐变分段（创建分段渐变效果）
         */
        "gradientSegments"?: Array<{offset: number; color: string}>;
        "gradientTo"?: string;
        /**
          * 不确定状态（显示循环动画，忽�?percent�?
          * @default false
         */
        "indeterminate": boolean;
        /**
          * 线形文本位置
          * @default 'right'
         */
        "infoPosition": 'right' | 'left' | 'inside' | 'bottom';
        /**
          * 多层进度（用于显示多个数据）
         */
        "layers"?: Array<{percent: number; color: string; label?: string}>;
        /**
          * 动态标记点
         */
        "markers"?: Array<{position: number; color?: string; label?: string}>;
        /**
          * 百分�?0-100
          * @default 0
         */
        "percent": number;
        /**
          * 脉冲动画
          * @default false
         */
        "pulse": boolean;
        /**
          * 半圆位置（type=semicircle），top 表示显示上半圆，bottom 表示下半�?
          * @default 'top'
         */
        "semiPosition": 'top' | 'bottom';
        /**
          * 进度条阴�?
          * @default false
         */
        "shadow": boolean;
        /**
          * 是否显示信息文本（line：默认右侧；circle/dashboard：内部）
          * @default true
         */
        "showInfo": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 状态：normal | active | success | exception
          * @default 'normal'
         */
        "status": 'normal' | 'active' | 'success' | 'exception';
        /**
          * 步骤数（type=steps 或设�?steps>0 都渲染步骤条�?
         */
        "steps"?: number;
        /**
          * 步骤间隙 px（仅 steps�?
          * @default 2
         */
        "stepsGap": number;
        /**
          * 步骤条的块圆�?
          * @default 100
         */
        "stepsRadius": number;
        /**
          * 条纹动画（active 状态下默认开启）
          * @default true
         */
        "striped": boolean;
        /**
          * 进度颜色（可为任�?css 颜色�?
         */
        "strokeColor"?: string;
        /**
          * 端点样式：round | square | butt（仅 circle 有效，line 以圆角呈�?round�?
          * @default 'round'
         */
        "strokeLinecap": 'round' | 'square' | 'butt';
        /**
          * 线宽（line 为高度，circle 为描边宽度）
         */
        "strokeWidth"?: number;
        /**
          * 成功颜色
          * @default 'var(--ldesign-success-color, #42bd42)'
         */
        "successColor"?: string;
        /**
          * 成功进度（用于分段显示成功部分）0-100
         */
        "successPercent"?: number;
        /**
          * 视觉主题：default | neon | gradient3d | candy | water | glass | metallic
          * @default 'default'
         */
        "theme": 'default' | 'neon' | 'gradient3d' | 'candy' | 'water' | 'glass' | 'metallic';
        /**
          * 未完成轨道颜�?
         */
        "trailColor"?: string;
        /**
          * 类型：line（默认）| circle | dashboard | steps | semicircle
          * @default 'line'
         */
        "type": 'line' | 'circle' | 'dashboard' | 'steps' | 'semicircle';
        /**
          * 波浪动画（仅line类型�?
          * @default false
         */
        "wave": boolean;
        /**
          * 外径宽度（仅 circle/dashboard），单位 px
          * @default 120
         */
        "width"?: number;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface LdesignRate {
        /**
          * 再次点击清空（值相同则清零）
          * @default true
         */
        "allowClear": boolean;
        /**
          * 允许半星
          * @default false
         */
        "allowHalf": boolean;
        /**
          * 选中颜色（支持 CSS 变量覆盖）
         */
        "color"?: string;
        /**
          * 受控模式：为 true 时组件不主动修改 value，仅触发事件
          * @default false
         */
        "controlled": boolean;
        /**
          * 总星数
          * @default 5
         */
        "count": number;
        /**
          * 禁用交互
          * @default false
         */
        "disabled": boolean;
        /**
          * 图标名称（默认 star）
          * @default 'star'
         */
        "icon": string;
        /**
          * 只读（展示，不可交互）
          * @default false
         */
        "readonly": boolean;
        /**
          * 尺寸（影响图标大小与间距）
          * @default 'medium'
         */
        "size": Size;
        /**
          * 提示文案（数组），hover 时显示。可传属性为 JSON 字符串或以属性方式传递数组
         */
        "tooltips"?: string[] | string;
        /**
          * 当前分值（支持受控）
          * @default 0
         */
        "value": number;
        /**
          * 未选中颜色（支持 CSS 变量覆盖）
         */
        "voidColor"?: string;
    }
    /**
     * ResizeBox 伸缩框
     * 可通过拖拽指定边来改变容器宽高
     */
    interface LdesignResizeBox {
        /**
          * 受控模式：为 true 时，不会修改 width/height，外部应在事件中设置新值传回
          * @default false
         */
        "controlled": boolean;
        /**
          * 角落把手：top-left/top-right/bottom-right/bottom-left。字符串或数组。默认仅启用 bottom-right。
          * @default 'bottom-right'
         */
        "corners": string | Array<'top-left' | 'top-right' | 'bottom-right' | 'bottom-left'>;
        /**
          * 允许伸缩的边：top/right/bottom/left。默认允许 right 与 bottom，满足常见的“右/下/右下角”拖拽需求
          * @default 'right,bottom'
         */
        "directions": string | Array<'top' | 'right' | 'bottom' | 'left'>;
        /**
          * 是否禁用伸缩
          * @default false
         */
        "disabled": boolean;
        /**
          * 初始高度。可传数字（px）或任何合法 CSS 高度值（如 'auto'）。拖拽后以 px 写回。
          * @default 200
         */
        "height": number | string;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * @default 60
         */
        "minHeight": number;
        /**
          * 最小/最大尺寸（px）
          * @default 80
         */
        "minWidth": number;
        /**
          * 尺寸标识，仅影响样式（边框、把手大小等）
          * @default 'medium'
         */
        "size": Size;
        /**
          * 吸附步进（px）。>0 时，拖拽尺寸会对齐到该步进的整数倍。
          * @default 0
         */
        "snap": number;
        /**
          * 初始宽度。可传数字（px）或任何合法 CSS 宽度值（如 '100%'）。拖拽后以 px 写回。
          * @default 360
         */
        "width": number | string;
    }
    /**
     * Ripple 水波纹效果
     * 用法：把 <ldesign-ripple /> 放入任意元素内部（建议放最后），即可在该元素上获得点击水波纹效果。
     * 例如：
     * <button class="btn">按钮<ldesign-ripple /></button>
     */
    interface LdesignRipple {
        /**
          * 是否居中触发
          * @default false
         */
        "centered": boolean;
        /**
          * 波纹颜色，默认 currentColor
         */
        "color"?: string;
        /**
          * 自定义类名
         */
        "customClass"?: string;
        /**
          * 波纹方向
          * @default 'outward'
         */
        "direction": 'outward' | 'inward' | 'both';
        /**
          * 禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 膨胀动画时长(ms)
          * @default 600
         */
        "duration": number;
        /**
          * 缓动函数
          * @default 'cubic-bezier(0.4, 0, 0.2, 1)'
         */
        "easing": string;
        /**
          * 淡出时长(ms)
          * @default 300
         */
        "fadeOutDuration": number;
        /**
          * 是否启用发光效果
          * @default false
         */
        "glow": boolean;
        /**
          * 发光强度
          * @default 0.5
         */
        "glowIntensity": number;
        /**
          * 是否启用振动反馈 (需要浏览器支持)
          * @default false
         */
        "haptic": boolean;
        /**
          * 振动强度 (1-10)
          * @default 5
         */
        "hapticIntensity": number;
        /**
          * 是否启用键盘触发 (Enter/Space)
          * @default true
         */
        "keyboardEnabled": boolean;
        /**
          * 多层波纹延迟 (ms)
          * @default 120
         */
        "layerDelay": number;
        /**
          * 同时存在的最大波纹数量
          * @default 8
         */
        "maxRipples": number;
        /**
          * 是否启用多层波纹
          * @default false
         */
        "multiLayer": boolean;
        /**
          * 波纹不透明度
          * @default 0.24
         */
        "opacity": number;
        /**
          * 半径：auto 或固定像素
          * @default 'auto'
         */
        "radius": 'auto' | number;
        /**
          * 波纹大小模式
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large' | 'extra-large';
        /**
          * 是否启用声音反馈
          * @default false
         */
        "sound": boolean;
        /**
          * 声音音量 (0-1)
          * @default 0.1
         */
        "soundVolume": number;
        /**
          * 最小触发间隔 (ms)
          * @default 0
         */
        "throttle": number;
        /**
          * 是否允许触摸设备
          * @default true
         */
        "touchEnabled": boolean;
        /**
          * 触发方式
          * @default 'pointerdown'
         */
        "trigger": 'pointerdown' | 'mousedown' | 'click';
        /**
          * 是否不裁剪边界
          * @default false
         */
        "unbounded": boolean;
        /**
          * 波纹效果类型
          * @default 'default'
         */
        "variant": 'default' | 'light' | 'strong' | 'pulse' | 'gradient';
    }
    /**
     * Row 行容器
     * - 作为一行的网格容器
     * - 可独立配置列数与间距，或继承上级 ldesign-grid 的默认值
     */
    interface LdesignRow {
        /**
          * 每行的列数；未设置时将继承上级 ldesign-grid 的 cols（默认 24）
         */
        "cols"?: number;
        /**
          * 是否密集填充（尽量填补空位）；未设置时继承上级 grid，默认 true
         */
        "dense"?: boolean;
        /**
          * 统一间距（横纵同时生效），number 视为 px；未设置则继承上级 ldesign-grid 的 gap
         */
        "gap"?: number | string;
        /**
          * 横向列间距；未设置时取 gap，再继承上级 grid 的 x-gap/gap
         */
        "xGap"?: number | string;
        /**
          * 纵向行间距；未设置时取 gap，再继承上级 grid 的 y-gap/gap
         */
        "yGap"?: number | string;
    }
    /**
     * ldesign-scrollbar 自定义滚动条
     * - 包裹任意内容，提供可完全自定义样式的滚动条（纵向/横向）
     * - 支持拖拽拇指、点击轨道跳转、自动/常显、轨道类型切换
     * - 通过 CSS 变量覆盖或直接覆盖内部类名实现“完全自主”的样式定制
     */
    interface LdesignScrollbar {
        /**
          * 是否一直显示（默认悬浮显示）
          * @default false
         */
        "always": boolean;
        /**
          * 自动隐藏延迟（ms）。<=0 表示不自动隐藏（与 always 类似，但 hover 仍会显示）
          * @default 800
         */
        "autoHideDelay": number;
        /**
          * 方向：vertical | horizontal | both
          * @default 'both'
         */
        "direction": 'vertical' | 'horizontal' | 'both';
        /**
          * 是否禁用滚动交互
          * @default false
         */
        "disabled": boolean;
        /**
          * 拖拽滚动（鼠标中键，或按住 Alt+左键）
          * @default false
         */
        "dragScroll": boolean;
        /**
          * 拖拽触发方式：middle（中键）| left-alt（Alt+左键）| left（左键）
          * @default 'middle'
         */
        "dragScrollTrigger": 'middle' | 'left-alt' | 'left';
        "getMetrics": () => Promise<any>;
        /**
          * 水平条位置：bottom | top
          * @default 'bottom'
         */
        "hPosition": 'bottom' | 'top';
        "hideBars": () => Promise<void>;
        "initialScrollLeft"?: number;
        /**
          * 初始滚动位置（可选）
         */
        "initialScrollTop"?: number;
        /**
          * 键盘步进（像素）
          * @default 40
         */
        "keyStep": number;
        /**
          * 是否启用键盘控制（wrap 聚焦时）
          * @default true
         */
        "keyboard": boolean;
        /**
          * 布局：overlay 叠加在内容之上；space 预留滚动条空间
          * @default 'overlay'
         */
        "layout": 'overlay' | 'space';
        /**
          * 使用原生滚动条，不渲染自定义轨道/拇指并且不隐藏系统滚动条
          * @default false
         */
        "native": boolean;
        /**
          * PageUp/PageDown 的步进（像素），<=0 时按可视高度
          * @default 0
         */
        "pageStep": number;
        /**
          * RTL 文字方向（用于水平滚动与 scrollLeft 归一化）
          * @default false
         */
        "rtl": boolean;
        "scrollByDelta": (options: ScrollToOptions) => Promise<void>;
        /**
          * 滚动容器内的元素到可视区
         */
        "scrollIntoViewWithin": (target: Element | string, options?: { behavior?: ScrollBehavior; block?: "start" | "center" | "end"; inline?: "start" | "center" | "end"; }) => Promise<void>;
        "scrollToBottom": () => Promise<void>;
        "scrollToLeft": () => Promise<void>;
        /**
          * 根据百分比滚动（0~1）
         */
        "scrollToPercent": (opts: { x?: number; y?: number; behavior?: ScrollBehavior; }) => Promise<void>;
        "scrollToPos": (options: ScrollToOptions) => Promise<void>;
        "scrollToRight": () => Promise<void>;
        "scrollToTop": () => Promise<void>;
        /**
          * 动态设置 CSS 变量（同时作用在 host 与内部根元素上）。变量名可带或不带 -- 前缀。数值会自动追加 px。
         */
        "setCssVars": (vars: Record<string, string | number>) => Promise<void>;
        /**
          * 显示滚动阴影，提示可滚动方向
          * @default false
         */
        "shadows": boolean;
        /**
          * 手动显示/隐藏滚动条
         */
        "showBarsNow": () => Promise<void>;
        /**
          * 是否显示微调按钮（上下/左右）
          * @default false
         */
        "showButtons": boolean;
        /**
          * 平滑滚动
          * @default false
         */
        "smooth": boolean;
        /**
          * @default 120
         */
        "snapDelay": number;
        /**
          * @default true
         */
        "snapEnabled": boolean;
        /**
          * @default 'start'
         */
        "snapMode": 'start' | 'center' | 'end';
        /**
          * 吸附：滚动结束后吸附到最近匹配元素
         */
        "snapSelector"?: string;
        /**
          * @default 0
         */
        "stickyBottom": number;
        /**
          * sticky 偏移（用于阴影起始位置）
          * @default 0
         */
        "stickyTop": number;
        /**
          * @default 'both'
         */
        "syncAxis": 'vertical' | 'horizontal' | 'both';
        /**
          * @default true
         */
        "syncEnabled": boolean;
        /**
          * 同步滚动组与轴
         */
        "syncGroup"?: string;
        /**
          * @default 32
         */
        "syncThrottle": number;
        /**
          * 最小拇指尺寸（px）
          * @default 24
         */
        "thumbMinSize": number;
        /**
          * 滚动条类型：bar（仅拇指）| track（显示轨道）
          * @default 'bar'
         */
        "type": 'bar' | 'track';
        "update": () => Promise<void>;
        /**
          * 垂直条位置：right | left
          * @default 'right'
         */
        "vPosition": 'right' | 'left';
        /**
          * 滚轮事件是否允许向父容器传播（到达边缘时总是允许）
          * @default false
         */
        "wheelPropagation": boolean;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface LdesignSelect {
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow": boolean;
        /**
          * 可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 选中项后是否自动关闭（默认：单选 true，多选 false）
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight": number;
        /**
          * 多选时最多展示的标签数量，超过后折叠为 +N
         */
        "maxTagCount"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple": boolean;
        /**
          * 选项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "options": string | SelectOption[];
        /**
          * 占位文案（无选中项时）
          * @default '请选择'
         */
        "placeholder": string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement": SelectPlacement;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（Select 多数使用 click 或 manual）
          * @default 'click'
         */
        "trigger": SelectTrigger;
        /**
          * 值（受控）。单选时为 string，多选时为 string[]
         */
        "value"?: string | string[];
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible": boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface LdesignSlider {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 最大值
          * @default 100
         */
        "max": number;
        /**
          * 最小值
          * @default 0
         */
        "min": number;
        /**
          * 是否显示当前值提示
          * @default false
         */
        "showTooltip": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 步长（> 0）
          * @default 1
         */
        "step": number;
        /**
          * 当前值
          * @default 0
         */
        "value": number;
        /**
          * 是否垂直方向
          * @default false
         */
        "vertical": boolean;
    }
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface LdesignSpace {
        /**
          * 交叉轴对齐方式
          * @default 'center'
         */
        "align": 'start' | 'center' | 'end' | 'baseline';
        /**
          * 是否占满容器宽度
          * @default false
         */
        "block": boolean;
        /**
          * 是否自动换行（仅在横向时有效）
          * @default false
         */
        "breakLine": boolean;
        /**
          * 间距方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 间距尺寸。可选预设：small | medium | large；也可传数字，单位为 px
          * @default 'medium'
         */
        "size": Size | number | string;
        /**
          * 分隔符样式：none 不显示分隔符；line 使用 1px 分隔线
          * @default 'none'
         */
        "split": 'none' | 'line';
    }
    /**
     * Split 面板分割
     * 将容器分为左右（vertical）或上下（horizontal）两部分，通过拖拽中间分割条调整比例。
     * - 组件名：<ldesign-split>
     * - 方向：vertical（左右）| horizontal（上下）
     * - 比例：value（0~1），表示起始面板所占比例。拖拽过程中会回写。
     * - 约束：firstMin / secondMin 用于限制两侧最小尺寸（px）。
     * - 事件：ldesignSplitStart / ldesignSplit / ldesignSplitEnd
     */
    interface LdesignSplit {
        /**
          * 折叠状态下是否允许通过拖拽恢复
          * @default true
         */
        "allowDragExpandWhenCollapsed": boolean;
        /**
          * 折叠状态：none | start | end
          * @default 'none'
         */
        "collapsed": 'none' | 'start' | 'end';
        /**
          * 折叠后保留的尺寸（px）
          * @default 0
         */
        "collapsedSize": number;
        /**
          * 是否显示快捷折叠按钮
          * @default false
         */
        "collapsible": boolean;
        /**
          * 分割方向：vertical=左右，horizontal=上下
          * @default 'vertical'
         */
        "direction": 'vertical' | 'horizontal';
        /**
          * 是否禁用拖拽
          * @default false
         */
        "disabled": boolean;
        /**
          * 起始/末尾面板的最小尺寸（px）
          * @default 80
         */
        "firstMin": number;
        /**
          * @default 80
         */
        "secondMin": number;
        /**
          * 分割条厚度（px）
          * @default 6
         */
        "splitterSize": number;
        /**
          * 起始面板比例（0~1）。拖拽过程中会以小数写回
          * @default 0.5
         */
        "value": number;
    }
    /**
     * ldesign-swiper 轮播图组件
     * 功能：
     * - 受控/非受控当前索引（value/defaultValue）
     * - 自动播放（autoplay + autoplayDelay + pauseOnHover + disableOnInteraction）
     * - 循环（loop）
     * - 导航按钮（navigation）
     * - 分页圆点（pagination）
     * - 触摸/鼠标拖拽切换（allowTouchMove + mouseDrag + threshold）
     * - 键盘控制（keyboard）
     * - 水平/垂直方向（direction）
     * - 每屏多项显示（slidesPerView + spaceBetween）
     * - 公共方法（next/prev/slideTo/update）
     */
    interface LdesignSwiper {
        /**
          * 允许触摸/鼠标拖拽
          * @default true
         */
        "allowTouchMove": boolean;
        /**
          * 自动播放
          * @default false
         */
        "autoplay": boolean;
        /**
          * 自动播放间隔（毫秒）
          * @default 3000
         */
        "autoplayDelay": number;
        /**
          * 默认激活索引（非受控）
         */
        "defaultValue"?: number;
        /**
          * 方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 交互后是否禁用自动播放
          * @default true
         */
        "disableOnInteraction": boolean;
        /**
          * 拖拽时显示抓手光标
          * @default true
         */
        "grabCursor": boolean;
        /**
          * 键盘控制
          * @default false
         */
        "keyboard": boolean;
        /**
          * 循环播放
          * @default false
         */
        "loop": boolean;
        /**
          * 鼠标拖拽（PC）
          * @default true
         */
        "mouseDrag": boolean;
        /**
          * 是否显示导航按钮
          * @default true
         */
        "navigation": boolean;
        "next": () => Promise<void>;
        /**
          * 是否显示分页圆点
          * @default true
         */
        "pagination": boolean;
        /**
          * 悬浮暂停自动播放
          * @default true
         */
        "pauseOnHover": boolean;
        "prev": () => Promise<void>;
        "slideTo": (index: number, opts?: { immediate?: boolean; }) => Promise<void>;
        /**
          * 每屏显示的滑块数量（>=1）
          * @default 1
         */
        "slidesPerView": number;
        /**
          * 滑块间距（像素）
          * @default 0
         */
        "spaceBetween": number;
        /**
          * 动画过渡时长（毫秒）
          * @default 300
         */
        "speed": number;
        /**
          * 触发切换的拖拽阈值（像素）
          * @default 50
         */
        "threshold": number;
        "update": () => Promise<void>;
        /**
          * 当前激活的索引（受控）
         */
        "value"?: number;
    }
    /**
     * ldesign-swiper-slide
     * - Swiper 的子项容器，支持 active 状态用于样式控制
     */
    interface LdesignSwiperSlide {
        /**
          * 激活态（由父级 ldesign-swiper 控制）
          * @default false
         */
        "active": boolean;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color": 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape": 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant": 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface LdesignTabPanel {
        /**
          * 由父组件控制的激活状态（反射到属性便于样式控制）
          * @default false
         */
        "active": boolean;
        /**
          * 徽标
         */
        "badge"?: string | number;
        /**
          * 是否可关闭（在标签上显示关闭按钮）
          * @default false
         */
        "closable": boolean;
        /**
          * 销毁隐藏：在面板隐藏时销毁内容，再次显示时重新渲染
          * @default false
         */
        "destroyOnHide": boolean;
        /**
          * 禁用状态（不可被激活）
          * @default false
         */
        "disabled": boolean;
        /**
          * 图标
         */
        "icon"?: string;
        /**
          * 标签显示文本
         */
        "label": string;
        /**
          * 懒渲染：首次激活时才渲染插槽内容，之后保持渲染
          * @default false
         */
        "lazy": boolean;
        /**
          * 加载中状态
          * @default false
         */
        "loading": boolean;
        /**
          * 面板唯一标识（用于匹配激活项）
         */
        "name": string;
        /**
          * 过渡动画类型
          * @default 'fade'
         */
        "transition": 'fade' | 'slide' | 'zoom' | 'none';
        /**
          * 过渡动画时长（毫秒）
          * @default 300
         */
        "transitionDuration": number;
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface LdesignTabs {
        "addTab": (options: { name: string; label: string; icon?: string; closable?: boolean; }) => Promise<HTMLLdesignTabPanelElement>;
        /**
          * 是否显示新增按钮
          * @default false
         */
        "addable": boolean;
        /**
          * 动画过渡时长（毫秒）
          * @default 300
         */
        "animationDuration": number;
        /**
          * 默认激活的标签（非受控）
         */
        "defaultValue"?: string;
        /**
          * 选项卡位置
          * @default 'top'
         */
        "placement": TabsPlacement;
        "removeTab": (name: string) => Promise<void>;
        /**
          * 是否自动适应响应式布局
          * @default true
         */
        "responsive": boolean;
        "selectTab": (name: string) => Promise<void>;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 是否可拖拽排序
          * @default false
         */
        "sortable": boolean;
        /**
          * 是否启用触摸滑动切换
          * @default false
         */
        "swipeable": boolean;
        /**
          * 选项卡外观类型
          * @default 'line'
         */
        "type": TabsType;
        /**
          * 是否隐藏超出部分的标签页（使用更多下拉菜单）
          * @default false
         */
        "useDropdown": boolean;
        /**
          * 当前激活的标签（受控）
         */
        "value"?: string;
    }
    /**
     * Tag 标签组件
     * 用于标记和分类
     */
    interface LdesignTag {
        /**
          * 右上角数字/文本角标
         */
        "badge"?: string | number;
        /**
          * 右上角角标脉动效果
          * @default false
         */
        "badgePulse": boolean;
        /**
          * 是否显示边框动画（仅在 checkable 或 clickable 时有效）
          * @default false
         */
        "borderAnimation": boolean;
        /**
          * 是否可选（切换选中态）
          * @default false
         */
        "checkable": boolean;
        /**
          * 是否可点击（非选中态），用于标签作为动作的场景
          * @default false
         */
        "clickable": boolean;
        /**
          * 是否可关闭
          * @default false
         */
        "closable": boolean;
        /**
          * 关闭按钮的无障碍文案
          * @default '关闭标签'
         */
        "closeAriaLabel": string;
        /**
          * 语义颜色
          * @default 'default'
         */
        "color": 'default' | 'primary' | 'success' | 'warning' | 'danger';
        /**
          * 自定义主色（hex/rgb/hsl）。设置后将覆盖 color 的预设色
         */
        "customColor"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 右上角小圆点
          * @default false
         */
        "dot": boolean;
        /**
          * 效果风格：none（默认）、gradient（渐变）、glass（毛玻璃）、neon（霓虹）
          * @default 'none'
         */
        "effect": 'none' | 'gradient' | 'glass' | 'neon';
        /**
          * 左侧图标
         */
        "icon"?: string;
        /**
          * 加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 选中状态（与 checkable 配合使用）
          * @default false
         */
        "selected": boolean;
        /**
          * 形状（rectangle：直角；round：全圆角；pill：胶囊）
          * @default 'rectangle'
         */
        "shape": 'rectangle' | 'round' | 'pill';
        /**
          * 尺寸（small/middle/large，兼容 medium）
          * @default 'middle'
         */
        "size": Size;
        /**
          * 外观风格 - light: 浅色背景（默认） - solid: 实底 - outline: 描边 - ghost: 透明背景，悬停有轻微填充 - dashed: 虚线描边 - elevated: 浅色+阴影
          * @default 'light'
         */
        "variant": 'light' | 'solid' | 'outline' | 'ghost' | 'dashed' | 'elevated';
    }
    /**
     * TagGroup 标签组
     * - 支持拖拽排序
     * - 支持动态添加标签
     * - overflow="scroll" 提供横向滚动和可选箭头
     * - overflow="more" 根据 maxVisible 折叠为 +N
     */
    interface LdesignTagGroup {
        /**
          * 添加按钮文本
          * @default '+ 添加标签'
         */
        "addText": string;
        /**
          * 是否显示添加按钮
          * @default false
         */
        "addable": boolean;
        /**
          * 新标签默认颜色
          * @default 'default'
         */
        "defaultColor": 'default' | 'primary' | 'success' | 'warning' | 'danger';
        /**
          * 新标签默认样式
          * @default 'light'
         */
        "defaultVariant": 'light' | 'solid' | 'outline' | 'ghost' | 'dashed' | 'elevated';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否启用拖拽排序
          * @default false
         */
        "enableDrag": boolean;
        /**
          * 输入框占位符
          * @default '请输入标签名'
         */
        "inputPlaceholder": string;
        /**
          * more 模式下最多展示的项数（超出将折叠）
          * @default 5
         */
        "maxVisible": number;
        /**
          * more 展示文本前缀，例如 "+"
          * @default '+'
         */
        "morePrefix": string;
        /**
          * 溢出策略：wrap（自动换行） | more（+N 收纳）
          * @default 'wrap'
         */
        "overflow": 'wrap' | 'more';
        /**
          * 标签数据（受控模式）
          * @default []
         */
        "tags": TagData[];
    }
    interface LdesignTimePicker {
        "breakpoints"?: Breakpoints1;
        /**
          * @default false
         */
        "clearable": boolean;
        /**
          * @default true
         */
        "confirm": boolean;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled": boolean;
        "disabledHours"?: number[];
        "disabledMinutes"?: number[];
        "disabledSeconds"?: number[];
        /**
          * @default 'bottom'
         */
        "drawerPlacement": 'left' | 'right' | 'top' | 'bottom';
        "drawerSize"?: number | string;
        "drawerTitle"?: string;
        "endValue"?: string;
        /**
          * @default 1
         */
        "hourStep": number;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "loading": boolean;
        "locale"?: TimePickerLocale;
        "maxTime"?: string;
        "minTime"?: string;
        /**
          * @default 1
         */
        "minuteStep": number;
        /**
          * @default '24h'
         */
        "outputFormat": '12h' | '24h';
        /**
          * @default 'auto'
         */
        "overlay": TimePickerOverlay;
        "panelHeight"?: number;
        /**
          * @default '选择时间'
         */
        "placeholder": string;
        /**
          * @default 'bottom-start' as Placement
         */
        "placement": Placement;
        "presets"?: TimePreset[];
        /**
          * @default false
         */
        "range": boolean;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * @default 1
         */
        "secondStep": number;
        /**
          * 是否展示"此刻"快捷按钮
          * @default true
         */
        "showNow": boolean;
        /**
          * @default true
         */
        "showSeconds": boolean;
        /**
          * @default 'medium'
         */
        "size": TimePickerSize;
        "startValue"?: string;
        /**
          * @default [1, 1, 1]
         */
        "steps": number[];
        /**
          * @default 'click'
         */
        "trigger": TimePickerTrigger;
        "value"?: string;
        /**
          * @default false
         */
        "visible": boolean;
        /**
          * @default 5
         */
        "visibleItems": number;
    }
    /**
     * Tooltip 工具提示组件
     * 基于最新 Popup 的轻量封装，继承所有新特性
     */
    interface LdesignTooltip {
        /**
          * 动画类型
          * @default 'scale'
         */
        "animation": TooltipAnimation;
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow": boolean;
        /**
          * 自动关闭延迟
          * @default 0
         */
        "autoCloseDelay": number;
        /**
          * 是否显示关闭按钮（仅click触发时有效）
          * @default false
         */
        "closable": boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay": number;
        /**
          * 是否可交互（hover时鼠标可以移入tooltip）
          * @default false
         */
        "interactive": boolean;
        /**
          * 是否在滚动时锁定位置
          * @default false
         */
        "lockOnScroll": boolean;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth": number | string;
        /**
          * 动画位移距离
          * @default 10
         */
        "motionDistance": number;
        /**
          * 动画时长
          * @default 200
         */
        "motionDuration": number;
        /**
          * 与触发元素的间距
          * @default 8
         */
        "offsetDistance": number | string;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement": TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay": number;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": TooltipSize;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme": 'dark' | 'light';
        /**
          * 自定义类名
         */
        "tooltipClass"?: string;
        /**
          * 标题（可选）
         */
        "tooltipTitle"?: string;
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger": TooltipTrigger;
        /**
          * 是否受控显示
          * @default false
         */
        "visible": boolean;
        /**
          * 宽度（覆盖maxWidth）
         */
        "width"?: number | string;
    }
    /**
     * Transfer 穿梭框
     * 支持左右两栏列表，通过按钮将条目在两侧移动。
     */
    interface LdesignTransfer {
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string[];
        /**
          * 禁用整个组件
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否可搜索
          * @default false
         */
        "filterable": boolean;
        /**
          * 数据源（可传数组或 JSON 字符串）
          * @default []
         */
        "items": string | TransferItem[];
        /**
          * 左侧面板标题
          * @default '源列表'
         */
        "leftTitle": string;
        /**
          * 列表高度（px）
          * @default 240
         */
        "listHeight": number;
        /**
          * 右侧面板标题
          * @default '目标列表'
         */
        "rightTitle": string;
        /**
          * 目标列表值（受控）
         */
        "value"?: string[];
    }
    interface LdesignTree {
        /**
          * @default true
         */
        "allowAfter": boolean;
        /**
          * 全局允许放置位置
          * @default true
         */
        "allowBefore": boolean;
        /**
          * 自定义：是否允许拖拽该节点（JS 赋值）
         */
        "allowDrag"?: (node: TreeNode) => boolean;
        /**
          * 自定义：是否允许在目标位置放置（JS 赋值）
         */
        "allowDrop"?: (dragNode: TreeNode, dropNode: TreeNode, position: 'before' | 'after' | 'inside') => boolean;
        /**
          * @default true
         */
        "allowInside": boolean;
        /**
          * 是否显示复选框
          * @default false
         */
        "checkable": boolean;
        /**
          * 当前勾选项（受控）
         */
        "checkedKeys"?: string[] | string;
        "collapse": (key: string) => Promise<void>;
        "collapseAll": () => Promise<void>;
        /**
          * 远程数据 URL（根或子节点懒加载）
         */
        "dataUrl"?: string;
        /**
          * 默认勾选项（非受控）
          * @default []
         */
        "defaultCheckedKeys": string[] | string;
        /**
          * 默认展开项（非受控）
          * @default []
         */
        "defaultExpandedKeys": string[] | string;
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 拖拽悬停自动展开的延迟（毫秒）
          * @default 400
         */
        "dragExpandDelay": number;
        "expand": (key: string) => Promise<void>;
        "expandAll": () => Promise<void>;
        /**
          * 当前展开项（受控）
         */
        "expandedKeys"?: string[] | string;
        /**
          * 字段映射：当后端字段名非 key/label/children/isLeaf 等时可用；支持 JSON 字符串或对象（JS 赋值）
         */
        "fieldMap"?: string | { key: string; label: string; children?: string; isLeaf?: string; disabled?: string; icon?: string };
        "focusKey": (key: string) => Promise<void>;
        "getItems": () => Promise<TreeNode[]>;
        /**
          * 层级缩进（px）
          * @default 16
         */
        "indent": number;
        /**
          * 树数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items": string | TreeNode[];
        /**
          * 选择器：读取 <script type="application/json"> 的数据
         */
        "itemsSelector"?: string;
        /**
          * 启用懒加载：展开时若无 children 则触发加载
          * @default false
         */
        "lazy": boolean;
        /**
          * 可通过 JS 赋值：自定义加载函数
         */
        "loadData"?: (node?: TreeNode | undefined) => Promise<TreeNode[]>;
        /**
          * 限制最大层级深度（根为 depth=1）；未设置则不限制
         */
        "maxDepth"?: number;
        "move": (dragKey: string, dropKey: string, position: "before" | "after" | "inside") => Promise<boolean>;
        /**
          * 是否多选
          * @default false
         */
        "multiple": boolean;
        /**
          * 是否开启节点拖拽重排
          * @default false
         */
        "nodeDraggable": boolean;
        /**
          * 懒加载参数名（dataUrl 模式下）：父键参数
          * @default 'parent'
         */
        "parentParam": string;
        /**
          * 是否启用键盘重排（Alt+方向键）
          * @default true
         */
        "reorderable": boolean;
        /**
          * 是否可选择（高亮）
          * @default true
         */
        "selectable": boolean;
        "setItems": (items: string | TreeNode[]) => Promise<void>;
        /**
          * 是否显示连接线（简易）
          * @default false
         */
        "showLine": boolean;
        /**
          * 可通过 JS 赋值：转换函数，将接口原始数据转换为 TreeNode[]
         */
        "transform"?: (raw: any) => TreeNode[];
        /**
          * 当前选中项（受控，单选为 string，多选为 string[]）
         */
        "value"?: string | string[];
    }
}
export interface LDropdownPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLDropdownPanelElement;
}
export interface LdesignAffixCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignAffixElement;
}
export interface LdesignAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignAlertElement;
}
export interface LdesignAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignAvatarElement;
}
export interface LdesignButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignButtonElement;
}
export interface LdesignCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCalendarElement;
}
export interface LdesignCascaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCascaderElement;
}
export interface LdesignCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxElement;
}
export interface LdesignCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxGroupElement;
}
export interface LdesignCollapseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCollapseElement;
}
export interface LdesignCollapsePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCollapsePanelElement;
}
export interface LdesignColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorInputElement;
}
export interface LdesignColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorPickerElement;
}
export interface LdesignColorPickerPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorPickerPanelElement;
}
export interface LdesignCountdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCountdownElement;
}
export interface LdesignDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDatePickerElement;
}
export interface LdesignDraggableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDraggableElement;
}
export interface LdesignDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDrawerElement;
}
export interface LdesignDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDropdownElement;
}
export interface LdesignEllipsisCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignEllipsisElement;
}
export interface LdesignImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignImageElement;
}
export interface LdesignImagePreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignImagePreviewElement;
}
export interface LdesignImageViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignImageViewerElement;
}
export interface LdesignInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignInputElement;
}
export interface LdesignInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignInputNumberElement;
}
export interface LdesignMentionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMentionElement;
}
export interface LdesignMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMenuElement;
}
export interface LdesignMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMessageElement;
}
export interface LdesignModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignModalElement;
}
export interface LdesignNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignNotificationElement;
}
export interface LdesignPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPaginationElement;
}
export interface LdesignPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPickerElement;
}
export interface LdesignPopconfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopconfirmElement;
}
export interface LdesignPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopupElement;
}
export interface LdesignProgressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignProgressElement;
}
export interface LdesignRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioElement;
}
export interface LdesignRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioGroupElement;
}
export interface LdesignRateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRateElement;
}
export interface LdesignResizeBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignResizeBoxElement;
}
export interface LdesignScrollbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignScrollbarElement;
}
export interface LdesignSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSelectElement;
}
export interface LdesignSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSliderElement;
}
export interface LdesignSplitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSplitElement;
}
export interface LdesignSwiperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSwiperElement;
}
export interface LdesignSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSwitchElement;
}
export interface LdesignTabPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTabPanelElement;
}
export interface LdesignTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTabsElement;
}
export interface LdesignTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTagElement;
}
export interface LdesignTagGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTagGroupElement;
}
export interface LdesignTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTimePickerElement;
}
export interface LdesignTransferCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTransferElement;
}
export interface LdesignTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTreeElement;
}
declare global {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface HTMLBaseComponentElement extends Components.BaseComponent, HTMLStencilElement {
    }
    var HTMLBaseComponentElement: {
        prototype: HTMLBaseComponentElement;
        new (): HTMLBaseComponentElement;
    };
    interface HTMLLDropdownPanelElementEventMap {
        "visibleChange": boolean;
    }
    interface HTMLLDropdownPanelElement extends Components.LDropdownPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLDropdownPanelElementEventMap>(type: K, listener: (this: HTMLLDropdownPanelElement, ev: LDropdownPanelCustomEvent<HTMLLDropdownPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLDropdownPanelElementEventMap>(type: K, listener: (this: HTMLLDropdownPanelElement, ev: LDropdownPanelCustomEvent<HTMLLDropdownPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLDropdownPanelElement: {
        prototype: HTMLLDropdownPanelElement;
        new (): HTMLLDropdownPanelElement;
    };
    interface HTMLLdesignAffixElementEventMap {
        "ldesignAffixChange": boolean;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface HTMLLdesignAffixElement extends Components.LdesignAffix, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignAffixElement: {
        prototype: HTMLLdesignAffixElement;
        new (): HTMLLdesignAffixElement;
    };
    interface HTMLLdesignAlertElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Alert 警告信息
     * 用于在页面中展示重要的提示信息，支持多种状态、样式变体、尺寸、标题/描述、操作区与可关闭。
     */
    interface HTMLLdesignAlertElement extends Components.LdesignAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignAlertElementEventMap>(type: K, listener: (this: HTMLLdesignAlertElement, ev: LdesignAlertCustomEvent<HTMLLdesignAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignAlertElementEventMap>(type: K, listener: (this: HTMLLdesignAlertElement, ev: LdesignAlertCustomEvent<HTMLLdesignAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignAlertElement: {
        prototype: HTMLLdesignAlertElement;
        new (): HTMLLdesignAlertElement;
    };
    interface HTMLLdesignAvatarElementEventMap {
        "ldesignLoad": { width: number; height: number; src: string };
        "ldesignError": { src?: string; error: string };
        "ldesignClick": MouseEvent;
    }
    /**
     * Avatar 头像
     * - 三种展示形态：图片、图标、文字
     * - 三种尺寸：small / medium / large，或自定义像素
     * - 两种形状：circle / square
     * - 文本头像自动缩放，支持 gap 调节左右留白
     * - 支持徽标（红点或计数）
     * - 支持响应式尺寸（clamp）
     */
    interface HTMLLdesignAvatarElement extends Components.LdesignAvatar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignAvatarElementEventMap>(type: K, listener: (this: HTMLLdesignAvatarElement, ev: LdesignAvatarCustomEvent<HTMLLdesignAvatarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignAvatarElementEventMap>(type: K, listener: (this: HTMLLdesignAvatarElement, ev: LdesignAvatarCustomEvent<HTMLLdesignAvatarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignAvatarElement: {
        prototype: HTMLLdesignAvatarElement;
        new (): HTMLLdesignAvatarElement;
    };
    /**
     * Avatar.Group 头像组合
     * - 支持溢出显示 +N
     * - 支持统一 size/shape
     * - 支持重叠间距（gap）
     */
    interface HTMLLdesignAvatarGroupElement extends Components.LdesignAvatarGroup, HTMLStencilElement {
    }
    var HTMLLdesignAvatarGroupElement: {
        prototype: HTMLLdesignAvatarGroupElement;
        new (): HTMLLdesignAvatarGroupElement;
    };
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface HTMLLdesignBacktopElement extends Components.LdesignBacktop, HTMLStencilElement {
    }
    var HTMLLdesignBacktopElement: {
        prototype: HTMLLdesignBacktopElement;
        new (): HTMLLdesignBacktopElement;
    };
    interface HTMLLdesignButtonElementEventMap {
        "ldesignClick": MouseEvent;
    }
    /**
     * Button 按钮组件
     * 基于 Ant Design 按钮组件架构重构
     * 提供多种类型、尺寸、状态的按钮
     */
    interface HTMLLdesignButtonElement extends Components.LdesignButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignButtonElement: {
        prototype: HTMLLdesignButtonElement;
        new (): HTMLLdesignButtonElement;
    };
    interface HTMLLdesignCalendarElementEventMap {
        "ldesignChange": string;
        "ldesignEventClick": { event: any };
        "ldesignEventDrop": { id?: string; title: string; oldStart?: string; oldEnd?: string; newStart: string; newEnd: string; allDay?: boolean };
        "ldesignEventResize": { id?: string; title: string; oldStart?: string; oldEnd?: string; newStart: string; newEnd: string };
        "ldesignEventCreate": { date?: string; start?: string; end?: string; allDay?: boolean; x?: number; y?: number };
        "ldesignEventEdit": { event: any };
        "ldesignEventDelete": { event: any };
    }
    interface HTMLLdesignCalendarElement extends Components.LdesignCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCalendarElementEventMap>(type: K, listener: (this: HTMLLdesignCalendarElement, ev: LdesignCalendarCustomEvent<HTMLLdesignCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCalendarElementEventMap>(type: K, listener: (this: HTMLLdesignCalendarElement, ev: LdesignCalendarCustomEvent<HTMLLdesignCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCalendarElement: {
        prototype: HTMLLdesignCalendarElement;
        new (): HTMLLdesignCalendarElement;
    };
    interface HTMLLdesignCascaderElementEventMap {
        "ldesignChange": { value: string[] | undefined; options: CascaderOption[] };
        "ldesignVisibleChange": boolean;
    }
    /**
     * ldesign-cascader
     * - PC: 多层级 popup (每层独立弹出)
     * - Mobile: drawer (auto by viewport width; can be forced by overlay prop)
     */
    interface HTMLLdesignCascaderElement extends Components.LdesignCascader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCascaderElementEventMap>(type: K, listener: (this: HTMLLdesignCascaderElement, ev: LdesignCascaderCustomEvent<HTMLLdesignCascaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCascaderElementEventMap>(type: K, listener: (this: HTMLLdesignCascaderElement, ev: LdesignCascaderCustomEvent<HTMLLdesignCascaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCascaderElement: {
        prototype: HTMLLdesignCascaderElement;
        new (): HTMLLdesignCascaderElement;
    };
    interface HTMLLdesignCheckboxElementEventMap {
        "ldesignChange": boolean;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface HTMLLdesignCheckboxElement extends Components.LdesignCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxElement: {
        prototype: HTMLLdesignCheckboxElement;
        new (): HTMLLdesignCheckboxElement;
    };
    interface HTMLLdesignCheckboxGroupElementEventMap {
        "ldesignChange": Array<string | number>;
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface HTMLLdesignCheckboxGroupElement extends Components.LdesignCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxGroupElement: {
        prototype: HTMLLdesignCheckboxGroupElement;
        new (): HTMLLdesignCheckboxGroupElement;
    };
    /**
     * CircleNavigation 圆形导航组件
     * 支持通过 width/height 控制圆的尺寸，默认正上方为第一个元素
     */
    interface HTMLLdesignCircleNavigationElement extends Components.LdesignCircleNavigation, HTMLStencilElement {
    }
    var HTMLLdesignCircleNavigationElement: {
        prototype: HTMLLdesignCircleNavigationElement;
        new (): HTMLLdesignCircleNavigationElement;
    };
    /**
     * Col 列
     * - 作为 ldesign-row 的子项，通过 span 指定跨列数
     * - 会观察父 Row 或祖先 Grid 的 cols 变化以自适应
     */
    interface HTMLLdesignColElement extends Components.LdesignCol, HTMLStencilElement {
    }
    var HTMLLdesignColElement: {
        prototype: HTMLLdesignColElement;
        new (): HTMLLdesignColElement;
    };
    interface HTMLLdesignCollapseElementEventMap {
        "ldesignChange": string[];
        "ldesignToggle": { name: string; open: boolean; openKeys: string[] };
        "ldesignExpandAll": string[];
        "ldesignCollapseAll": void;
        "ldesignBeforeExpand": { name: string; cancel: () => void };
        "ldesignBeforeCollapse": { name: string; cancel: () => void };
        "ldesignSortChange": { from: number; to: number; panelName: string };
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     * - 支持尺寸变体、主题、展开/收起全部、嵌套等高级功能
     */
    interface HTMLLdesignCollapseElement extends Components.LdesignCollapse, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCollapseElementEventMap>(type: K, listener: (this: HTMLLdesignCollapseElement, ev: LdesignCollapseCustomEvent<HTMLLdesignCollapseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCollapseElementEventMap>(type: K, listener: (this: HTMLLdesignCollapseElement, ev: LdesignCollapseCustomEvent<HTMLLdesignCollapseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCollapseElement: {
        prototype: HTMLLdesignCollapseElement;
        new (): HTMLLdesignCollapseElement;
    };
    interface HTMLLdesignCollapsePanelElementEventMap {
        "ldesignCollapseItemToggle": { name: string };
        "ldesignPanelDragStart": { name: string; event: DragEvent };
        "ldesignPanelDragEnd": { event: DragEvent };
        "ldesignPanelDragOver": { name: string; event: DragEvent };
        "ldesignPanelDragLeave": { name: string; event: DragEvent };
        "ldesignPanelDrop": { name: string; event: DragEvent };
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface HTMLLdesignCollapsePanelElement extends Components.LdesignCollapsePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCollapsePanelElementEventMap>(type: K, listener: (this: HTMLLdesignCollapsePanelElement, ev: LdesignCollapsePanelCustomEvent<HTMLLdesignCollapsePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCollapsePanelElementEventMap>(type: K, listener: (this: HTMLLdesignCollapsePanelElement, ev: LdesignCollapsePanelCustomEvent<HTMLLdesignCollapsePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCollapsePanelElement: {
        prototype: HTMLLdesignCollapsePanelElement;
        new (): HTMLLdesignCollapsePanelElement;
    };
    interface HTMLLdesignColorInputElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface HTMLLdesignColorInputElement extends Components.LdesignColorInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorInputElementEventMap>(type: K, listener: (this: HTMLLdesignColorInputElement, ev: LdesignColorInputCustomEvent<HTMLLdesignColorInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorInputElementEventMap>(type: K, listener: (this: HTMLLdesignColorInputElement, ev: LdesignColorInputCustomEvent<HTMLLdesignColorInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorInputElement: {
        prototype: HTMLLdesignColorInputElement;
        new (): HTMLLdesignColorInputElement;
    };
    interface HTMLLdesignColorPickerElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface HTMLLdesignColorPickerElement extends Components.LdesignColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorPickerElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerElement, ev: LdesignColorPickerCustomEvent<HTMLLdesignColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorPickerElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerElement, ev: LdesignColorPickerCustomEvent<HTMLLdesignColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorPickerElement: {
        prototype: HTMLLdesignColorPickerElement;
        new (): HTMLLdesignColorPickerElement;
    };
    interface HTMLLdesignColorPickerPanelElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface HTMLLdesignColorPickerPanelElement extends Components.LdesignColorPickerPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorPickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerPanelElement, ev: LdesignColorPickerPanelCustomEvent<HTMLLdesignColorPickerPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorPickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerPanelElement, ev: LdesignColorPickerPanelCustomEvent<HTMLLdesignColorPickerPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorPickerPanelElement: {
        prototype: HTMLLdesignColorPickerPanelElement;
        new (): HTMLLdesignColorPickerPanelElement;
    };
    interface HTMLLdesignCountdownElementEventMap {
        "ldesignChange": { remaining: number; formatted: string };
        "ldesignFinish": void;
    }
    /**
     * Countdown 倒计时组件
     * 支持按结束时间或时长倒计时，提供格式化显示、事件与方法控制
     */
    interface HTMLLdesignCountdownElement extends Components.LdesignCountdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCountdownElementEventMap>(type: K, listener: (this: HTMLLdesignCountdownElement, ev: LdesignCountdownCustomEvent<HTMLLdesignCountdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCountdownElementEventMap>(type: K, listener: (this: HTMLLdesignCountdownElement, ev: LdesignCountdownCustomEvent<HTMLLdesignCountdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCountdownElement: {
        prototype: HTMLLdesignCountdownElement;
        new (): HTMLLdesignCountdownElement;
    };
    interface HTMLLdesignDatePickerElementEventMap {
        "ldesignChange": any;
        "ldesignVisibleChange": boolean;
    }
    interface HTMLLdesignDatePickerElement extends Components.LdesignDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDatePickerElementEventMap>(type: K, listener: (this: HTMLLdesignDatePickerElement, ev: LdesignDatePickerCustomEvent<HTMLLdesignDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDatePickerElementEventMap>(type: K, listener: (this: HTMLLdesignDatePickerElement, ev: LdesignDatePickerCustomEvent<HTMLLdesignDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDatePickerElement: {
        prototype: HTMLLdesignDatePickerElement;
        new (): HTMLLdesignDatePickerElement;
    };
    interface HTMLLdesignDraggableElementEventMap {
        "ldesignTransformChange": { scale: number; rotate: number; offsetX: number; offsetY: number };
        "ldesignGestureStart": void;
        "ldesignGestureEnd": void;
        "ldesignHistoryChange": { canUndo: boolean; canRedo: boolean };
    }
    /**
     * ldesign-draggable
     * 通用可拖拽/缩放/旋转容器（图片优先），支持：
     * - PC：滚轮缩放、拖拽平移、双击 1x/2x 切换
     * - 移动端：双指缩放+旋转、单指平移、松手回弹、动量滚动
     * 用法：
     * 1) 直接传入 src 渲染图片
     *    <ldesign-draggable src="/big.jpg" style="width:100%;height:100%" />
     * 2) 插槽自定义内容（若无 src）：
     *    <ldesign-draggable style="width:100%;height:100%">
     *      <img src="/big.jpg" />
     *    </ldesign-draggable>
     */
    interface HTMLLdesignDraggableElement extends Components.LdesignDraggable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDraggableElementEventMap>(type: K, listener: (this: HTMLLdesignDraggableElement, ev: LdesignDraggableCustomEvent<HTMLLdesignDraggableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDraggableElementEventMap>(type: K, listener: (this: HTMLLdesignDraggableElement, ev: LdesignDraggableCustomEvent<HTMLLdesignDraggableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDraggableElement: {
        prototype: HTMLLdesignDraggableElement;
        new (): HTMLLdesignDraggableElement;
    };
    interface HTMLLdesignDrawerElementEventMap {
        "drawerBeforeOpen": void;
        "drawerOpen": void;
        "drawerBeforeClose": { reason: CloseReason };
        "drawerClose": { reason: CloseReason };
        "drawerStateChange": { state: DrawerState };
        "drawerResize": { drawerWidth: number; drawerHeight: number };
        "drawerSwipe": { progress: number };
    }
    interface HTMLLdesignDrawerElement extends Components.LdesignDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDrawerElement: {
        prototype: HTMLLdesignDrawerElement;
        new (): HTMLLdesignDrawerElement;
    };
    interface HTMLLdesignDropdownElementEventMap {
        "ldesignChange": { key: string; item: DropdownItem };
        "ldesignVisibleChange": boolean;
    }
    /**
     * Dropdown 下拉菜单（PC 级联 + 移动端单列）
     * 兼容鼠标和触屏，默认根据指针类型自适应（variant=auto）。
     */
    interface HTMLLdesignDropdownElement extends Components.LdesignDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDropdownElementEventMap>(type: K, listener: (this: HTMLLdesignDropdownElement, ev: LdesignDropdownCustomEvent<HTMLLdesignDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDropdownElementEventMap>(type: K, listener: (this: HTMLLdesignDropdownElement, ev: LdesignDropdownCustomEvent<HTMLLdesignDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDropdownElement: {
        prototype: HTMLLdesignDropdownElement;
        new (): HTMLLdesignDropdownElement;
    };
    interface HTMLLdesignEllipsisElementEventMap {
        "ldesignTruncateChange": { overflowed: boolean };
    }
    /**
     * ldesign-ellipsis 文本省略/展开组件
     * - 折叠时按指定行数展示，右下角显示"更多"按钮
     * - 展开后：若最后一行还有空间，则"收起"出现在最后一行最右侧；否则换到下一行右侧
     * - 兼容 PC 与移动端，按钮有较大点击热区
     */
    interface HTMLLdesignEllipsisElement extends Components.LdesignEllipsis, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignEllipsisElementEventMap>(type: K, listener: (this: HTMLLdesignEllipsisElement, ev: LdesignEllipsisCustomEvent<HTMLLdesignEllipsisElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignEllipsisElementEventMap>(type: K, listener: (this: HTMLLdesignEllipsisElement, ev: LdesignEllipsisCustomEvent<HTMLLdesignEllipsisElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignEllipsisElement: {
        prototype: HTMLLdesignEllipsisElement;
        new (): HTMLLdesignEllipsisElement;
    };
    /**
     * Grid 容器（grid -> grid-item 用法）
     * - 在内部通过计算为每个 grid-item 设置明确的行/列位置与跨度
     * - 支持设置每行列数与横纵间距
     */
    interface HTMLLdesignGridElement extends Components.LdesignGrid, HTMLStencilElement {
    }
    var HTMLLdesignGridElement: {
        prototype: HTMLLdesignGridElement;
        new (): HTMLLdesignGridElement;
    };
    /**
     * Grid 子项
     * - 通过 span 指定跨越列数
     * - 根据父容器的 cols 自动限制最大跨度
     */
    interface HTMLLdesignGridItemElement extends Components.LdesignGridItem, HTMLStencilElement {
    }
    var HTMLLdesignGridItemElement: {
        prototype: HTMLLdesignGridItemElement;
        new (): HTMLLdesignGridItemElement;
    };
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface HTMLLdesignIconElement extends Components.LdesignIcon, HTMLStencilElement {
    }
    var HTMLLdesignIconElement: {
        prototype: HTMLLdesignIconElement;
        new (): HTMLLdesignIconElement;
    };
    interface HTMLLdesignImageElementEventMap {
        "ldesignLoad": { width: number; height: number; src: string; size?: number };
        "ldesignError": { src: string; error: string };
        "ldesignPreviewOpen": void;
        "ldesignPreviewClose": void;
        "ldesignDownload": { src: string; filename: string };
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface HTMLLdesignImageElement extends Components.LdesignImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignImageElementEventMap>(type: K, listener: (this: HTMLLdesignImageElement, ev: LdesignImageCustomEvent<HTMLLdesignImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignImageElementEventMap>(type: K, listener: (this: HTMLLdesignImageElement, ev: LdesignImageCustomEvent<HTMLLdesignImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignImageElement: {
        prototype: HTMLLdesignImageElement;
        new (): HTMLLdesignImageElement;
    };
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface HTMLLdesignImageGroupElement extends Components.LdesignImageGroup, HTMLStencilElement {
    }
    var HTMLLdesignImageGroupElement: {
        prototype: HTMLLdesignImageGroupElement;
        new (): HTMLLdesignImageGroupElement;
    };
    interface HTMLLdesignImagePreviewElementEventMap {
        "ldesignPreviewOpen": { images: string[], index: number };
        "ldesignPreviewClose": void;
        "ldesignPreviewChange": { index: number, image: string };
        "ldesignPreviewError": { index: number, image: string };
    }
    /**
     * ldesign-image-preview
     * 图片预览组件，支持缩放、拖拽、旋转等交互
     * 用法：
     * 1) 编程式调用：
     *    const preview = document.querySelector('ldesign-image-preview');
     *    preview.show('https://example.com/image.jpg');
     * 2) 作为图片组件的预览功能：
     *    <ldesign-image src="..." preview></ldesign-image>
     */
    interface HTMLLdesignImagePreviewElement extends Components.LdesignImagePreview, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignImagePreviewElementEventMap>(type: K, listener: (this: HTMLLdesignImagePreviewElement, ev: LdesignImagePreviewCustomEvent<HTMLLdesignImagePreviewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignImagePreviewElementEventMap>(type: K, listener: (this: HTMLLdesignImagePreviewElement, ev: LdesignImagePreviewCustomEvent<HTMLLdesignImagePreviewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignImagePreviewElement: {
        prototype: HTMLLdesignImagePreviewElement;
        new (): HTMLLdesignImagePreviewElement;
    };
    interface HTMLLdesignImageViewerElementEventMap {
        "ldesignVisibleChange": boolean;
        "ldesignOpen": void;
        "ldesignClose": void;
        "ldesignChange": { index: number };
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface HTMLLdesignImageViewerElement extends Components.LdesignImageViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignImageViewerElementEventMap>(type: K, listener: (this: HTMLLdesignImageViewerElement, ev: LdesignImageViewerCustomEvent<HTMLLdesignImageViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignImageViewerElementEventMap>(type: K, listener: (this: HTMLLdesignImageViewerElement, ev: LdesignImageViewerCustomEvent<HTMLLdesignImageViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignImageViewerElement: {
        prototype: HTMLLdesignImageViewerElement;
        new (): HTMLLdesignImageViewerElement;
    };
    interface HTMLLdesignInputElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
        "ldesignClear": void;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface HTMLLdesignInputElement extends Components.LdesignInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignInputElement: {
        prototype: HTMLLdesignInputElement;
        new (): HTMLLdesignInputElement;
    };
    interface HTMLLdesignInputNumberElementEventMap {
        "ldesignInput": number | null;
        "ldesignChange": number | null;
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
    }
    /**
     * InputNumber 数字输入框
     * - 支持步进按钮、键盘操作（可关闭）、最小/最大值限制、精度控制
     * - 提供 formatter / parser 以实现显示格式化与解析
     */
    interface HTMLLdesignInputNumberElement extends Components.LdesignInputNumber, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignInputNumberElementEventMap>(type: K, listener: (this: HTMLLdesignInputNumberElement, ev: LdesignInputNumberCustomEvent<HTMLLdesignInputNumberElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignInputNumberElementEventMap>(type: K, listener: (this: HTMLLdesignInputNumberElement, ev: LdesignInputNumberCustomEvent<HTMLLdesignInputNumberElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignInputNumberElement: {
        prototype: HTMLLdesignInputNumberElement;
        new (): HTMLLdesignInputNumberElement;
    };
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface HTMLLdesignLoadingElement extends Components.LdesignLoading, HTMLStencilElement {
    }
    var HTMLLdesignLoadingElement: {
        prototype: HTMLLdesignLoadingElement;
        new (): HTMLLdesignLoadingElement;
    };
    interface HTMLLdesignMentionElementEventMap {
        "ldesignSearch": { value: string; trigger: string };
        "ldesignSelect": { value: MentionItem; trigger: string };
        "ldesignRemove": { value: string | number; label: string; trigger: string };
        "ldesignChange": string;
        "ldesignValueChange": { text: string; mentions: MentionEntity[]; model: MentionSegment[] };
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
    }
    /**
     * ldesign-mention 提及组件（contenteditable 版本）
     * - 使用可编辑 div 实现富文本输入，支持在文本中高亮渲染提及 token
     * - 候选浮层定位于光标位置（通过隐藏锚点 + ldesign-popup 定位）
     */
    interface HTMLLdesignMentionElement extends Components.LdesignMention, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMentionElementEventMap>(type: K, listener: (this: HTMLLdesignMentionElement, ev: LdesignMentionCustomEvent<HTMLLdesignMentionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMentionElementEventMap>(type: K, listener: (this: HTMLLdesignMentionElement, ev: LdesignMentionCustomEvent<HTMLLdesignMentionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMentionElement: {
        prototype: HTMLLdesignMentionElement;
        new (): HTMLLdesignMentionElement;
    };
    interface HTMLLdesignMenuElementEventMap {
        "ldesignSelect": { key: string; item: MenuItem; pathKeys: string[] };
        "ldesignOpenChange": { key: string; open: boolean; openKeys: string[] };
        "ldesignOverflowChange": { overflowCount: number };
    }
    interface HTMLLdesignMenuElement extends Components.LdesignMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMenuElement: {
        prototype: HTMLLdesignMenuElement;
        new (): HTMLLdesignMenuElement;
    };
    interface HTMLLdesignMessageElementEventMap {
        "ldesignClose": void;
        "ldesignClick": void;
    }
    /**
     * Message 全局提示
     * 高性能轻量级的全局反馈组件
     * 特性：
     * - 支持多种消息类型
     * - GPU 加速动画
     * - 内存优化与对象池
     * - 响应式设计
     * - 暗黑模式支持
     * - 无障碍访问
     */
    interface HTMLLdesignMessageElement extends Components.LdesignMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMessageElement: {
        prototype: HTMLLdesignMessageElement;
        new (): HTMLLdesignMessageElement;
    };
    interface HTMLLdesignModalElementEventMap {
        "ldesignStepChange": number;
        "ldesignVisibleChange": boolean;
        "ldesignClose": void;
        "ldesignOk": void;
    }
    /**
     * Modal 模态框组件
     */
    interface HTMLLdesignModalElement extends Components.LdesignModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignModalElement: {
        prototype: HTMLLdesignModalElement;
        new (): HTMLLdesignModalElement;
    };
    interface HTMLLdesignNotificationElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface HTMLLdesignNotificationElement extends Components.LdesignNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignNotificationElement: {
        prototype: HTMLLdesignNotificationElement;
        new (): HTMLLdesignNotificationElement;
    };
    interface HTMLLdesignPaginationElementEventMap {
        "ldesignChange": { page: number; pageSize: number };
        "ldesignPageSizeChange": { pageSize: number; page: number };
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface HTMLLdesignPaginationElement extends Components.LdesignPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPaginationElementEventMap>(type: K, listener: (this: HTMLLdesignPaginationElement, ev: LdesignPaginationCustomEvent<HTMLLdesignPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPaginationElementEventMap>(type: K, listener: (this: HTMLLdesignPaginationElement, ev: LdesignPaginationCustomEvent<HTMLLdesignPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPaginationElement: {
        prototype: HTMLLdesignPaginationElement;
        new (): HTMLLdesignPaginationElement;
    };
    interface HTMLLdesignPickerElementEventMap {
        "ldesignChange": { value: string | undefined; option?: PickerOption };
        "ldesignPick": { value: string | undefined; option?: PickerOption; context: { trigger: 'click' | 'scroll' | 'touch' | 'wheel' | 'keyboard' } };
    }
    /**
     * ldesign-picker
     * 通用滚轮选择器（单列）
     * - PC：鼠标滚轮按“行”步进，按速度取整步数
     * - 移动端：手势滑动（Pointer Events）+ 惯性 + 吸附到最近项
     * - 支持配置容器高度与每项高度；容器通常为 itemHeight 的奇数倍（3/5/7...）
     * - 正中间指示器高度与子项一致
     */
    interface HTMLLdesignPickerElement extends Components.LdesignPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPickerElementEventMap>(type: K, listener: (this: HTMLLdesignPickerElement, ev: LdesignPickerCustomEvent<HTMLLdesignPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPickerElementEventMap>(type: K, listener: (this: HTMLLdesignPickerElement, ev: LdesignPickerCustomEvent<HTMLLdesignPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPickerElement: {
        prototype: HTMLLdesignPickerElement;
        new (): HTMLLdesignPickerElement;
    };
    interface HTMLLdesignPopconfirmElementEventMap {
        "ldesignConfirm": void;
        "ldesignCancel": void;
        "ldesignVisibleChange": boolean;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于最新 Popup 进行封装，提供确认/取消操作
     * 支持动画、主题、尺寸等特性
     */
    interface HTMLLdesignPopconfirmElement extends Components.LdesignPopconfirm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopconfirmElement: {
        prototype: HTMLLdesignPopconfirmElement;
        new (): HTMLLdesignPopconfirmElement;
    };
    interface HTMLLdesignPopupElementEventMap {
        "ldesignVisibleChange": boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface HTMLLdesignPopupElement extends Components.LdesignPopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopupElement: {
        prototype: HTMLLdesignPopupElement;
        new (): HTMLLdesignPopupElement;
    };
    interface HTMLLdesignProgressElementEventMap {
        "percentChange": number;
        "complete": void;
    }
    /**
     * Progress 进度�?
     * 支持：线形、环形、仪表盘、步骤条，多尺寸/状�?文本/自定义颜色等
     */
    interface HTMLLdesignProgressElement extends Components.LdesignProgress, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignProgressElementEventMap>(type: K, listener: (this: HTMLLdesignProgressElement, ev: LdesignProgressCustomEvent<HTMLLdesignProgressElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignProgressElementEventMap>(type: K, listener: (this: HTMLLdesignProgressElement, ev: LdesignProgressCustomEvent<HTMLLdesignProgressElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignProgressElement: {
        prototype: HTMLLdesignProgressElement;
        new (): HTMLLdesignProgressElement;
    };
    interface HTMLLdesignRadioElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface HTMLLdesignRadioElement extends Components.LdesignRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioElement: {
        prototype: HTMLLdesignRadioElement;
        new (): HTMLLdesignRadioElement;
    };
    interface HTMLLdesignRadioGroupElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface HTMLLdesignRadioGroupElement extends Components.LdesignRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioGroupElement: {
        prototype: HTMLLdesignRadioGroupElement;
        new (): HTMLLdesignRadioGroupElement;
    };
    interface HTMLLdesignRateElementEventMap {
        "ldesignHoverChange": number;
        "ldesignChange": number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface HTMLLdesignRateElement extends Components.LdesignRate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRateElementEventMap>(type: K, listener: (this: HTMLLdesignRateElement, ev: LdesignRateCustomEvent<HTMLLdesignRateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRateElementEventMap>(type: K, listener: (this: HTMLLdesignRateElement, ev: LdesignRateCustomEvent<HTMLLdesignRateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRateElement: {
        prototype: HTMLLdesignRateElement;
        new (): HTMLLdesignRateElement;
    };
    interface HTMLLdesignResizeBoxElementEventMap {
        "ldesignResizeStart": { width: number; height: number; edge: string };
        "ldesignResize": { width: number; height: number; edge: string };
        "ldesignResizeEnd": { width: number; height: number; edge: string };
    }
    /**
     * ResizeBox 伸缩框
     * 可通过拖拽指定边来改变容器宽高
     */
    interface HTMLLdesignResizeBoxElement extends Components.LdesignResizeBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignResizeBoxElementEventMap>(type: K, listener: (this: HTMLLdesignResizeBoxElement, ev: LdesignResizeBoxCustomEvent<HTMLLdesignResizeBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignResizeBoxElementEventMap>(type: K, listener: (this: HTMLLdesignResizeBoxElement, ev: LdesignResizeBoxCustomEvent<HTMLLdesignResizeBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignResizeBoxElement: {
        prototype: HTMLLdesignResizeBoxElement;
        new (): HTMLLdesignResizeBoxElement;
    };
    /**
     * Ripple 水波纹效果
     * 用法：把 <ldesign-ripple /> 放入任意元素内部（建议放最后），即可在该元素上获得点击水波纹效果。
     * 例如：
     * <button class="btn">按钮<ldesign-ripple /></button>
     */
    interface HTMLLdesignRippleElement extends Components.LdesignRipple, HTMLStencilElement {
    }
    var HTMLLdesignRippleElement: {
        prototype: HTMLLdesignRippleElement;
        new (): HTMLLdesignRippleElement;
    };
    /**
     * Row 行容器
     * - 作为一行的网格容器
     * - 可独立配置列数与间距，或继承上级 ldesign-grid 的默认值
     */
    interface HTMLLdesignRowElement extends Components.LdesignRow, HTMLStencilElement {
    }
    var HTMLLdesignRowElement: {
        prototype: HTMLLdesignRowElement;
        new (): HTMLLdesignRowElement;
    };
    interface HTMLLdesignScrollbarElementEventMap {
        "ldesignScroll": { scrollTop: number; scrollLeft: number; clientWidth: number; clientHeight: number; scrollWidth: number; scrollHeight: number };
        "ldesignReach": { edge: 'top' | 'bottom' | 'left' | 'right' };
        "ldesignScrollStart": void;
        "ldesignScrollEnd": void;
    }
    /**
     * ldesign-scrollbar 自定义滚动条
     * - 包裹任意内容，提供可完全自定义样式的滚动条（纵向/横向）
     * - 支持拖拽拇指、点击轨道跳转、自动/常显、轨道类型切换
     * - 通过 CSS 变量覆盖或直接覆盖内部类名实现“完全自主”的样式定制
     */
    interface HTMLLdesignScrollbarElement extends Components.LdesignScrollbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignScrollbarElementEventMap>(type: K, listener: (this: HTMLLdesignScrollbarElement, ev: LdesignScrollbarCustomEvent<HTMLLdesignScrollbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignScrollbarElementEventMap>(type: K, listener: (this: HTMLLdesignScrollbarElement, ev: LdesignScrollbarCustomEvent<HTMLLdesignScrollbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignScrollbarElement: {
        prototype: HTMLLdesignScrollbarElement;
        new (): HTMLLdesignScrollbarElement;
    };
    interface HTMLLdesignSelectElementEventMap {
        "ldesignChange": { value: string | string[] | undefined; options: SelectOption[] };
        "ldesignVisibleChange": boolean;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface HTMLLdesignSelectElement extends Components.LdesignSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSelectElementEventMap>(type: K, listener: (this: HTMLLdesignSelectElement, ev: LdesignSelectCustomEvent<HTMLLdesignSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSelectElementEventMap>(type: K, listener: (this: HTMLLdesignSelectElement, ev: LdesignSelectCustomEvent<HTMLLdesignSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSelectElement: {
        prototype: HTMLLdesignSelectElement;
        new (): HTMLLdesignSelectElement;
    };
    interface HTMLLdesignSliderElementEventMap {
        "ldesignInput": number;
        "ldesignChange": number;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface HTMLLdesignSliderElement extends Components.LdesignSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSliderElementEventMap>(type: K, listener: (this: HTMLLdesignSliderElement, ev: LdesignSliderCustomEvent<HTMLLdesignSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSliderElementEventMap>(type: K, listener: (this: HTMLLdesignSliderElement, ev: LdesignSliderCustomEvent<HTMLLdesignSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSliderElement: {
        prototype: HTMLLdesignSliderElement;
        new (): HTMLLdesignSliderElement;
    };
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface HTMLLdesignSpaceElement extends Components.LdesignSpace, HTMLStencilElement {
    }
    var HTMLLdesignSpaceElement: {
        prototype: HTMLLdesignSpaceElement;
        new (): HTMLLdesignSpaceElement;
    };
    interface HTMLLdesignSplitElementEventMap {
        "ldesignSplitStart": { value: number; direction: 'vertical' | 'horizontal' };
        "ldesignSplit": { value: number; direction: 'vertical' | 'horizontal' };
        "ldesignSplitEnd": { value: number; direction: 'vertical' | 'horizontal' };
        "ldesignSplitCollapse": { side: 'none' | 'start' | 'end' };
    }
    /**
     * Split 面板分割
     * 将容器分为左右（vertical）或上下（horizontal）两部分，通过拖拽中间分割条调整比例。
     * - 组件名：<ldesign-split>
     * - 方向：vertical（左右）| horizontal（上下）
     * - 比例：value（0~1），表示起始面板所占比例。拖拽过程中会回写。
     * - 约束：firstMin / secondMin 用于限制两侧最小尺寸（px）。
     * - 事件：ldesignSplitStart / ldesignSplit / ldesignSplitEnd
     */
    interface HTMLLdesignSplitElement extends Components.LdesignSplit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSplitElementEventMap>(type: K, listener: (this: HTMLLdesignSplitElement, ev: LdesignSplitCustomEvent<HTMLLdesignSplitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSplitElementEventMap>(type: K, listener: (this: HTMLLdesignSplitElement, ev: LdesignSplitCustomEvent<HTMLLdesignSplitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSplitElement: {
        prototype: HTMLLdesignSplitElement;
        new (): HTMLLdesignSplitElement;
    };
    interface HTMLLdesignSwiperElementEventMap {
        "ldesignChange": number;
    }
    /**
     * ldesign-swiper 轮播图组件
     * 功能：
     * - 受控/非受控当前索引（value/defaultValue）
     * - 自动播放（autoplay + autoplayDelay + pauseOnHover + disableOnInteraction）
     * - 循环（loop）
     * - 导航按钮（navigation）
     * - 分页圆点（pagination）
     * - 触摸/鼠标拖拽切换（allowTouchMove + mouseDrag + threshold）
     * - 键盘控制（keyboard）
     * - 水平/垂直方向（direction）
     * - 每屏多项显示（slidesPerView + spaceBetween）
     * - 公共方法（next/prev/slideTo/update）
     */
    interface HTMLLdesignSwiperElement extends Components.LdesignSwiper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSwiperElementEventMap>(type: K, listener: (this: HTMLLdesignSwiperElement, ev: LdesignSwiperCustomEvent<HTMLLdesignSwiperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSwiperElementEventMap>(type: K, listener: (this: HTMLLdesignSwiperElement, ev: LdesignSwiperCustomEvent<HTMLLdesignSwiperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSwiperElement: {
        prototype: HTMLLdesignSwiperElement;
        new (): HTMLLdesignSwiperElement;
    };
    /**
     * ldesign-swiper-slide
     * - Swiper 的子项容器，支持 active 状态用于样式控制
     */
    interface HTMLLdesignSwiperSlideElement extends Components.LdesignSwiperSlide, HTMLStencilElement {
    }
    var HTMLLdesignSwiperSlideElement: {
        prototype: HTMLLdesignSwiperSlideElement;
        new (): HTMLLdesignSwiperSlideElement;
    };
    interface HTMLLdesignSwitchElementEventMap {
        "ldesignChange": string | number | boolean;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface HTMLLdesignSwitchElement extends Components.LdesignSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSwitchElement: {
        prototype: HTMLLdesignSwitchElement;
        new (): HTMLLdesignSwitchElement;
    };
    interface HTMLLdesignTabPanelElementEventMap {
        "ldesignPanelLoad": void;
        "ldesignPanelDestroy": void;
    }
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface HTMLLdesignTabPanelElement extends Components.LdesignTabPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTabPanelElementEventMap>(type: K, listener: (this: HTMLLdesignTabPanelElement, ev: LdesignTabPanelCustomEvent<HTMLLdesignTabPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTabPanelElementEventMap>(type: K, listener: (this: HTMLLdesignTabPanelElement, ev: LdesignTabPanelCustomEvent<HTMLLdesignTabPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTabPanelElement: {
        prototype: HTMLLdesignTabPanelElement;
        new (): HTMLLdesignTabPanelElement;
    };
    interface HTMLLdesignTabsElementEventMap {
        "ldesignChange": string;
        "ldesignAdd": void;
        "ldesignRemove": { name: string };
        "ldesignReorder": { items: TabMeta[] };
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface HTMLLdesignTabsElement extends Components.LdesignTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTabsElementEventMap>(type: K, listener: (this: HTMLLdesignTabsElement, ev: LdesignTabsCustomEvent<HTMLLdesignTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTabsElementEventMap>(type: K, listener: (this: HTMLLdesignTabsElement, ev: LdesignTabsCustomEvent<HTMLLdesignTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTabsElement: {
        prototype: HTMLLdesignTabsElement;
        new (): HTMLLdesignTabsElement;
    };
    interface HTMLLdesignTagElementEventMap {
        "ldesignClose": MouseEvent;
        "ldesignChange": boolean;
    }
    /**
     * Tag 标签组件
     * 用于标记和分类
     */
    interface HTMLLdesignTagElement extends Components.LdesignTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTagElementEventMap>(type: K, listener: (this: HTMLLdesignTagElement, ev: LdesignTagCustomEvent<HTMLLdesignTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTagElementEventMap>(type: K, listener: (this: HTMLLdesignTagElement, ev: LdesignTagCustomEvent<HTMLLdesignTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTagElement: {
        prototype: HTMLLdesignTagElement;
        new (): HTMLLdesignTagElement;
    };
    interface HTMLLdesignTagGroupElementEventMap {
        "ldesignAdd": { label: string; id: string };
        "ldesignRemove": { tag: TagData; index: number };
        "ldesignChange": TagData[];
    }
    /**
     * TagGroup 标签组
     * - 支持拖拽排序
     * - 支持动态添加标签
     * - overflow="scroll" 提供横向滚动和可选箭头
     * - overflow="more" 根据 maxVisible 折叠为 +N
     */
    interface HTMLLdesignTagGroupElement extends Components.LdesignTagGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTagGroupElementEventMap>(type: K, listener: (this: HTMLLdesignTagGroupElement, ev: LdesignTagGroupCustomEvent<HTMLLdesignTagGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTagGroupElementEventMap>(type: K, listener: (this: HTMLLdesignTagGroupElement, ev: LdesignTagGroupCustomEvent<HTMLLdesignTagGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTagGroupElement: {
        prototype: HTMLLdesignTagGroupElement;
        new (): HTMLLdesignTagGroupElement;
    };
    interface HTMLLdesignTimePickerElementEventMap {
        "ldesignChange": string | undefined | { start: string; end: string };
        "ldesignVisibleChange": boolean;
        "ldesignOpen": void;
        "ldesignClose": void;
        "ldesignPick": { value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' | 'clear' | 'preset' | 'touch' | 'wheel' } };
    }
    interface HTMLLdesignTimePickerElement extends Components.LdesignTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTimePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerElement, ev: LdesignTimePickerCustomEvent<HTMLLdesignTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTimePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerElement, ev: LdesignTimePickerCustomEvent<HTMLLdesignTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTimePickerElement: {
        prototype: HTMLLdesignTimePickerElement;
        new (): HTMLLdesignTimePickerElement;
    };
    /**
     * Tooltip 工具提示组件
     * 基于最新 Popup 的轻量封装，继承所有新特性
     */
    interface HTMLLdesignTooltipElement extends Components.LdesignTooltip, HTMLStencilElement {
    }
    var HTMLLdesignTooltipElement: {
        prototype: HTMLLdesignTooltipElement;
        new (): HTMLLdesignTooltipElement;
    };
    interface HTMLLdesignTransferElementEventMap {
        "ldesignChange": { value: string[]; movedKeys: string[]; direction: 'left' | 'right' };
    }
    /**
     * Transfer 穿梭框
     * 支持左右两栏列表，通过按钮将条目在两侧移动。
     */
    interface HTMLLdesignTransferElement extends Components.LdesignTransfer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTransferElementEventMap>(type: K, listener: (this: HTMLLdesignTransferElement, ev: LdesignTransferCustomEvent<HTMLLdesignTransferElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTransferElementEventMap>(type: K, listener: (this: HTMLLdesignTransferElement, ev: LdesignTransferCustomEvent<HTMLLdesignTransferElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTransferElement: {
        prototype: HTMLLdesignTransferElement;
        new (): HTMLLdesignTransferElement;
    };
    interface HTMLLdesignTreeElementEventMap {
        "ldesignSelect": { key: string; keys: string[]; node?: TreeNode };
        "ldesignExpand": { key: string; expanded: boolean; expandedKeys: string[] };
        "ldesignCheck": { key: string; checked: boolean; checkedKeys: string[]; halfCheckedKeys: string[] };
        "ldesignDrop": { dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] };
        "ldesignMove": { dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] };
    }
    interface HTMLLdesignTreeElement extends Components.LdesignTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTreeElementEventMap>(type: K, listener: (this: HTMLLdesignTreeElement, ev: LdesignTreeCustomEvent<HTMLLdesignTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTreeElementEventMap>(type: K, listener: (this: HTMLLdesignTreeElement, ev: LdesignTreeCustomEvent<HTMLLdesignTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTreeElement: {
        prototype: HTMLLdesignTreeElement;
        new (): HTMLLdesignTreeElement;
    };
    interface HTMLElementTagNameMap {
        "base-component": HTMLBaseComponentElement;
        "l-dropdown-panel": HTMLLDropdownPanelElement;
        "ldesign-affix": HTMLLdesignAffixElement;
        "ldesign-alert": HTMLLdesignAlertElement;
        "ldesign-avatar": HTMLLdesignAvatarElement;
        "ldesign-avatar-group": HTMLLdesignAvatarGroupElement;
        "ldesign-backtop": HTMLLdesignBacktopElement;
        "ldesign-button": HTMLLdesignButtonElement;
        "ldesign-calendar": HTMLLdesignCalendarElement;
        "ldesign-cascader": HTMLLdesignCascaderElement;
        "ldesign-checkbox": HTMLLdesignCheckboxElement;
        "ldesign-checkbox-group": HTMLLdesignCheckboxGroupElement;
        "ldesign-circle-navigation": HTMLLdesignCircleNavigationElement;
        "ldesign-col": HTMLLdesignColElement;
        "ldesign-collapse": HTMLLdesignCollapseElement;
        "ldesign-collapse-panel": HTMLLdesignCollapsePanelElement;
        "ldesign-color-input": HTMLLdesignColorInputElement;
        "ldesign-color-picker": HTMLLdesignColorPickerElement;
        "ldesign-color-picker-panel": HTMLLdesignColorPickerPanelElement;
        "ldesign-countdown": HTMLLdesignCountdownElement;
        "ldesign-date-picker": HTMLLdesignDatePickerElement;
        "ldesign-draggable": HTMLLdesignDraggableElement;
        "ldesign-drawer": HTMLLdesignDrawerElement;
        "ldesign-dropdown": HTMLLdesignDropdownElement;
        "ldesign-ellipsis": HTMLLdesignEllipsisElement;
        "ldesign-grid": HTMLLdesignGridElement;
        "ldesign-grid-item": HTMLLdesignGridItemElement;
        "ldesign-icon": HTMLLdesignIconElement;
        "ldesign-image": HTMLLdesignImageElement;
        "ldesign-image-group": HTMLLdesignImageGroupElement;
        "ldesign-image-preview": HTMLLdesignImagePreviewElement;
        "ldesign-image-viewer": HTMLLdesignImageViewerElement;
        "ldesign-input": HTMLLdesignInputElement;
        "ldesign-input-number": HTMLLdesignInputNumberElement;
        "ldesign-loading": HTMLLdesignLoadingElement;
        "ldesign-mention": HTMLLdesignMentionElement;
        "ldesign-menu": HTMLLdesignMenuElement;
        "ldesign-message": HTMLLdesignMessageElement;
        "ldesign-modal": HTMLLdesignModalElement;
        "ldesign-notification": HTMLLdesignNotificationElement;
        "ldesign-pagination": HTMLLdesignPaginationElement;
        "ldesign-picker": HTMLLdesignPickerElement;
        "ldesign-popconfirm": HTMLLdesignPopconfirmElement;
        "ldesign-popup": HTMLLdesignPopupElement;
        "ldesign-progress": HTMLLdesignProgressElement;
        "ldesign-radio": HTMLLdesignRadioElement;
        "ldesign-radio-group": HTMLLdesignRadioGroupElement;
        "ldesign-rate": HTMLLdesignRateElement;
        "ldesign-resize-box": HTMLLdesignResizeBoxElement;
        "ldesign-ripple": HTMLLdesignRippleElement;
        "ldesign-row": HTMLLdesignRowElement;
        "ldesign-scrollbar": HTMLLdesignScrollbarElement;
        "ldesign-select": HTMLLdesignSelectElement;
        "ldesign-slider": HTMLLdesignSliderElement;
        "ldesign-space": HTMLLdesignSpaceElement;
        "ldesign-split": HTMLLdesignSplitElement;
        "ldesign-swiper": HTMLLdesignSwiperElement;
        "ldesign-swiper-slide": HTMLLdesignSwiperSlideElement;
        "ldesign-switch": HTMLLdesignSwitchElement;
        "ldesign-tab-panel": HTMLLdesignTabPanelElement;
        "ldesign-tabs": HTMLLdesignTabsElement;
        "ldesign-tag": HTMLLdesignTagElement;
        "ldesign-tag-group": HTMLLdesignTagGroupElement;
        "ldesign-time-picker": HTMLLdesignTimePickerElement;
        "ldesign-tooltip": HTMLLdesignTooltipElement;
        "ldesign-transfer": HTMLLdesignTransferElement;
        "ldesign-tree": HTMLLdesignTreeElement;
    }
}
declare namespace LocalJSX {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme"?: Theme;
    }
    interface LDropdownPanel {
        /**
          * 动画模式：'scale' 展开动画，'slide' 滑动动画
          * @default 'scale'
         */
        "animationMode"?: 'scale' | 'slide';
        /**
          * 动画持续时间（毫秒）
          * @default 300
         */
        "duration"?: number;
        /**
          * 遮罩层背景色
          * @default 'rgba(0, 0, 0, 0.3)'
         */
        "maskBackground"?: string;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 面板最大高度
          * @default '60vh'
         */
        "maxHeight"?: string;
        /**
          * 面板显示/隐藏时触发
         */
        "onVisibleChange"?: (event: LDropdownPanelCustomEvent<boolean>) => void;
        /**
          * 面板弹出位置，'top' 或 'bottom'，'auto' 自动判断
          * @default 'auto'
         */
        "placement"?: 'top' | 'bottom' | 'auto';
        /**
          * 面板与遮罩边缘的安全距离（像素）
          * @default 16
         */
        "safeDistance"?: number;
        /**
          * 面板是否可见
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset"?: number;
        /**
          * 吸附状态变化事件
         */
        "onLdesignAffixChange"?: (event: LdesignAffixCustomEvent<boolean>) => void;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget"?: boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Alert 警告信息
     * 用于在页面中展示重要的提示信息，支持多种状态、样式变体、尺寸、标题/描述、操作区与可关闭。
     */
    interface LdesignAlert {
        /**
          * 标题（避开标准 HTMLElement.title 冲突）
         */
        "alertTitle"?: string;
        /**
          * 是否启用动画效果
          * @default true
         */
        "animated"?: boolean;
        /**
          * 横幅样式（常用于页面顶部）
          * @default false
         */
        "banner"?: boolean;
        /**
          * 自定义边框宽度
          * @default 1
         */
        "borderWidth"?: number;
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable"?: boolean;
        /**
          * 自定义颜色（仅在 type 为 custom 时生效）
         */
        "color"?: string;
        /**
          * 是否为紧凑模式
          * @default false
         */
        "compact"?: boolean;
        /**
          * 描述（也可通过默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自定义图标名称
         */
        "iconName"?: string;
        /**
          * 启用滚动公告（Marquee）
          * @default false
         */
        "marquee"?: boolean;
        /**
          * 方向
          * @default 'left'
         */
        "marqueeDirection"?: 'left' | 'right';
        /**
          * 两段内容之间的间距（px）
          * @default 24
         */
        "marqueeGap"?: number;
        /**
          * 悬停时是否暂停
          * @default true
         */
        "marqueePauseOnHover"?: boolean;
        /**
          * 滚动速度（px/s）
          * @default 60
         */
        "marqueeSpeed"?: number;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignAlertCustomEvent<void>) => void;
        /**
          * 是否圆角
          * @default true
         */
        "rounded"?: boolean;
        /**
          * 是否带有阴影效果
          * @default false
         */
        "shadow"?: boolean;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: AlertSize;
        /**
          * 警告类型
          * @default 'info'
         */
        "type"?: AlertType;
        /**
          * 样式变体
          * @default 'light'
         */
        "variant"?: AlertVariant;
    }
    /**
     * Avatar 头像
     * - 三种展示形态：图片、图标、文字
     * - 三种尺寸：small / medium / large，或自定义像素
     * - 两种形状：circle / square
     * - 文本头像自动缩放，支持 gap 调节左右留白
     * - 支持徽标（红点或计数）
     * - 支持响应式尺寸（clamp）
     */
    interface LdesignAvatar {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * 是否根据宽度自动缩放文字
          * @default true
         */
        "autosize"?: boolean;
        /**
          * 背景色（图标与文字时有效；图片时作为容器背景）
         */
        "background"?: string;
        /**
          * 是否显示徽标红点
          * @default false
         */
        "badge"?: boolean;
        /**
          * 徽标颜色（红点/气泡背景色）
          * @default '#ff4d4f'
         */
        "badgeColor"?: string;
        /**
          * 徽标偏移量
          * @default [0, 0]
         */
        "badgeOffset"?: [number, number];
        /**
          * 徽标位置
          * @default 'top-right'
         */
        "badgePosition"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        /**
          * 徽标数字，设置后显示计数气泡，优先级高于 badge
         */
        "badgeValue"?: number | string;
        /**
          * 是否显示边框
          * @default false
         */
        "border"?: boolean;
        /**
          * 边框颜色
          * @default '#e8e8e8'
         */
        "borderColor"?: string;
        /**
          * 边框宽度
          * @default 2
         */
        "borderWidth"?: number;
        /**
          * 是否可点击（会添加悬浮效果）
          * @default false
         */
        "clickable"?: boolean;
        /**
          * 文本/图标颜色
         */
        "color"?: string;
        /**
          * 图片填充模式
          * @default 'cover'
         */
        "fit"?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * 文字与容器左右间距（px），仅文字头像生效
          * @default 4
         */
        "gap"?: number;
        /**
          * 图标名称（Lucide），无 src 时生效
         */
        "icon"?: string;
        /**
          * 是否显示加载态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 点击
         */
        "onLdesignClick"?: (event: LdesignAvatarCustomEvent<MouseEvent>) => void;
        /**
          * 加载失败
         */
        "onLdesignError"?: (event: LdesignAvatarCustomEvent<{ src?: string; error: string }>) => void;
        /**
          * 加载成功
         */
        "onLdesignLoad"?: (event: LdesignAvatarCustomEvent<{ width: number; height: number; src: string }>) => void;
        /**
          * 响应式尺寸（使用 CSS clamp 设置宽高）
          * @default false
         */
        "responsive"?: boolean;
        /**
          * clamp 最大像素（responsive 为 true 时生效）
          * @default 64
         */
        "responsiveMax"?: number;
        /**
          * clamp 中间项，接受任何 CSS 长度表达式，默认 10vw
          * @default '10vw'
         */
        "responsiveMid"?: string;
        /**
          * clamp 最小像素（responsive 为 true 时生效）
          * @default 28
         */
        "responsiveMin"?: number;
        /**
          * 形状：圆形或方形
          * @default 'circle'
         */
        "shape"?: 'circle' | 'square';
        /**
          * 尺寸：预设 small/middle/medium/large 或自定义像素
          * @default 'medium'
         */
        "size"?: 'small' | 'middle' | 'medium' | 'large' | number;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 图片地址
         */
        "src"?: string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 在线状态指示器
         */
        "status"?: 'online' | 'offline' | 'busy' | 'away';
        /**
          * 状态指示器颜色（覆盖默认）
         */
        "statusColor"?: string;
        /**
          * 文字内容（不传则使用默认插槽的文本节点）
         */
        "text"?: string;
    }
    /**
     * Avatar.Group 头像组合
     * - 支持溢出显示 +N
     * - 支持统一 size/shape
     * - 支持重叠间距（gap）
     */
    interface LdesignAvatarGroup {
        /**
          * 边框颜色（用于实现“描边”效果以区分重叠）
          * @default '#fff'
         */
        "borderColor"?: string;
        /**
          * 重叠间距（正值，单位px），默认 8
          * @default 8
         */
        "gap"?: number;
        /**
          * 展示的最大头像数；超出后折叠为 +N
         */
        "max"?: number;
        /**
          * 统一形状（未在子项显式指定时生效）
         */
        "shape"?: 'circle' | 'square';
        /**
          * 统一尺寸（未在子项显式指定时生效）
         */
        "size"?: 'small' | 'middle' | 'medium' | 'large' | number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed"?: number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight"?: number;
    }
    /**
     * Button 按钮组件
     * 基于 Ant Design 按钮组件架构重构
     * 提供多种类型、尺寸、状态的按钮
     */
    interface LdesignButton {
        /**
          * 是否自动插入空格（仅在子节点为两个中文字符时生效）
          * @default true
          * @since v5.17.0
         */
        "autoInsertSpace"?: boolean;
        /**
          * 是否为块级按钮
          * @default false
         */
        "block"?: boolean;
        /**
          * 按钮颜色 (v5.21.0+) 设置按钮的颜色
         */
        "color"?: ButtonColor;
        /**
          * 是否为危险按钮 (语法糖，当设置 color 时会以后者为准)
          * @default false
         */
        "danger"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否为幽灵按钮
          * @default false
         */
        "ghost"?: boolean;
        /**
          * 点击跳转的地址（将按钮作为 a 标签）
         */
        "href"?: string;
        /**
          * 原生按钮类型
          * @default 'button'
         */
        "htmlType"?: ButtonHTMLType;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置
          * @default 'start'
         */
        "iconPosition"?: ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 加载延迟时间（毫秒）
         */
        "loadingDelay"?: number;
        /**
          * 自定义加载图标
         */
        "loadingIcon"?: string;
        /**
          * 点击事件
         */
        "onLdesignClick"?: (event: LdesignButtonCustomEvent<MouseEvent>) => void;
        /**
          * 是否启用水波纹
          * @default true
         */
        "ripple"?: boolean;
        /**
          * 是否居中触发
          * @default false
         */
        "rippleCentered"?: boolean;
        /**
          * 波纹颜色（默认跟随 currentColor/主题）
         */
        "rippleColor"?: string;
        /**
          * 扩散动画时长
          * @default 550
         */
        "rippleDuration"?: number;
        /**
          * 缓动
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "rippleEasing"?: string;
        /**
          * 淡出时长
          * @default 260
         */
        "rippleFadeOutDuration"?: number;
        /**
          * 最大并发波纹数
          * @default 6
         */
        "rippleMaxRipples"?: number;
        /**
          * 波纹不透明度
          * @default 0.2
         */
        "rippleOpacity"?: number;
        /**
          * 触发方式
          * @default 'pointerdown'
         */
        "rippleTrigger"?: 'pointerdown' | 'mousedown' | 'click';
        /**
          * 是否不裁剪边界
          * @default false
         */
        "rippleUnbounded"?: boolean;
        /**
          * 按钮形状
          * @default 'default'
         */
        "shape"?: ButtonShape;
        /**
          * 按钮尺寸
          * @default 'middle'
         */
        "size"?: ButtonSize;
        /**
          * 相当于 a 链接的 target 属性
         */
        "target"?: string;
        /**
          * 按钮类型 (语法糖，推荐使用 variant 和 color)
          * @default 'default'
         */
        "type"?: ButtonType;
        /**
          * 按钮变体 (v5.21.0+) 设置按钮的样式变体
         */
        "variant"?: ButtonVariant;
    }
    interface LdesignCalendar {
        /**
          * @default true
         */
        "allowCrossWeek"?: boolean;
        /**
          * @default true
         */
        "allowMonthCrossWeek"?: boolean;
        "defaultValue"?: string;
        "disabledDate"?: (d: Date) => boolean;
        /**
          * @default false
         */
        "draggableEvents"?: boolean;
        /**
          * 是否启用内置的CRUD功能
          * @default true
         */
        "enableCrud"?: boolean;
        /**
          * 自定义新增处理器
         */
        "eventCreateHandler"?: (detail: any) => boolean | Promise<boolean>;
        /**
          * 自定义删除处理器
         */
        "eventDeleteHandler"?: (event: CalEvent) => boolean | Promise<boolean>;
        /**
          * 自定义编辑处理器
         */
        "eventEditHandler"?: (event: CalEvent) => boolean | Promise<boolean>;
        /**
          * 事件数据（JSON 字符串），例如：[{"date":"2025-09-27","title":"发布","color":"#1677ff"}]
         */
        "events"?: string;
        /**
          * 事件数据（JS 设置），与 events 二选一，前者用于 attribute，后者用于 property
         */
        "eventsData"?: Array<CalEvent>;
        /**
          * @default 1
         */
        "firstDayOfWeek"?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'YYYY-MM-DD'
         */
        "format"?: string;
        /**
          * @default 20
         */
        "hourEnd"?: number;
        /**
          * 时间轴起止与步长（周/日视图）
          * @default 8
         */
        "hourStart"?: number;
        /**
          * 自定义农历格式化（优先级高于内置），返回文本，例如 “初九” 或 “正月初一”
         */
        "lunarFormatter"?: (d: Date) => string;
        /**
          * @default 3
         */
        "maxAllDayRows"?: number;
        "maxDate"?: string;
        "maxDuration"?: number;
        /**
          * 单元格最多展示的事件条数
          * @default 3
         */
        "maxEventsPerCell"?: number;
        "minDate"?: string;
        /**
          * @default 15
         */
        "minDuration"?: number;
        "onLdesignChange"?: (event: LdesignCalendarCustomEvent<string>) => void;
        "onLdesignEventClick"?: (event: LdesignCalendarCustomEvent<{ event: any }>) => void;
        "onLdesignEventCreate"?: (event: LdesignCalendarCustomEvent<{ date?: string; start?: string; end?: string; allDay?: boolean; x?: number; y?: number }>) => void;
        "onLdesignEventDelete"?: (event: LdesignCalendarCustomEvent<{ event: any }>) => void;
        "onLdesignEventDrop"?: (event: LdesignCalendarCustomEvent<{ id?: string; title: string; oldStart?: string; oldEnd?: string; newStart: string; newEnd: string; allDay?: boolean }>) => void;
        "onLdesignEventEdit"?: (event: LdesignCalendarCustomEvent<{ event: any }>) => void;
        "onLdesignEventResize"?: (event: LdesignCalendarCustomEvent<{ id?: string; title: string; oldStart?: string; oldEnd?: string; newStart: string; newEnd: string }>) => void;
        /**
          * @default false
         */
        "resizableEvents"?: boolean;
        /**
          * @default true
         */
        "showAllDay"?: boolean;
        /**
          * 是否显示农历（默认关闭）。若浏览器支持 Intl Chinese Calendar，将自动使用内置格式化
          * @default false
         */
        "showLunar"?: boolean;
        /**
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * @default true
         */
        "snapToGrid"?: boolean;
        /**
          * @default 30
         */
        "stepMinutes"?: number;
        "value"?: string;
        /**
          * 视图：月/周/日/年
          * @default 'month'
         */
        "view"?: 'month' | 'week' | 'day' | 'year';
    }
    /**
     * ldesign-cascader
     * - PC: 多层级 popup (每层独立弹出)
     * - Mobile: drawer (auto by viewport width; can be forced by overlay prop)
     */
    interface LdesignCascader {
        "breakpoints"?: Breakpoints;
        /**
          * 点击非叶子是否直接触发变更（默认仅叶子触发）
          * @default false
         */
        "changeOnSelect"?: boolean;
        /**
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 选择后是否自动关闭（手动触发模式除外）
          * @default true
         */
        "closeOnSelect"?: boolean;
        "defaultValue"?: string[];
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 'bottom'
         */
        "drawerPlacement"?: 'left' | 'right' | 'top' | 'bottom';
        "drawerSize"?: number | string;
        /**
          * @default '请选择'
         */
        "drawerTitle"?: string;
        /**
          * 列表最大高度（列会滚动）
          * @default 280
         */
        "listMaxHeight"?: number;
        "onLdesignChange"?: (event: LdesignCascaderCustomEvent<{ value: string[] | undefined; options: CascaderOption[] }>) => void;
        "onLdesignVisibleChange"?: (event: LdesignCascaderCustomEvent<boolean>) => void;
        /**
          * @default []
         */
        "options"?: string | CascaderOption[];
        /**
          * @default 'auto'
         */
        "overlay"?: CascaderOverlay;
        /**
          * 面板宽度（popup 模式下可用）
         */
        "panelWidth"?: number | string;
        /**
          * @default '请选择'
         */
        "placeholder"?: string;
        /**
          * @default 'bottom-start' as Placement
         */
        "placement"?: Placement;
        /**
          * @default ' / '
         */
        "separator"?: string;
        /**
          * @default 'click'
         */
        "trigger"?: CascaderTrigger;
        "value"?: string[];
        /**
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxCustomEvent<boolean>) => void;
        /**
          * 形状
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxGroupCustomEvent<Array<string | number>>) => void;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value"?: Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CircleNavigation 圆形导航组件
     * 支持通过 width/height 控制圆的尺寸，默认正上方为第一个元素
     */
    interface LdesignCircleNavigation {
        /**
          * 是否顺时针排布
          * @default true
         */
        "clockwise"?: boolean;
        /**
          * 椭圆端点轴：auto 根据宽高选择；x 左右为端点；y 上下为端点
          * @default 'auto'
         */
        "ellipseAxis"?: 'auto' | 'x' | 'y';
        /**
          * 椭圆半弧内的间距策略：'arc' 按弧长均分，'angle' 按角度均分（更“均匀”的视觉效果）
          * @default 'angle'
         */
        "ellipseSpacing"?: 'arc' | 'angle';
        /**
          * 是否启用拖动旋转
          * @default true
         */
        "enableDrag"?: boolean;
        /**
          * 惯性摩擦系数（0-1，越小惯性越大）
          * @default 0.95
         */
        "friction"?: number;
        /**
          * 视角正前方的角度（度），默认 90° 即底部为“最近”
          * @default 90
         */
        "frontAngle"?: number;
        /**
          * 圆形容器高度（不传则等于 width）
         */
        "height"?: number | string;
        /**
          * @default 1.2
         */
        "maxScale"?: number;
        /**
          * 透视缩放范围：最小与最大缩放因子
          * @default 0.8
         */
        "minScale"?: number;
        /**
          * 最小旋转速度（度/帧，低于此速度停止旋转）
          * @default 0.1
         */
        "minVelocity"?: number;
        /**
          * 是否启用惯性/动量效果
          * @default true
         */
        "momentum"?: boolean;
        /**
          * 与圆边缘的内边距（px），用于避免项目贴边
          * @default 8
         */
        "padding"?: number;
        /**
          * 是否启用透视（近大远小）效果
          * @default false
         */
        "perspective"?: boolean;
        /**
          * 3D 透视距离（px，对应 CSS perspective），zDepth>0 时生效
          * @default 600
         */
        "perspectiveDistance"?: number;
        /**
          * 3D 透视原点（CSS perspective-origin），如 '50% 50%' 'center 80%'
         */
        "perspectiveOrigin"?: string;
        /**
          * 旋转灵敏度（度/像素）
          * @default 0.5
         */
        "rotateSensitivity"?: number;
        /**
          * 是否显示圆形轨道
          * @default true
         */
        "showTrack"?: boolean;
        /**
          * 吸附角度间隔（度）
          * @default 45
         */
        "snapAngle"?: number;
        /**
          * 是否启用吸附点
          * @default false
         */
        "snapPoints"?: boolean;
        /**
          * 吸附阈值（度，在此范围内会自动吸附）
          * @default 15
         */
        "snapThreshold"?: number;
        /**
          * 起始角度（度），默认 -90 表示第一个项在正上方；0 表示第一个项在最右侧
          * @default -90
         */
        "startAngle"?: number;
        /**
          * 是否启用触摸手势旋转
          * @default true
         */
        "touchRotate"?: boolean;
        /**
          * 圆形容器宽度（数字按 px 处理，亦可传入如 '20rem' / '240px' / '50%'）
          * @default 240
         */
        "width"?: number | string;
        /**
          * 3D 透视：Z 轴偏移幅度（px）。>0 则开启 translateZ；与 perspectiveDistance 联动
          * @default 0
         */
        "zDepth"?: number;
    }
    /**
     * Col 列
     * - 作为 ldesign-row 的子项，通过 span 指定跨列数
     * - 会观察父 Row 或祖先 Grid 的 cols 变化以自适应
     */
    interface LdesignCol {
        /**
          * 占用的列数
          * @default 1
         */
        "span"?: number;
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     * - 支持尺寸变体、主题、展开/收起全部、嵌套等高级功能
     */
    interface LdesignCollapse {
        /**
          * 手风琴模式：同层级仅允许展开一个
          * @default false
         */
        "accordion"?: boolean;
        /**
          * 动画持续时间（毫秒）
          * @default 200
         */
        "animationDuration"?: number;
        /**
          * 动画缓动函数
          * @default 'ease'
         */
        "animationEasing"?: string;
        /**
          * 边框样式
          * @default true
         */
        "bordered"?: boolean;
        /**
          * 卡片模式
          * @default false
         */
        "cardStyle"?: boolean;
        /**
          * 内容加载方式
          * @default 'sync'
         */
        "contentLoading"?: 'sync' | 'async' | 'lazy';
        /**
          * 默认展开的面板标识列表（非受控）
          * @default []
         */
        "defaultValue"?: string[];
        /**
          * 整体禁用（子面板不可交互）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 展开图标位置
          * @default 'left'
         */
        "expandIconPlacement"?: 'left' | 'right';
        /**
          * 幽灵（无背景，仅分隔线）
          * @default false
         */
        "ghost"?: boolean;
        /**
          * 是否高亮搜索结果
          * @default true
         */
        "highlightSearch"?: boolean;
        /**
          * 是否可通过键盘导航
          * @default true
         */
        "keyboardNavigation"?: boolean;
        /**
          * 异步加载函数
         */
        "loadContent"?: (name: string) => Promise<string>;
        /**
          * 折叠模式：普通、紧凑、分离、卡片
          * @default 'default'
         */
        "mode"?: 'default' | 'compact' | 'separated' | 'card';
        /**
          * 嵌套缩进（像素）
          * @default 20
         */
        "nestingIndent"?: number;
        /**
          * 面板收起前事件
         */
        "onLdesignBeforeCollapse"?: (event: LdesignCollapseCustomEvent<{ name: string; cancel: () => void }>) => void;
        /**
          * 面板展开前事件
         */
        "onLdesignBeforeExpand"?: (event: LdesignCollapseCustomEvent<{ name: string; cancel: () => void }>) => void;
        /**
          * 展开项变化
         */
        "onLdesignChange"?: (event: LdesignCollapseCustomEvent<string[]>) => void;
        /**
          * 收起全部事件
         */
        "onLdesignCollapseAll"?: (event: LdesignCollapseCustomEvent<void>) => void;
        /**
          * 展开全部事件
         */
        "onLdesignExpandAll"?: (event: LdesignCollapseCustomEvent<string[]>) => void;
        /**
          * 排序变化事件
         */
        "onLdesignSortChange"?: (event: LdesignCollapseCustomEvent<{ from: number; to: number; panelName: string }>) => void;
        /**
          * 单项切换事件
         */
        "onLdesignToggle"?: (event: LdesignCollapseCustomEvent<{ name: string; open: boolean; openKeys: string[] }>) => void;
        /**
          * 圆角样式
          * @default 'medium'
         */
        "rounded"?: 'none' | 'small' | 'medium' | 'large';
        /**
          * 搜索过滤关键词
          * @default ''
         */
        "searchKeyword"?: string;
        /**
          * 是否显示阴影
          * @default false
         */
        "shadow"?: boolean;
        /**
          * 是否显示展开图标
          * @default true
         */
        "showExpandIcon"?: boolean;
        /**
          * 尺寸变体
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 是否可拖拽排序
          * @default false
         */
        "sortable"?: boolean;
        /**
          * 主题颜色
          * @default 'default'
         */
        "theme"?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 展开的面板标识列表（受控） - 可以是数组或JSON字符串
         */
        "value"?: string[] | string;
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface LdesignCollapsePanel {
        /**
          * 激活状态（由父级控制）
          * @default false
         */
        "active"?: boolean;
        /**
          * 动画延迟
          * @default 0
         */
        "animationDelay"?: number;
        /**
          * 动画持续时间（毫秒）
          * @default 200
         */
        "animationDuration"?: number;
        /**
          * 动画缓动函数
          * @default 'ease'
         */
        "animationEasing"?: string;
        /**
          * 动画曲线预设
          * @default 'default'
         */
        "animationPreset"?: 'default' | 'spring' | 'bounce' | 'smooth' | 'sharp';
        /**
          * 自定义折叠图标
         */
        "collapsedIcon"?: string;
        /**
          * 内容动画类型
          * @default 'fade'
         */
        "contentAnimation"?: 'none' | 'fade' | 'slide' | 'scale' | 'slide-fade';
        /**
          * 内容淡入延迟
          * @default 100
         */
        "contentFadeDelay"?: number;
        /**
          * 内容内边距
         */
        "contentPadding"?: string;
        /**
          * 收起后是否销毁内容（优先级高于 lazy）
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * 禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 空状态文本
         */
        "emptyText"?: string;
        /**
          * 展开图标名称（默认 chevron-right）
          * @default 'chevron-right'
         */
        "expandIcon"?: string;
        /**
          * 图标位置（由父级传入，也可单独覆盖）
          * @default 'left'
         */
        "expandIconPlacement"?: 'left' | 'right';
        /**
          * 自定义展开图标
         */
        "expandedIcon"?: string;
        /**
          * 右侧附加区（可用 slot="extra" 覆盖）
         */
        "extra"?: string;
        /**
          * 头部文本（可用 slot="header" 覆盖）
         */
        "header"?: string;
        /**
          * 头部背景色
         */
        "headerBackground"?: string;
        /**
          * 图标旋转角度
          * @default 90
         */
        "iconRotation"?: number;
        /**
          * 首次激活才渲染内容（懒渲染）
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 面板唯一标识（由父级匹配）
         */
        "name"?: string;
        /**
          * 嵌套层级
          * @default 0
         */
        "nestingLevel"?: number;
        /**
          * 冒泡给父级，用于切换
         */
        "onLdesignCollapseItemToggle"?: (event: LdesignCollapsePanelCustomEvent<{ name: string }>) => void;
        "onLdesignPanelDragEnd"?: (event: LdesignCollapsePanelCustomEvent<{ event: DragEvent }>) => void;
        "onLdesignPanelDragLeave"?: (event: LdesignCollapsePanelCustomEvent<{ name: string; event: DragEvent }>) => void;
        "onLdesignPanelDragOver"?: (event: LdesignCollapsePanelCustomEvent<{ name: string; event: DragEvent }>) => void;
        /**
          * 拖拽事件
         */
        "onLdesignPanelDragStart"?: (event: LdesignCollapsePanelCustomEvent<{ name: string; event: DragEvent }>) => void;
        "onLdesignPanelDrop"?: (event: LdesignCollapsePanelCustomEvent<{ name: string; event: DragEvent }>) => void;
        /**
          * 是否反向旋转图标
          * @default false
         */
        "reverseIconRotation"?: boolean;
        /**
          * 是否显示分隔线
          * @default true
         */
        "showDivider"?: boolean;
        /**
          * 是否显示展开图标
          * @default true
         */
        "showExpandIcon"?: boolean;
        /**
          * 尺寸变体
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 是否可排序（由父级传入）
          * @default false
         */
        "sortable"?: boolean;
        /**
          * 主题颜色
          * @default 'default'
         */
        "theme"?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface LdesignColorInput {
        /**
          * 是否可清空
          * @default true
         */
        "clearable"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 显示/输出格式
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect"?: boolean;
        /**
          * 确认变更
         */
        "onLdesignChange"?: (event: LdesignColorInputCustomEvent<string>) => void;
        /**
          * 实时更新
         */
        "onLdesignInput"?: (event: LdesignColorInputCustomEvent<string>) => void;
        /**
          * 输入占位符
          * @default ''
         */
        "placeholder"?: string;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement"?: 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 预设颜色
          * @default []
         */
        "presets"?: string[];
        /**
          * 最近颜色最大条数
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * 是否显示最近使用
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 当前颜色字符串（与 ColorPicker 格式一致）
          * @default '#1677ff'
         */
        "value"?: string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface LdesignColorPicker {
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 自定义按钮文案
          * @default '确定'
         */
        "confirmText"?: string;
        /**
          * 使用具名插槽自定义触发器（slot="trigger"）；为 true 时不渲染默认触发器
          * @default false
         */
        "customTrigger"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：'linear' | 'radial' | 'both'（传递给面板）
          * @default 'both'
         */
        "gradientTypes"?: 'linear' | 'radial' | 'both';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect"?: boolean;
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 1（透传给面板）
          * @default 1
         */
        "minStopGap"?: number;
        /**
          * 面板模式：'solid' | 'gradient' | 'both'
          * @default 'both'
         */
        "modes"?: 'solid' | 'gradient' | 'both';
        "onLdesignChange"?: (event: LdesignColorPickerCustomEvent<string>) => void;
        "onLdesignInput"?: (event: LdesignColorPickerCustomEvent<string>) => void;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement"?: 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 设置弹层宽度（数字或 CSS 长度），panel 将铺满此宽度
         */
        "popupWidth"?: number | string;
        /**
          * @default []
         */
        "presets"?: string[];
        /**
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示“确定/取消”操作区（默认 false）
          * @default false
         */
        "showActions"?: boolean;
        /**
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 透传面板 UI 模式
          * @default 'pro'
         */
        "ui"?: 'simple' | 'pro';
        /**
          * @default '#1677ff'
         */
        "value"?: string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface LdesignColorPickerPanel {
        /**
          * 是否禁用（禁用交互）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 默认显示格式
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：线性/径向/两者（仅在 activeMode=gradient 时生效）
          * @default 'both'
         */
        "gradientTypes"?: 'linear' | 'radial' | 'both';
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 1
          * @default 1
         */
        "minStopGap"?: number;
        /**
          * 面板模式：单色 | 渐变 | 两者
          * @default 'both'
         */
        "modes"?: 'solid' | 'gradient' | 'both';
        "onLdesignChange"?: (event: LdesignColorPickerPanelCustomEvent<string>) => void;
        "onLdesignInput"?: (event: LdesignColorPickerPanelCustomEvent<string>) => void;
        /**
          * 预设颜色
          * @default [     '#ff4d4f', '#ff7a45', '#ffa940', '#ffc53d', '#ffec3d', '#bae637', '#73d13d', '#36cfc9', '#40a9ff', '#597ef7', '#9254de', '#f759ab',     '#d4380d', '#d46b08', '#d48806', '#ad8b00', '#5b8c00', '#08979c', '#096dd9', '#1d39c4', '#531dab', '#c41d7f', '#8c8c8c', '#595959',   ]
         */
        "presets"?: string[];
        /**
          * 最近使用最多条数
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * 是否在渐变面板中显示“线性/径向”切换按钮（默认不显示）
          * @default false
         */
        "showGradientTypeTabs"?: boolean;
        /**
          * 是否显示最近使用（无数据时自动隐藏）
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * 在渐变-径向模式下，于右侧显示径向面板（中心拖拽与参数）
          * @default false
         */
        "showRadialSidebar"?: boolean;
        /**
          * 尺寸（影响整体间距）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * UI 模式：simple 为精简界面，仅保留必要控件；pro 为完整界面
          * @default 'pro'
         */
        "ui"?: 'simple' | 'pro';
        /**
          * 当前颜色（默认 hex），支持 #RRGGBB/#RRGGBBAA、rgb/rgba、hsl/hsla、hsv
          * @default '#3498db'
         */
        "value"?: string;
    }
    /**
     * Countdown 倒计时组件
     * 支持按结束时间或时长倒计时，提供格式化显示、事件与方法控制
     */
    interface LdesignCountdown {
        /**
          * 是否在初始化时自动开始
          * @default true
         */
        "autoStart"?: boolean;
        /**
          * 环形进度的像素尺寸（正方形）
         */
        "circleSize"?: number;
        /**
          * 环形进度的描边宽度
          * @default 4
         */
        "circleStroke"?: number;
        /**
          * 绝对结束时间（优先级高于 value），支持时间戳、日期字符串或 Date 对象
         */
        "endTime"?: number | string | Date;
        /**
          * 显示格式，支持 DD、HH、mm、ss、SSS 令牌组合
          * @default 'HH:mm:ss'
         */
        "format"?: string;
        /**
          * 可选标题文本（展示在数值前）。属性名仍使用 title，避免与 HTMLElement.prototype.title 冲突
         */
        "label"?: string;
        /**
          * 是否以更高频率更新毫秒（约 50ms 一次）。为 false 时每秒更新一次
          * @default false
         */
        "millisecond"?: boolean;
        /**
          * 变化事件：倒计时数值变化时触发
         */
        "onLdesignChange"?: (event: LdesignCountdownCustomEvent<{ remaining: number; formatted: string }>) => void;
        /**
          * 完成事件：倒计时结束时触发
         */
        "onLdesignFinish"?: (event: LdesignCountdownCustomEvent<void>) => void;
        /**
          * 是否暂停（受控）
          * @default false
         */
        "paused"?: boolean;
        /**
          * 进度展示采用已消耗还是剩余（用于 progress-* 样式）
          * @default 'elapsed'
         */
        "progressAs"?: 'elapsed' | 'remaining';
        /**
          * 是否在分段/翻牌样式中显示单位（天/时/分/秒/毫秒）
          * @default false
         */
        "showUnit"?: boolean;
        /**
          * 尺寸（对齐其他组件的 size 体系）
          * @default 'middle'
         */
        "size"?: Size;
        /**
          * 倒计时时长（毫秒）。当未提供 endTime 时，以当前时间为起点倒计时 value 毫秒
         */
        "value"?: number;
        /**
          * 展现形式：文本、分段、翻牌、进度条、环形进度
          * @default 'text'
         */
        "variant"?: 'text' | 'segment' | 'flip' | 'progress-line' | 'progress-circle';
    }
    interface LdesignDatePicker {
        /**
          * @default true
         */
        "clearable"?: boolean;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "disabledDate"?: (d: Date) => boolean;
        /**
          * @default 1
         */
        "firstDayOfWeek"?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'YYYY-MM-DD'
         */
        "format"?: string;
        "maxDate"?: string;
        "minDate"?: string;
        /**
          * @default 'date'
         */
        "mode"?: 'date' | 'week' | 'month' | 'quarter' | 'year';
        "onLdesignChange"?: (event: LdesignDatePickerCustomEvent<any>) => void;
        "onLdesignVisibleChange"?: (event: LdesignDatePickerCustomEvent<boolean>) => void;
        /**
          * @default '请选择日期'
         */
        "placeholder"?: string;
        /**
          * @default false
         */
        "showWeekNumbers"?: boolean;
        "value"?: string;
    }
    /**
     * ldesign-draggable
     * 通用可拖拽/缩放/旋转容器（图片优先），支持：
     * - PC：滚轮缩放、拖拽平移、双击 1x/2x 切换
     * - 移动端：双指缩放+旋转、单指平移、松手回弹、动量滚动
     * 用法：
     * 1) 直接传入 src 渲染图片
     *    <ldesign-draggable src="/big.jpg" style="width:100%;height:100%" />
     * 2) 插槽自定义内容（若无 src）：
     *    <ldesign-draggable style="width:100%;height:100%">
     *      <img src="/big.jpg" />
     *    </ldesign-draggable>
     */
    interface LdesignDraggable {
        /**
          * 是否允许双击/双指双击缩放
          * @default true
         */
        "allowDoubleTap"?: boolean;
        "alt"?: string;
        /**
          * 边界弹性系数
          * @default 0.15
         */
        "boundsElasticity"?: number;
        /**
          * @default 'top-right'
         */
        "controlsPosition"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        /**
          * 是否禁用右键菜单（避免干扰拖拽）
          * @default true
         */
        "disableContextMenu"?: boolean;
        /**
          * 双击切换到的缩放倍数
          * @default 2
         */
        "doubleTapZoom"?: number;
        /**
          * 是否启用网格吸附
          * @default false
         */
        "enableGrid"?: boolean;
        /**
          * 是否启用撤销/重做
          * @default false
         */
        "enableHistory"?: boolean;
        /**
          * 是否启用动量滚动
          * @default true
         */
        "enableMomentum"?: boolean;
        /**
          * 是否允许旋转（移动端双指）
          * @default true
         */
        "enableRotate"?: boolean;
        /**
          * 网格大小（像素）
          * @default 20
         */
        "gridSize"?: number;
        /**
          * @default 0
         */
        "initialOffsetX"?: number;
        /**
          * @default 0
         */
        "initialOffsetY"?: number;
        /**
          * @default 0
         */
        "initialRotate"?: number;
        /**
          * 初始状态
          * @default 1
         */
        "initialScale"?: number;
        /**
          * 按住 Shift 时的平移步长倍率
          * @default 3
         */
        "keyPanFastMultiplier"?: number;
        /**
          * 方向键平移基础步长（像素）
          * @default 40
         */
        "keyPanStep"?: number;
        /**
          * 是否启用键盘交互（方向键平移、+/- 缩放、R 旋转、0 重置）
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 历史记录最大数量
          * @default 20
         */
        "maxHistory"?: number;
        /**
          * @default 4
         */
        "maxScale"?: number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale"?: number;
        /**
          * 缩略图导航位置
          * @default 'bottom-right'
         */
        "minimapPosition"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
        "onLdesignGestureEnd"?: (event: LdesignDraggableCustomEvent<void>) => void;
        "onLdesignGestureStart"?: (event: LdesignDraggableCustomEvent<void>) => void;
        "onLdesignHistoryChange"?: (event: LdesignDraggableCustomEvent<{ canUndo: boolean; canRedo: boolean }>) => void;
        "onLdesignTransformChange"?: (event: LdesignDraggableCustomEvent<{ scale: number; rotate: number; offsetX: number; offsetY: number }>) => void;
        /**
          * 预设视角
         */
        "presetViews"?: Array<{ name: string; scale: number; rotate: number; offsetX: number; offsetY: number }>;
        /**
          * 旋转吸附角度（度）。大于 0 时在捏合旋转接近该步进的倍数会吸附
          * @default 0
         */
        "rotateSnapDeg"?: number;
        /**
          * 旋转吸附阈值（度），仅当与最近倍数的差值不超过该阈值时生效
          * @default 3
         */
        "rotateSnapEpsilon"?: number;
        /**
          * @default false
         */
        "showControls"?: boolean;
        /**
          * 是否显示缩放/旋转指示器
          * @default false
         */
        "showIndicators"?: boolean;
        /**
          * 是否启用缩略图导航
          * @default false
         */
        "showMinimap"?: boolean;
        /**
          * 是否显示性能监控
          * @default false
         */
        "showPerformance"?: boolean;
        /**
          * 是否启用平滑边界
          * @default true
         */
        "smoothBounds"?: boolean;
        /**
          * 若提供则内部渲染 img；否则使用默认插槽
         */
        "src"?: string;
        /**
          * 允许使用滚轮进行平移（当未触发缩放时）
          * @default true
         */
        "wheelPan"?: boolean;
        /**
          * PC 滚轮缩放
          * @default true
         */
        "wheelZoom"?: boolean;
        /**
          * 是否需要按住 Ctrl/⌘ 才进行滚轮缩放；否则滚轮优先缩放
          * @default false
         */
        "wheelZoomRequiresCtrl"?: boolean;
        /**
          * 缩放步进（滚轮/按钮）
          * @default 0.1
         */
        "zoomStep"?: number;
    }
    interface LdesignDrawer {
        /**
          * 是否启用动画
          * @default true
         */
        "animation"?: boolean;
        /**
          * 动画持续时间（毫秒）
          * @default 300
         */
        "animationDuration"?: number;
        /**
          * 动画缓动函数
          * @default 'ease-in-out'
         */
        "animationEasing"?: string;
        /**
          * 动画类型
          * @default 'slide'
         */
        "animationType"?: string;
        /**
          * ARIA 标签
         */
        "ariaLabelText"?: string;
        /**
          * 自动聚焦
          * @default true
         */
        "autoFocus"?: boolean;
        /**
          * 圆角大小
          * @default '8px'
         */
        "borderRadius"?: string;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 按 ESC 关闭
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * 容器选择器或元素
         */
        "container"?: string | HTMLElement;
        /**
          * 性能优化：使用 CSS contain
          * @default true
         */
        "cssContain"?: boolean;
        /**
          * 自定义类名
          * @default ''
         */
        "customClass"?: string;
        /**
          * 关闭时销毁
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * 标题
         */
        "drawerTitle"?: string;
        /**
          * 焦点捕获
          * @default true
         */
        "focusTrap"?: boolean;
        /**
          * 底部按钮对齐方式
          * @default 'right'
         */
        "footerAlign"?: 'left' | 'center' | 'right' | 'space-between';
        /**
          * 是否显示底部边框
          * @default true
         */
        "footerBorder"?: boolean;
        /**
          * 底部按钮配置
          * @default []
         */
        "footerButtons"?: DrawerButton[];
        /**
          * 是否全屏
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * 是否可全屏切换
          * @default false
         */
        "fullscreenable"?: boolean;
        /**
          * 性能优化：GPU 加速
          * @default true
         */
        "gpuAcceleration"?: boolean;
        /**
          * 是否显示头部边框
          * @default true
         */
        "headerBorder"?: boolean;
        /**
          * 头部是否吸顶
          * @default false
         */
        "headerSticky"?: boolean;
        /**
          * 标题图标
         */
        "icon"?: string;
        /**
          * 性能优化：懒加载内容
          * @default false
         */
        "lazyLoad"?: boolean;
        /**
          * 抽屉层级
          * @default 'normal'
         */
        "level"?: DrawerLevel;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 加载文本
          * @default '加载中...'
         */
        "loadingText"?: string;
        /**
          * 是否锁定页面滚动
          * @default true
         */
        "lockScroll"?: boolean;
        /**
          * 是否显示遮罩
          * @default true
         */
        "mask"?: boolean;
        /**
          * 遮罩样式类名
          * @default ''
         */
        "maskClass"?: string;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 最大尺寸
          * @default '90%'
         */
        "maxSize"?: number | string;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable"?: boolean;
        /**
          * 最小尺寸
          * @default 200
         */
        "minSize"?: number | string;
        /**
          * 是否可最小化
          * @default false
         */
        "minimizable"?: boolean;
        /**
          * 关闭前触发
         */
        "onDrawerBeforeClose"?: (event: LdesignDrawerCustomEvent<{ reason: CloseReason }>) => void;
        /**
          * 打开前触发
         */
        "onDrawerBeforeOpen"?: (event: LdesignDrawerCustomEvent<void>) => void;
        /**
          * 关闭后触发
         */
        "onDrawerClose"?: (event: LdesignDrawerCustomEvent<{ reason: CloseReason }>) => void;
        /**
          * 打开后触发
         */
        "onDrawerOpen"?: (event: LdesignDrawerCustomEvent<void>) => void;
        /**
          * 大小变化
         */
        "onDrawerResize"?: (event: LdesignDrawerCustomEvent<{ drawerWidth: number; drawerHeight: number }>) => void;
        /**
          * 状态变化
         */
        "onDrawerStateChange"?: (event: LdesignDrawerCustomEvent<{ state: DrawerState }>) => void;
        /**
          * 滑动进度变化
         */
        "onDrawerSwipe"?: (event: LdesignDrawerCustomEvent<{ progress: number }>) => void;
        /**
          * 内容内边距
          * @default true
         */
        "padding"?: string | boolean;
        /**
          * 抽屉位置
          * @default 'right'
         */
        "placement"?: DrawerPlacement;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable"?: boolean;
        /**
          * 恢复焦点
          * @default true
         */
        "restoreFocus"?: boolean;
        /**
          * 是否启用圆角
          * @default true
         */
        "rounded"?: boolean;
        /**
          * 是否显示返回按钮
          * @default false
         */
        "showBack"?: boolean;
        /**
          * 是否显示尺寸提示
          * @default true
         */
        "showSizeHint"?: boolean;
        /**
          * 抽屉大小
          * @default 'md'
         */
        "size"?: number | string | SizePreset;
        /**
          * 吸附点
          * @default []
         */
        "snapPoints"?: SnapPoint[];
        /**
          * 吸附阈值
          * @default 30
         */
        "snapThreshold"?: number;
        /**
          * 副标题
         */
        "subtitle"?: string;
        /**
          * 滑动阈值（0-1）
          * @default 0.3
         */
        "swipeThreshold"?: number;
        /**
          * 是否启用滑动关闭
          * @default false
         */
        "swipeToClose"?: boolean;
        /**
          * 滑动触发区域
          * @default 'edge'
         */
        "swipeTriggerArea"?: 'anywhere' | 'handle' | 'header' | 'edge';
        /**
          * 主题
          * @default 'light'
         */
        "theme"?: DrawerTheme;
        /**
          * 性能优化：使用 transform
          * @default true
         */
        "useTransform"?: boolean;
        /**
          * 性能优化：使用虚拟滚动
          * @default false
         */
        "virtualScroll"?: boolean;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible"?: boolean;
        /**
          * z-index 层级
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Dropdown 下拉菜单（PC 级联 + 移动端单列）
     * 兼容鼠标和触屏，默认根据指针类型自适应（variant=auto）。
     */
    interface LdesignDropdown {
        /**
          * 移动端选中态颜色（文本与对勾）
          * @default '#F53F3F'
         */
        "activeColor"?: string;
        /**
          * 浮层挂载位置：默认 body，避免在文档容器中被裁剪
          * @default 'body'
         */
        "appendTo"?: 'self' | 'body' | 'closest-popup';
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow"?: boolean;
        /**
          * 点击选项后是否自动关闭
          * @default true
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 菜单宽度是否跟随触发器宽度（默认否）
          * @default false
         */
        "fitTriggerWidth"?: boolean;
        /**
          * 下拉节点（数组或 JSON 字符串）
          * @default []
         */
        "items"?: string | DropdownNode[];
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight"?: number;
        /**
          * 选中变化事件
         */
        "onLdesignChange"?: (event: LdesignDropdownCustomEvent<{ key: string; item: DropdownItem }>) => void;
        /**
          * 对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignDropdownCustomEvent<boolean>) => void;
        /**
          * 触发器文本（默认触发器显示的固定文案，不随选择变化）
          * @default '请选择'
         */
        "placeholder"?: string;
        /**
          * 出现位置
          * @default 'bottom-start'
         */
        "placement"?: DropdownPlacement;
        /**
          * 是否将选中项同步到默认触发器文本（默认不同步）
          * @default false
         */
        "reflectSelectionOnTrigger"?: boolean;
        /**
          * 是否在菜单项上展示选中样式（PC，默认不展示）
          * @default false
         */
        "showSelected"?: boolean;
        /**
          * 子菜单的触发方式（hover/click），默认 hover，仅 PC 生效
          * @default 'hover'
         */
        "submenuTrigger"?: 'hover' | 'click';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（PC）
          * @default 'click'
         */
        "trigger"?: DropdownTrigger;
        /**
          * 选中值（受控）
         */
        "value"?: string;
        /**
          * 自适应：'auto' | 'pc' | 'mobile'
          * @default 'auto'
         */
        "variant"?: DropdownVariant;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible"?: boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * ldesign-ellipsis 文本省略/展开组件
     * - 折叠时按指定行数展示，右下角显示"更多"按钮
     * - 展开后：若最后一行还有空间，则"收起"出现在最后一行最右侧；否则换到下一行右侧
     * - 兼容 PC 与移动端，按钮有较大点击热区
     */
    interface LdesignEllipsis {
        /**
          * 自定义按钮 class 和 style
         */
        "actionClass"?: string;
        /**
          * 行为控制：auto（默认）| inline（强制同行右置）| newline（强制换行右对齐）
          * @default 'auto'
         */
        "actionPlacement"?: 'auto' | 'inline' | 'newline';
        "actionStyle"?: any;
        /**
          * 自动折叠延迟（毫秒，0为不自动折叠）
          * @default 0
         */
        "autoCollapseDelay"?: number;
        "collapseIcon"?: string;
        /**
          * 展开态允许 ESC 收起
          * @default false
         */
        "collapseOnEscape"?: boolean;
        /**
          * 收起按钮文案（展开态）
          * @default '收起'
         */
        "collapseText"?: string;
        /**
          * 要展示的文本内容（纯文本）
         */
        "content"?: string;
        /**
          * 是否默认展开
          * @default false
         */
        "defaultExpanded"?: boolean;
        /**
          * 双击文本切换展开/收起
          * @default false
         */
        "doubleClickToggle"?: boolean;
        /**
          * 按钮悬浮效果增强
          * @default true
         */
        "enhancedHover"?: boolean;
        /**
          * 按钮图标（可选）
         */
        "expandIcon"?: string;
        /**
          * 展开按钮文案（折叠态）
          * @default '更多'
         */
        "expandText"?: string;
        /**
          * 当前是否展开（受控模式，可选）
         */
        "expanded"?: boolean;
        /**
          * 渐变遮罩颜色（可自定义多个颜色点）
         */
        "fadeColors"?: string;
        /**
          * 渐变遮罩宽度（如 40% 或 120）
          * @default '40%'
         */
        "fadeWidth"?: number | string;
        /**
          * 同行放置时，文本与"收起"的间距（像素）
          * @default 8
         */
        "inlineGap"?: number;
        /**
          * 折叠时显示的行数
          * @default 3
         */
        "lines"?: number;
        /**
          * 响应式行数，根据屏宽选择不同行数
         */
        "linesMap"?: { sm?: number; md?: number; lg?: number; xl?: number };
        /**
          * 展开/折叠状态变化回调（自定义事件：ldesignToggle）
         */
        "onLdesignTruncateChange"?: (event: LdesignEllipsisCustomEvent<{ overflowed: boolean }>) => void;
        /**
          * 收起时滚动到组件顶部
          * @default false
         */
        "scrollIntoViewOnCollapse"?: boolean;
        /**
          * 展开时滚动到组件顶部
          * @default false
         */
        "scrollIntoViewOnExpand"?: boolean;
        /**
          * 折叠态是否显示渐变遮罩
          * @default true
         */
        "showFade"?: boolean;
        /**
          * Tooltip 最大宽度
          * @default 320
         */
        "tooltipMaxWidth"?: number;
        /**
          * 折叠且溢出时，悬浮显示全文
          * @default false
         */
        "tooltipOnCollapsed"?: boolean;
        /**
          * Tooltip 位置
          * @default 'top'
         */
        "tooltipPlacement"?: string;
        /**
          * 展开/收起高度变化动画时长（ms）
          * @default 200
         */
        "transitionDuration"?: number;
    }
    /**
     * Grid 容器（grid -> grid-item 用法）
     * - 在内部通过计算为每个 grid-item 设置明确的行/列位置与跨度
     * - 支持设置每行列数与横纵间距
     */
    interface LdesignGrid {
        /**
          * 固定列数（可选）。若不设置，则根据 minColWidth 自动计算最佳列数
         */
        "cols"?: number;
        /**
          * 折叠时默认显示的行数；0 或未设置表示显示全部
         */
        "defaultRows"?: number;
        /**
          * 是否使用密集填充（尽量填补空位）；显式定位下仅作类名标识
          * @default false
         */
        "dense"?: boolean;
        /**
          * 同时设置横纵间距（数字按 px）
         */
        "gap"?: number | string;
        /**
          * 每列的最小宽度，用于自适应计算列数；数字为 px；默认 240
          * @default 240
         */
        "minColWidth"?: number | string;
        /**
          * 展开按钮所在列宽（span）
          * @default 8
         */
        "toggleSpan"?: number;
        /**
          * 横向列间距
         */
        "xGap"?: number | string;
        /**
          * 纵向行间距
         */
        "yGap"?: number | string;
    }
    /**
     * Grid 子项
     * - 通过 span 指定跨越列数
     * - 根据父容器的 cols 自动限制最大跨度
     */
    interface LdesignGridItem {
        /**
          * 占用的列数
          * @default 1
         */
        "span"?: number;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 动画类型
          * @default 'none'
         */
        "animation"?: 'spin' | 'pulse' | 'bounce' | 'flash' | 'shake' | 'none';
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 自定义SVG内容
         */
        "customSvg"?: string;
        /**
          * 是否为装饰性图标（无语义）
          * @default false
         */
        "decorative"?: boolean;
        /**
          * 翻转方向
         */
        "flip"?: 'horizontal' | 'vertical' | 'both';
        /**
          * 是否使用渐变色
          * @default false
         */
        "gradient"?: boolean;
        /**
          * 渐变色数组
         */
        "gradientColors"?: string | string[];
        /**
          * 渐变方向
          * @default 'horizontal'
         */
        "gradientDirection"?: 'horizontal' | 'vertical' | 'diagonal';
        /**
          * 无障碍标签
         */
        "label"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 旋转角度
         */
        "rotate"?: number;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size"?: Size | number;
        /**
          * 是否旋转（兼容旧版）
          * @default false
         */
        "spin"?: boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth"?: number;
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface LdesignImage {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * BlurHash 占位符
         */
        "blurhash"?: string;
        /**
          * 启用图片对比模式
          * @default false
         */
        "comparison"?: boolean;
        /**
          * 对比图片源
         */
        "comparisonSrc"?: string;
        /**
          * crossorigin
         */
        "crossorigin"?: 'anonymous' | 'use-credentials';
        /**
          * HTMLImageElement.decoding
          * @default 'auto'
         */
        "decoding"?: 'async' | 'sync' | 'auto';
        /**
          * 是否禁用（影响交互，如预览）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 预览工具栏显示下载按钮
          * @default true
         */
        "downloadable"?: boolean;
        /**
          * 失败时的回退图片 URL
         */
        "fallback"?: string;
        /**
          * 图片加载优先级
          * @default 'auto'
         */
        "fetchpriority"?: 'high' | 'low' | 'auto';
        /**
          * 图片滤镜效果
          * @default 'none'
         */
        "filter"?: 'grayscale' | 'sepia' | 'blur' | 'brightness' | 'contrast' | 'none';
        /**
          * object-fit
          * @default 'cover'
         */
        "fit"?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * 预览工具栏显示全屏按钮
          * @default true
         */
        "fullscreenable"?: boolean;
        /**
          * GIF 默认静止，点击播放。建议同时提供 gifPreviewSrc（第一帧快照）与 ratio 避免CLS
          * @default false
         */
        "gifPlayOnClick"?: boolean;
        /**
          * GIF 静止时展示的静态预览图（例如第一帧 webp/jpg）
         */
        "gifPreviewSrc"?: string;
        /**
          * 高度（number 自动补 px，string 原样输出，如 '50%'、'200px'）
         */
        "height"?: number | string;
        /**
          * 是否允许拖拽原图（仅影响 img 的原生 draggable 属性，预览层可拖拽不受此限制）
          * @default false
         */
        "imgDraggable"?: boolean;
        /**
          * 提示文本（用于 img 的 title 属性，为避免与 HTMLElement.title 冲突，这里命名为 imgTitle）
         */
        "imgTitle"?: string;
        /**
          * IntersectionObserver rootMargin（预加载阈值）
          * @default '200px'
         */
        "intersectionRootMargin"?: string;
        /**
          * 是否懒加载（首屏建议关闭）
          * @default true
         */
        "lazy"?: boolean;
        /**
          * 最大重试次数
          * @default 3
         */
        "maxRetries"?: number;
        /**
          * 图片下载
         */
        "onLdesignDownload"?: (event: LdesignImageCustomEvent<{ src: string; filename: string }>) => void;
        /**
          * 加载失败
         */
        "onLdesignError"?: (event: LdesignImageCustomEvent<{ src: string; error: string }>) => void;
        /**
          * 加载成功
         */
        "onLdesignLoad"?: (event: LdesignImageCustomEvent<{ width: number; height: number; src: string; size?: number }>) => void;
        /**
          * 预览关闭
         */
        "onLdesignPreviewClose"?: (event: LdesignImageCustomEvent<void>) => void;
        /**
          * 预览打开
         */
        "onLdesignPreviewOpen"?: (event: LdesignImageCustomEvent<void>) => void;
        /**
          * 自定义占位图 URL（优先级高于骨架）
         */
        "placeholder"?: string;
        /**
          * 占位背景颜色（无自定义占位图时显示）
          * @default '#f5f5f5'
         */
        "placeholderColor"?: string;
        /**
          * object-position
          * @default 'center center'
         */
        "position"?: string;
        /**
          * 点击开启预览
          * @default false
         */
        "preview"?: boolean;
        /**
          * 预览遮罩主题
          * @default 'dark'
         */
        "previewBackdrop"?: 'dark' | 'light';
        /**
          * 当前图片在预览组中的索引
          * @default 0
         */
        "previewCurrentIndex"?: number;
        /**
          * 预览图片组（用于gallery模式）
          * @default []
         */
        "previewImages"?: string[];
        /**
          * 预览使用的高清图（不填则使用 src）
         */
        "previewSrc"?: string;
        /**
          * 圆角（number 自动补 px，string 原样输出）
         */
        "radius"?: number | string;
        /**
          * 期望的宽高比（用于在未设置高度、尚未加载时提供正确的占位比例，避免布局抖动） - 可传 16/9、4/3 等字符串，或数值（如 1.777） - 若不传，则在图片加载完成后自动以 naturalWidth/naturalHeight 填充比例
         */
        "ratio"?: string | number;
        /**
          * referrerPolicy
         */
        "referrerPolicy"?: string;
        /**
          * 显示重试按钮
          * @default true
         */
        "retryable"?: boolean;
        /**
          * 预览工具栏显示旋转按钮
          * @default true
         */
        "rotatable"?: boolean;
        /**
          * 形状：square（默认）| rounded | circle
          * @default 'square'
         */
        "shape"?: 'square' | 'rounded' | 'circle';
        /**
          * 是否展示错误占位层
          * @default true
         */
        "showError"?: boolean;
        /**
          * 显示图片信息（尺寸、大小等）
          * @default false
         */
        "showInfo"?: boolean;
        /**
          * 是否展示加载中骨架（当无自定义占位图时）
          * @default true
         */
        "showLoading"?: boolean;
        /**
          * 显示加载进度条
          * @default false
         */
        "showProgress"?: boolean;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 多源图片，支持 AVIF/WebP 等，JSON 字符串或对象数组：[{ type, srcset, media? }]
         */
        "sources"?: string | Array<{ type: string; srcset: string; media?: string }>;
        /**
          * 图片地址
         */
        "src": string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 使用外部预览组件（用于多图gallery模式）
          * @default false
         */
        "useExternalPreview"?: boolean;
        /**
          * 水印文本
         */
        "watermark"?: string;
        /**
          * 水印位置
          * @default 'bottom-right'
         */
        "watermarkPosition"?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';
        /**
          * 宽度（number 自动补 px，string 原样输出，如 '50%'、'320px'）
         */
        "width"?: number | string;
        /**
          * 预览是否可缩放
          * @default true
         */
        "zoomable"?: boolean;
    }
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface LdesignImageGroup {
        /**
          * 列数
          * @default 3
         */
        "columns"?: number;
        /**
          * 间距（px）
          * @default 8
         */
        "gap"?: number;
        /**
          * 统一子项形状（子项已设置 shape 时不覆盖）
         */
        "shape"?: 'square' | 'rounded' | 'circle';
    }
    /**
     * ldesign-image-preview
     * 图片预览组件，支持缩放、拖拽、旋转等交互
     * 用法：
     * 1) 编程式调用：
     *    const preview = document.querySelector('ldesign-image-preview');
     *    preview.show('https://example.com/image.jpg');
     * 2) 作为图片组件的预览功能：
     *    <ldesign-image src="..." preview></ldesign-image>
     */
    interface LdesignImagePreview {
        /**
          * 当前显示的图片索引
          * @default 0
         */
        "currentIndex"?: number;
        /**
          * 是否启用旋转
          * @default true
         */
        "enableRotate"?: boolean;
        /**
          * 当前预览的图片列表
          * @default []
         */
        "images"?: string[];
        /**
          * 初始缩放比例
          * @default 1
         */
        "initialScale"?: number;
        /**
          * 是否启用键盘操作
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否循环切换
          * @default true
         */
        "loop"?: boolean;
        /**
          * 是否在点击遮罩时关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 最大缩放比例
          * @default 4
         */
        "maxScale"?: number;
        /**
          * 最小缩放比例
          * @default 0.25
         */
        "minScale"?: number;
        "onLdesignPreviewChange"?: (event: LdesignImagePreviewCustomEvent<{ index: number, image: string }>) => void;
        "onLdesignPreviewClose"?: (event: LdesignImagePreviewCustomEvent<void>) => void;
        "onLdesignPreviewError"?: (event: LdesignImagePreviewCustomEvent<{ index: number, image: string }>) => void;
        "onLdesignPreviewOpen"?: (event: LdesignImagePreviewCustomEvent<{ images: string[], index: number }>) => void;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "showCloseBtn"?: boolean;
        /**
          * 是否显示图片索引
          * @default true
         */
        "showIndex"?: boolean;
        /**
          * 是否显示工具栏
          * @default true
         */
        "showToolbar"?: boolean;
        /**
          * 动画过渡时长 (ms)
          * @default 300
         */
        "transitionDuration"?: number;
        /**
          * 是否显示预览
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface LdesignImageViewer {
        /**
          * 主题：暗色/亮色遮罩
          * @default 'dark'
         */
        "backdrop"?: 'dark' | 'light';
        /**
          * 标题与描述的对齐方式：left 左对齐；center 居中；right 右对齐
          * @default 'center'
         */
        "captionAlign"?: 'left' | 'center' | 'right';
        /**
          * 标题与描述的显示位置：bottom 底部（工具栏上方）；top 顶部（缩略图下方）
          * @default 'bottom'
         */
        "captionPosition"?: 'bottom' | 'top';
        /**
          * 关闭动画效果（不设置则使用 openAnimation）
         */
        "closeAnimation"?: 'fade' | 'zoom' | 'fade-zoom' | 'slide-up' | 'slide-down' | 'none';
        /**
          * 关闭动画时长（ms，不设置则使用 openDuration 或 transitionDuration）
         */
        "closeDuration"?: number;
        /**
          * 图片列表（数组或 JSON 字符串）
         */
        "images": string | Array<ImageViewerItem | string>;
        /**
          * 是否启用键盘快捷键
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否循环播放
          * @default true
         */
        "loop"?: boolean;
        /**
          * 点击遮罩是否可关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * @default 4
         */
        "maxScale"?: number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale"?: number;
        "onLdesignChange"?: (event: LdesignImageViewerCustomEvent<{ index: number }>) => void;
        "onLdesignClose"?: (event: LdesignImageViewerCustomEvent<void>) => void;
        "onLdesignOpen"?: (event: LdesignImageViewerCustomEvent<void>) => void;
        "onLdesignVisibleChange"?: (event: LdesignImageViewerCustomEvent<boolean>) => void;
        /**
          * 打开/关闭动画效果：fade 淡入淡出；zoom 缩放；slide-up 上滑；slide-down 下滑；none 无动画
          * @default 'fade-zoom'
         */
        "openAnimation"?: 'fade' | 'zoom' | 'fade-zoom' | 'slide-up' | 'slide-down' | 'none';
        /**
          * 打开动画时长（ms，不设置则使用 transitionDuration）
         */
        "openDuration"?: number;
        /**
          * 小窗拖拽方式：title 标题栏拖拽；anywhere 全面板可拖拽
          * @default 'title'
         */
        "panelDraggable"?: 'title' | 'anywhere';
        "panelHeight"?: number | string;
        /**
          * 小窗宽高（viewerMode=modal 时生效）
         */
        "panelWidth"?: number | string;
        /**
          * 是否显示标题与描述
          * @default true
         */
        "showCaption"?: boolean;
        /**
          * 是否展示顶部缩略图
          * @default true
         */
        "showThumbnails"?: boolean;
        /**
          * 初始索引
          * @default 0
         */
        "startIndex"?: number;
        /**
          * 图片切换过渡类型
          * @default 'fade-zoom'
         */
        "transition"?: 'fade' | 'fade-zoom';
        /**
          * 过渡时长（ms）
          * @default 240
         */
        "transitionDuration"?: number;
        /**
          * 过渡缓动函数
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "transitionEasing"?: string;
        /**
          * 查看窗口模式：overlay 全屏；modal 小窗
          * @default 'overlay'
         */
        "viewerMode"?: 'overlay' | 'modal' | 'embedded';
        /**
          * 小窗标题（modal模式顶部标题栏）
         */
        "viewerTitle"?: string;
        /**
          * 是否显示
          * @default false
         */
        "visible"?: boolean;
        /**
          * 是否启用滚轮缩放
          * @default true
         */
        "wheelZoom"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
        /**
          * 缩放步进
          * @default 0.1
         */
        "zoomStep"?: number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize"?: boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 失去焦点时触发
         */
        "onLdesignBlur"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 值改变时触发
         */
        "onLdesignChange"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 点击清空按钮时触发
         */
        "onLdesignClear"?: (event: LdesignInputCustomEvent<void>) => void;
        /**
          * 获得焦点时触发
         */
        "onLdesignFocus"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 输入时触发
         */
        "onLdesignInput"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows"?: number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount"?: boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword"?: boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type"?: 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value"?: string;
    }
    /**
     * InputNumber 数字输入框
     * - 支持步进按钮、键盘操作（可关闭）、最小/最大值限制、精度控制
     * - 提供 formatter / parser 以实现显示格式化与解析
     */
    interface LdesignInputNumber {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 自定义显示格式化
         */
        "formatter"?: (value: number | null) => string;
        /**
          * 是否启用键盘增减（方向键/页键）
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 最大值（可不设）
         */
        "max"?: number;
        /**
          * 最小值（可不设）
         */
        "min"?: number;
        /**
          * 是否允许鼠标滚轮调整
          * @default false
         */
        "mouseWheel"?: boolean;
        "onLdesignBlur"?: (event: LdesignInputNumberCustomEvent<FocusEvent>) => void;
        /**
          * 提交时触发（失焦、回车、点击步进）
         */
        "onLdesignChange"?: (event: LdesignInputNumberCustomEvent<number | null>) => void;
        /**
          * 聚焦/失焦事件
         */
        "onLdesignFocus"?: (event: LdesignInputNumberCustomEvent<FocusEvent>) => void;
        /**
          * 输入时触发（值变化实时）
         */
        "onLdesignInput"?: (event: LdesignInputNumberCustomEvent<number | null>) => void;
        /**
          * 自定义解析（将输入字符串转成数值）
         */
        "parser"?: (input: string) => number | null;
        /**
          * 占位符
         */
        "placeholder"?: string;
        /**
          * 精度（小数位数）。不设则按 step 与输入自动推断
         */
        "precision"?: number;
        /**
          * 是否只读（可选，禁用输入但可复制）
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 状态样式
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 步长（增减用，不强制对齐输入）
          * @default 1
         */
        "step"?: number;
        /**
          * 当前值（受控，支持双向）
          * @default 0
         */
        "value"?: number | null;
    }
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface LdesignLoading {
        /**
          * 全屏模式（覆盖整个视口）
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * 全屏时是否锁定页面滚动
          * @default true
         */
        "lockScroll"?: boolean;
        /**
          * 全屏时是否显示遮罩背景
          * @default true
         */
        "mask"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 是否处于加载中
          * @default true
         */
        "spinning"?: boolean;
        /**
          * 说明文字
         */
        "tip"?: string;
        /**
          * 加载指示类型
          * @default 'spinner'
         */
        "type"?: 'spinner' | 'dots';
        /**
          * 垂直布局（图标在上、文字在下）
          * @default false
         */
        "vertical"?: boolean;
        /**
          * 全屏时的层级（可选）
         */
        "zIndex"?: number;
    }
    /**
     * ldesign-mention 提及组件（contenteditable 版本）
     * - 使用可编辑 div 实现富文本输入，支持在文本中高亮渲染提及 token
     * - 候选浮层定位于光标位置（通过隐藏锚点 + ldesign-popup 定位）
     */
    interface LdesignMention {
        /**
          * 浮层挂载到：self|body|closest-popup（透传给 popup）
          * @default 'body'
         */
        "appendTo"?: 'self' | 'body' | 'closest-popup';
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus"?: boolean;
        /**
          * token 是否默认可关闭
          * @default true
         */
        "closable"?: boolean;
        /**
          * 受控模式（为 true 时不在内部修改 value）
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 自定义过滤函数（返回 true 表示保留）
         */
        "filterOption"?: (input: string, option: MentionItem) => boolean;
        /**
          * 加载中（用于异步搜索）
          * @default false
         */
        "loading"?: boolean;
        /**
          * 列表最大高度
          * @default 240
         */
        "maxHeight"?: number;
        /**
          * 最大可见行数（超过后出现滚动条）；不设置则不限制
         */
        "maxRows"?: number;
        /**
          * 结构化初始化（分段）
         */
        "model"?: string | MentionSegment[];
        /**
          * 是否多行模式。多行模式下允许回车换行，并可按 rows/maxRows 控制显示高度
          * @default false
         */
        "multiline"?: boolean;
        "onLdesignBlur"?: (event: LdesignMentionCustomEvent<FocusEvent>) => void;
        /**
          * 内容变化事件（返回纯文本值：等同于 editable.innerText）
         */
        "onLdesignChange"?: (event: LdesignMentionCustomEvent<string>) => void;
        /**
          * 获得/失去焦点
         */
        "onLdesignFocus"?: (event: LdesignMentionCustomEvent<FocusEvent>) => void;
        /**
          * 标签移除事件
         */
        "onLdesignRemove"?: (event: LdesignMentionCustomEvent<{ value: string | number; label: string; trigger: string }>) => void;
        /**
          * 搜索事件（每次触发字符后的输入变化都会触发）
         */
        "onLdesignSearch"?: (event: LdesignMentionCustomEvent<{ value: string; trigger: string }>) => void;
        /**
          * 选择事件（选中候选项时触发）
         */
        "onLdesignSelect"?: (event: LdesignMentionCustomEvent<{ value: MentionItem; trigger: string }>) => void;
        /**
          * 结构化值变化事件
         */
        "onLdesignValueChange"?: (event: LdesignMentionCustomEvent<{ text: string; mentions: MentionEntity[]; model: MentionSegment[] }>) => void;
        /**
          * 候选项（数组或 JSON 字符串）
          * @default []
         */
        "options"?: string | MentionItem[];
        /**
          * 是否在加载时将文本中的
          * @xxx /#xxx 解析为标签（仅在未提供 model/valueModel 时生效）
         */
        "parseOnInit"?: boolean;
        /**
          * 解析策略：label（直接转换）/options（仅命中候选时转换）
          * @default 'label'
         */
        "parseStrategy"?: 'label' | 'options';
        /**
          * 占位文本
         */
        "placeholder"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 是否允许用户手动拖拽调整高度（vertical）
          * @default true
         */
        "resizable"?: boolean;
        /**
          * 初始可见行数（用于计算最小高度）
          * @default 3
         */
        "rows"?: number;
        /**
          * 尺寸（影响样式）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 默认 token 外观
          * @default 'primary'
         */
        "tokenType"?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 触发字符（如 @ 或 #），兼容旧属性
          * @default '@'
         */
        "trigger"?: string;
        /**
          * 触发符个性化配置（JS 对象或 JSON 字符串）
         */
        "triggerConfigs"?: string | MentionTriggerConfig[];
        /**
          * 多个触发字符
         */
        "triggers"?: string | string[];
        /**
          * 当前值（受控，文本值，包含渲染后的
          * @name 文本）
          * @default ''
         */
        "value"?: string;
        /**
          * 事件/受控值格式（默认 model）
          * @default 'model'
         */
        "valueFormat"?: 'model' | 'segments' | 'text';
        /**
          * 结构化初始化（模型）
         */
        "valueModel"?: string | MentionModel;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式：同层级只允许展开一个
          * @default false
         */
        "accordion"?: boolean;
        /**
          * 折叠模式：仅显示一级图标，悬停右侧弹出；无子级时显示 tooltip（仅纵向）
          * @default false
         */
        "collapse"?: boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控）
          * @default []
         */
        "defaultOpenKeys"?: string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent"?: number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items"?: string | MenuItem[];
        /**
          * 展示模式：vertical（纵向）| horizontal（横向）
          * @default 'vertical'
         */
        "mode"?: 'vertical' | 'horizontal';
        /**
          * 横向模式下 “更多” 文案
          * @default '更多'
         */
        "moreLabel"?: string;
        /**
          * 展开/收起事件
         */
        "onLdesignOpenChange"?: (event: LdesignMenuCustomEvent<{ key: string; open: boolean; openKeys: string[] }>) => void;
        /**
          * 横向溢出变化事件
         */
        "onLdesignOverflowChange"?: (event: LdesignMenuCustomEvent<{ overflowCount: number }>) => void;
        /**
          * 选中事件
         */
        "onLdesignSelect"?: (event: LdesignMenuCustomEvent<{ key: string; item: MenuItem; pathKeys: string[] }>) => void;
        /**
          * 当前打开的子菜单 key 列表（受控）
         */
        "openKeys"?: string[];
        /**
          * 顶层（一级）是否强制显示图标占位（保证对齐）。若条目没有 icon，将渲染一个占位。
          * @default true
         */
        "requireTopIcon"?: boolean;
        /**
          * 弹出子菜单的触发方式（仅在 flyout/mixed 生效；横向模式同样适用）
          * @default 'hover'
         */
        "submenuTrigger"?: SubmenuTrigger;
        /**
          * 纵向模式：顶层互斥展开（无论 inline 或 flyout），默认开启
          * @default true
         */
        "topLevelExclusive"?: boolean;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式展开方式：inline（内嵌）、flyout（右侧弹出）、mixed（一级内嵌，其余弹出）
          * @default 'inline'
         */
        "verticalExpand"?: VerticalExpand;
    }
    /**
     * Message 全局提示
     * 高性能轻量级的全局反馈组件
     * 特性：
     * - 支持多种消息类型
     * - GPU 加速动画
     * - 内存优化与对象池
     * - 响应式设计
     * - 暗黑模式支持
     * - 无障碍访问
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable"?: boolean;
        /**
          * 自定义类名
         */
        "customClass"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration"?: number;
        /**
          * 是否支持HTML内容
          * @default false
         */
        "html"?: boolean;
        /**
          * 最大宽度
         */
        "maxWidth"?: string;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 标题内容
         */
        "messageTitle"?: string;
        /**
          * 点击事件
         */
        "onLdesignClick"?: (event: LdesignMessageCustomEvent<void>) => void;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignMessageCustomEvent<void>) => void;
        /**
          * 消息内容
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置
          * @default 'top'
         */
        "placement"?: 'top' | 'top-left' | 'top-right' | 'bottom' | 'bottom-left' | 'bottom-right' | 'center';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type"?: MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        "animEase"?: string;
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation"?: ModalAnimation;
        /**
          * 新增：是否显示动画效果
          * @default true
         */
        "animationEnabled"?: boolean;
        /**
          * 新增：自动检测系统深色模式
          * @default true
         */
        "autoDetectDarkMode"?: boolean;
        /**
          * 软键盘（移动端）避让
          * @default true
         */
        "avoidKeyboard"?: boolean;
        /**
          * 关闭/确认前拦截钩子（函数属性，需 JS 赋值）
         */
        "beforeClose"?: (reason: 'ok' | 'close' | 'mask' | 'esc' | 'api') => boolean | Promise<boolean>;
        /**
          * 向导步进前置钩子：返回 false 阻止切换
         */
        "beforeStepChange"?: (from: number, to: number) => boolean | Promise<boolean>;
        /**
          * 新增：模糊程度
          * @default 10
         */
        "blurAmount"?: number;
        /**
          * 新增：模糊背景
          * @default false
         */
        "blurBackground"?: boolean;
        /**
          * 新增：内容内边距
         */
        "bodyPadding"?: string | number;
        "breakpoints"?: { xs: number; sm: number; md: number; lg: number };
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * @default 'secondary'
         */
        "cancelType"?: ButtonType;
        /**
          * 是否居中显示
          * @default false
         */
        "centered"?: boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 新增：是否显示关闭动画
          * @default true
         */
        "closeAnimation"?: boolean;
        /**
          * 图标可配置
          * @default 'close'
         */
        "closeIcon"?: string;
        /**
          * 当前步骤（0-based，可受控）
          * @default 0
         */
        "currentStep"?: number;
        /**
          * 新增：自定义按钮
         */
        "customButtons"?: Array<{
    text: string;
    type?: ButtonType;
    loading?: boolean;
    disabled?: boolean;
    onClick?: () => void | Promise<void>;
  }>;
        /**
          * 新增：自定义类名
         */
        "customClass"?: string;
        /**
          * 新增：深色模式
          * @default false
         */
        "darkMode"?: boolean;
        /**
          * 新增：是否允许双击标题栏最大化
          * @default true
         */
        "dblclickMaximize"?: boolean;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * 新增：是否禁用过渡效果
          * @default false
         */
        "disableTransition"?: boolean;
        /**
          * Drawer 滑动关闭阈值（距离）：默认 '30%'（以抽屉宽度为基准）
         */
        "drawerCloseThreshold"?: number | string;
        /**
          * Drawer 边缘滑动关闭
          * @default true
         */
        "drawerSwipeToClose"?: boolean;
        /**
          * 动画参数（也可通过 CSS 变量覆盖）：duration(ms)、ease、animEase
         */
        "duration"?: number;
        "ease"?: string;
        /**
          * 边缘感应宽度（px）
          * @default 24
         */
        "edgeSwipeWidth"?: number;
        /**
          * 新增：是否启用手势操作
          * @default true
         */
        "enableGestures"?: boolean;
        /**
          * 新增：是否支持画中画模式
          * @default false
         */
        "enablePictureInPicture"?: boolean;
        /**
          * 新增：底部按钮对齐
          * @default 'right'
         */
        "footerAlign"?: 'left' | 'center' | 'right' | 'space-between';
        /**
          * 新增：是否默认满屏
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * 容器（选择器或元素）：若提供，则在加载时把组件节点移动到该容器下
         */
        "getContainer"?: string | HTMLElement;
        /**
          * 新增：头部配置
         */
        "headerConfig"?: ModalHeaderConfig;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        "initialFocus"?: string;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable"?: boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 新增：是否展示加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 新增：加载文字
          * @default '加载中...'
         */
        "loadingText"?: string;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable"?: boolean;
        /**
          * @default 'maximize'
         */
        "maximizeIcon"?: string;
        "minHeight"?: number;
        /**
          * 调整大小边界
         */
        "minWidth"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * @default false
         */
        "okDisabled"?: boolean;
        /**
          * OK 按钮状态
          * @default false
         */
        "okLoading"?: boolean;
        /**
          * 底部按钮文案和类型控制（仅在未自定义 footer 时生效）
          * @default '确定'
         */
        "okText"?: string;
        /**
          * @default 'primary'
         */
        "okType"?: ButtonType;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignModalCustomEvent<void>) => void;
        /**
          * 确认事件
         */
        "onLdesignOk"?: (event: LdesignModalCustomEvent<void>) => void;
        "onLdesignStepChange"?: (event: LdesignModalCustomEvent<number>) => void;
        /**
          * 显示状态变化事件
         */
        "onLdesignVisibleChange"?: (event: LdesignModalCustomEvent<boolean>) => void;
        /**
          * 屏幕边缘滑动打开抽屉（需 destroyOnClose=false 以便组件常驻）
          * @default false
         */
        "openOnEdgeSwipe"?: boolean;
        "preOk"?: () => boolean | Promise<boolean>;
        /**
          * 新增：当前进度（0-100）
          * @default 0
         */
        "progress"?: number;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable"?: boolean;
        /**
          * @default 'restore'
         */
        "restoreIcon"?: string;
        /**
          * 新增：是否显示取消按钮
          * @default true
         */
        "showCancelButton"?: boolean;
        /**
          * 新增：是否显示底部分割线
          * @default true
         */
        "showFooterDivider"?: boolean;
        /**
          * 新增：是否显示满屏按钮
          * @default false
         */
        "showFullscreenButton"?: boolean;
        /**
          * 新增：是否显示头部分割线
          * @default true
         */
        "showHeaderDivider"?: boolean;
        /**
          * 新增：是否显示确认按钮
          * @default true
         */
        "showOkButton"?: boolean;
        /**
          * 新增：是否显示进度指示器
          * @default false
         */
        "showProgress"?: boolean;
        /**
          * 新增：是否显示阴影
          * @default true
         */
        "showShadow"?: boolean;
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size"?: ModalSize;
        /**
          * 步骤标题（JS 赋值）
         */
        "steps"?: string[];
        /**
          * 新增：主题
          * @default 'light'
         */
        "theme"?: ModalTheme;
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 焦点与可访问性
          * @default true
         */
        "trapFocus"?: boolean;
        /**
          * 变体：抽屉/底部弹层等
          * @default 'modal'
         */
        "variant"?: ModalVariant;
        /**
          * 响应式变体：根据断点自动切换
         */
        "variantAt"?: Partial<Record<'xs'|'sm'|'md'|'lg', ModalVariant>>;
        /**
          * 新增：支持虚拟化滚动
          * @default false
         */
        "virtualScroll"?: boolean;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible"?: boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * 向导模式
          * @default false
         */
        "wizard"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration"?: number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignNotificationCustomEvent<void>) => void;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement"?: NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type"?: NotificationType;
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface LdesignPagination {
        /**
          * 页码省略边界数（两端保留）
          * @default 1
         */
        "boundaryCount"?: number;
        /**
          * 当前页（受控）
         */
        "current"?: number;
        /**
          * 默认当前页（非受控）
          * @default 1
         */
        "defaultCurrent"?: number;
        /**
          * 默认每页条数（非受控）
          * @default 10
         */
        "defaultPageSize"?: number;
        /**
          * 组件禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 仅一页时是否隐藏
          * @default false
         */
        "hideOnSinglePage"?: boolean;
        /**
          * 页码变化事件
         */
        "onLdesignChange"?: (event: LdesignPaginationCustomEvent<{ page: number; pageSize: number }>) => void;
        /**
          * 每页条数变化事件
         */
        "onLdesignPageSizeChange"?: (event: LdesignPaginationCustomEvent<{ pageSize: number; page: number }>) => void;
        /**
          * 每页条数（受控）
         */
        "pageSize"?: number;
        /**
          * 页大小选项（可传数组或逗号分隔字符串）
          * @default [10, 20, 50, 100]
         */
        "pageSizeOptions"?: number[] | string;
        /**
          * 下拉展示文案模板，仅在 dropdown 模式下生效，支持 {size}
          * @default '{size} 条/页'
         */
        "pageSizeText"?: string;
        /**
          * 页信息文案模板，支持 {current}、{pageCount}
          * @default '{current}/{pageCount} 页'
         */
        "pageText"?: string;
        /**
          * 是否显示首页/末页
          * @default false
         */
        "showFirstLast"?: boolean;
        /**
          * 是否显示快速跳转输入框
          * @default false
         */
        "showQuickJumper"?: boolean;
        /**
          * 是否显示每页条数切换器
          * @default false
         */
        "showSizeChanger"?: boolean;
        /**
          * 是否显示总数文案
          * @default false
         */
        "showTotal"?: boolean;
        /**
          * 当前页两侧展示的邻接页数
          * @default 1
         */
        "siblingCount"?: number;
        /**
          * 简洁模式（仅上一页/下一页 + 页码输入）
          * @default false
         */
        "simple"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 切换器类型：native 原生下拉；dropdown 使用组件弹层
          * @default 'dropdown'
         */
        "sizeChangerType"?: 'native' | 'dropdown';
        /**
          * 总条目数
          * @default 0
         */
        "total"?: number;
        /**
          * 总数文案模板，支持 {total}、{rangeStart}、{rangeEnd}
          * @default '共 {total} 条'
         */
        "totalText"?: string;
    }
    /**
     * ldesign-picker
     * 通用滚轮选择器（单列）
     * - PC：鼠标滚轮按“行”步进，按速度取整步数
     * - 移动端：手势滑动（Pointer Events）+ 惯性 + 吸附到最近项
     * - 支持配置容器高度与每项高度；容器通常为 itemHeight 的奇数倍（3/5/7...）
     * - 正中间指示器高度与子项一致
     */
    interface LdesignPicker {
        /**
          * 3D圆柱半径（像素）
         */
        "cylinderRadius"?: number;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 手势拖拽跟随比例（0-1），1 表示 1:1 跟手，越小阻力越大，默认 1
          * @default 1
         */
        "dragFollow"?: number;
        /**
          * 手势拖拽平滑时间常数（毫秒），>0 时使用一阶平滑使位移逐步接近手指，营造"越来越慢"的阻力感，默认 0（关闭）
         */
        "dragSmoothing"?: number;
        /**
          * 是否启用 3D 效果
          * @default false
         */
        "enable3d"?: boolean;
        /**
          * 惯性摩擦 0-1（越小减速越快）
          * @default 0.92
         */
        "friction"?: number;
        /**
          * 是否启用触觉反馈（需要浏览器支持 Vibration API）
          * @default true
         */
        "hapticFeedback"?: boolean;
        /**
          * 触觉反馈强度（毫秒）
          * @default 5
         */
        "hapticIntensity"?: number;
        /**
          * 搜索时是否高亮匹配文本
          * @default true
         */
        "highlightMatch"?: boolean;
        /**
          * 行高（自动根据 size 推导，亦可显式覆盖）
         */
        "itemHeight"?: number;
        /**
          * 键盘快捷定位是否启用（输入字母快速定位）
          * @default true
         */
        "keyboardQuickJump"?: boolean;
        /**
          * 最大橡皮筋越界（像素）。优先级高于比例
         */
        "maxOverscroll"?: number;
        /**
          * 最大橡皮筋越界比例（相对于容器高度 0-1）。当未提供像素值时生效；未设置则默认 0.5（即容器高度的一半）
         */
        "maxOverscrollRatio"?: number;
        /**
          * 是否启用惯性
          * @default true
         */
        "momentum"?: boolean;
        /**
          * 选中项变化（最终吸附后触发）
         */
        "onLdesignChange"?: (event: LdesignPickerCustomEvent<{ value: string | undefined; option?: PickerOption }>) => void;
        /**
          * 选择过程事件（滚动/拖拽中也会触发）
         */
        "onLdesignPick"?: (event: LdesignPickerCustomEvent<{ value: string | undefined; option?: PickerOption; context: { trigger: 'click' | 'scroll' | 'touch' | 'wheel' | 'keyboard' } }>) => void;
        /**
          * 选项列表（数组或 JSON 字符串）
          * @default []
         */
        "options"?: string | PickerOption[];
        /**
          * 可视高度（优先），未设置时使用 visibleItems * itemHeight
         */
        "panelHeight"?: number;
        /**
          * 边界阻力系数 0-1（越小阻力越大）
          * @default 0.3
         */
        "resistance"?: number;
        /**
          * 3D旋转步长（度）
         */
        "rotateStep"?: number;
        /**
          * 搜索防抖延迟（毫秒）
          * @default 300
         */
        "searchDebounce"?: number;
        /**
          * 是否在搜索时大小写不敏感
          * @default true
         */
        "searchIgnoreCase"?: boolean;
        /**
          * 搜索框占位符
          * @default '搜索选项...'
         */
        "searchPlaceholder"?: string;
        /**
          * 是否显示搜索框
          * @default false
         */
        "searchable"?: boolean;
        /**
          * 是否显示渐变遮罩
          * @default true
         */
        "showMask"?: boolean;
        /**
          * 尺寸，影响每行高度
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 吸附/回弹动画时长（毫秒，适用于触摸/键盘/滚动吸附），未设置默认 300ms
         */
        "snapDuration"?: number;
        /**
          * 滚轮专用吸附动画时长（毫秒），未设置默认 150ms
         */
        "snapDurationWheel"?: number;
        /**
          * 是否启用音效
          * @default false
         */
        "soundEffects"?: boolean;
        /**
          * 自定义音效 URL
         */
        "soundUrl"?: string;
        /**
          * 音效音量 (0-1)
          * @default 0.3
         */
        "soundVolume"?: number;
        /**
          * 回弹动画基础时长（毫秒），未设置默认 bounce: 500ms, ease: 600ms
         */
        "springBackDuration"?: number;
        /**
          * 边界回弹模式：'bounce' 弹簧回弹（默认） | 'ease' 缓慢恢复
          * @default 'bounce'
         */
        "springBackMode"?: 'bounce' | 'ease';
        /**
          * 主题模式
          * @default 'light'
         */
        "theme"?: 'light' | 'dark' | 'auto';
        /**
          * 当前值（受控）
         */
        "value"?: string;
        /**
          * 可视条目数（未显式 panelHeight 时生效，建议奇数：3/5/7）
          * @default 5
         */
        "visibleItems"?: number;
        /**
          * 3D可视角度范围（度）
         */
        "visibleRange"?: number;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于最新 Popup 进行封装，提供确认/取消操作
     * 支持动画、主题、尺寸等特性
     */
    interface LdesignPopconfirm {
        /**
          * 动画类型（继承自 popup）
          * @default 'scale'
         */
        "animation"?: 'fade' | 'scale' | 'slide';
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 自动关闭延迟（毫秒），0 表示不自动关闭
          * @default 0
         */
        "autoCloseDelay"?: number;
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside"?: boolean;
        /**
          * 确认按钮加载状态
          * @default false
         */
        "confirmLoading"?: boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * 图标类型/名称
          * @default 'question'
         */
        "icon"?: PopconfirmIcon;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 与触发元素的距离
          * @default 8
         */
        "offsetDistance"?: number;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText"?: string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 事件：取消
         */
        "onLdesignCancel"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：确认
         */
        "onLdesignConfirm"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignPopconfirmCustomEvent<boolean>) => void;
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement"?: PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle"?: string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay"?: number;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 尺寸（影响内容区域大小）
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger"?: PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface LdesignPopup {
        /**
          * 动画类型
          * @default 'scale'
         */
        "animation"?: PopupAnimation;
        /**
          * @default 'self'
         */
        "appendTo"?: 'self' | 'body' | 'closest-popup';
        /**
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 自动关闭延迟（ms），0表示不自动关闭
          * @default 0
         */
        "autoCloseDelay"?: number;
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable"?: boolean;
        /**
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * @default true
         */
        "closeOnOutside"?: boolean;
        "content"?: string;
        /**
          * @default false
         */
        "debug"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * @default true
         */
        "interactive"?: boolean;
        /**
          * 加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * @default false
         */
        "lockOnScroll"?: boolean;
        "maxWidth"?: number | string;
        /**
          * 动画位移距离（px），用于"朝触发器靠近"的起始位移
          * @default 10
         */
        "motionDistance"?: number;
        /**
          * 动画时长（ms）
          * @default 200
         */
        "motionDuration"?: number;
        /**
          * 是否开启动画（基于 data-placement 的定向靠近/离开）
          * @default true
         */
        "motionEnabled"?: boolean;
        /**
          * 与触发元素的距离：参见组件注释中的语义说明
          * @default 8
         */
        "offsetDistance"?: number | string;
        "onLdesignVisibleChange"?: (event: LdesignPopupCustomEvent<boolean>) => void;
        /**
          * @default 'bottom'
         */
        "placement"?: PopupPlacement;
        /**
          * 自定义弹层类名
         */
        "popupClass"?: string;
        /**
          * @default 'dialog'
         */
        "popupRole"?: string;
        "popupTitle"?: string;
        /**
          * @default 0
         */
        "showDelay"?: number;
        /**
          * 预设尺寸
         */
        "size"?: PopupSize;
        /**
          * @default 'auto'
         */
        "strategy"?: 'auto' | 'fixed' | 'absolute';
        /**
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * @default 'hover'
         */
        "trigger"?: PopupTrigger;
        /**
          * @default false
         */
        "visible"?: boolean;
        "width"?: number | string;
    }
    /**
     * Progress 进度�?
     * 支持：线形、环形、仪表盘、步骤条，多尺寸/状�?文本/自定义颜色等
     */
    interface LdesignProgress {
        /**
          * 启用百分比过渡动�?
          * @default false
         */
        "animated"?: boolean;
        /**
          * 圆形分段之间的间隔角度（度数�?
          * @default 2
         */
        "circleStepGapDegree"?: number;
        /**
          * 圆形分段步数（用于环形步进样式）
         */
        "circleSteps"?: number;
        /**
          * 仪表盘变体（仅dashboard类型）：standard | bottom | left | right | fan
          * @default 'standard'
         */
        "dashboardVariant"?: 'standard' | 'bottom' | 'left' | 'right' | 'fan';
        /**
          * 3D效果（仅line类型�?
          * @default false
         */
        "effect3d"?: boolean;
        /**
          * 文本格式化，使用 {percent} 占位符，例如�?{percent} / 100"
          * @default '{percent}%'
         */
        "format"?: string;
        /**
          * 仪表盘缺口角度（0-360，仅 circle/dashboard�?
         */
        "gapDegree"?: number;
        /**
          * 缺口位置（top/right/bottom/left，仅 circle/dashboard�?
          * @default 'top'
         */
        "gapPosition"?: 'top' | 'right' | 'bottom' | 'left';
        /**
          * 发光效果
          * @default false
         */
        "glow"?: boolean;
        /**
          * 渐变方向：horizontal | vertical | diagonal
          * @default 'horizontal'
         */
        "gradientDirection"?: 'horizontal' | 'vertical' | 'diagonal';
        /**
          * 环形渐变（可选，�?circle/dashboard）：起止�?
         */
        "gradientFrom"?: string;
        /**
          * 渐变分段（创建分段渐变效果）
         */
        "gradientSegments"?: Array<{offset: number; color: string}>;
        "gradientTo"?: string;
        /**
          * 不确定状态（显示循环动画，忽�?percent�?
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * 线形文本位置
          * @default 'right'
         */
        "infoPosition"?: 'right' | 'left' | 'inside' | 'bottom';
        /**
          * 多层进度（用于显示多个数据）
         */
        "layers"?: Array<{percent: number; color: string; label?: string}>;
        /**
          * 动态标记点
         */
        "markers"?: Array<{position: number; color?: string; label?: string}>;
        /**
          * 进度完成时触�?
         */
        "onComplete"?: (event: LdesignProgressCustomEvent<void>) => void;
        /**
          * 百分比变化时触发
         */
        "onPercentChange"?: (event: LdesignProgressCustomEvent<number>) => void;
        /**
          * 百分�?0-100
          * @default 0
         */
        "percent"?: number;
        /**
          * 脉冲动画
          * @default false
         */
        "pulse"?: boolean;
        /**
          * 半圆位置（type=semicircle），top 表示显示上半圆，bottom 表示下半�?
          * @default 'top'
         */
        "semiPosition"?: 'top' | 'bottom';
        /**
          * 进度条阴�?
          * @default false
         */
        "shadow"?: boolean;
        /**
          * 是否显示信息文本（line：默认右侧；circle/dashboard：内部）
          * @default true
         */
        "showInfo"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 状态：normal | active | success | exception
          * @default 'normal'
         */
        "status"?: 'normal' | 'active' | 'success' | 'exception';
        /**
          * 步骤数（type=steps 或设�?steps>0 都渲染步骤条�?
         */
        "steps"?: number;
        /**
          * 步骤间隙 px（仅 steps�?
          * @default 2
         */
        "stepsGap"?: number;
        /**
          * 步骤条的块圆�?
          * @default 100
         */
        "stepsRadius"?: number;
        /**
          * 条纹动画（active 状态下默认开启）
          * @default true
         */
        "striped"?: boolean;
        /**
          * 进度颜色（可为任�?css 颜色�?
         */
        "strokeColor"?: string;
        /**
          * 端点样式：round | square | butt（仅 circle 有效，line 以圆角呈�?round�?
          * @default 'round'
         */
        "strokeLinecap"?: 'round' | 'square' | 'butt';
        /**
          * 线宽（line 为高度，circle 为描边宽度）
         */
        "strokeWidth"?: number;
        /**
          * 成功颜色
          * @default 'var(--ldesign-success-color, #42bd42)'
         */
        "successColor"?: string;
        /**
          * 成功进度（用于分段显示成功部分）0-100
         */
        "successPercent"?: number;
        /**
          * 视觉主题：default | neon | gradient3d | candy | water | glass | metallic
          * @default 'default'
         */
        "theme"?: 'default' | 'neon' | 'gradient3d' | 'candy' | 'water' | 'glass' | 'metallic';
        /**
          * 未完成轨道颜�?
         */
        "trailColor"?: string;
        /**
          * 类型：line（默认）| circle | dashboard | steps | semicircle
          * @default 'line'
         */
        "type"?: 'line' | 'circle' | 'dashboard' | 'steps' | 'semicircle';
        /**
          * 波浪动画（仅line类型�?
          * @default false
         */
        "wave"?: boolean;
        /**
          * 外径宽度（仅 circle/dashboard），单位 px
          * @default 120
         */
        "width"?: number;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioCustomEvent<string | number>) => void;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioGroupCustomEvent<string | number>) => void;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface LdesignRate {
        /**
          * 再次点击清空（值相同则清零）
          * @default true
         */
        "allowClear"?: boolean;
        /**
          * 允许半星
          * @default false
         */
        "allowHalf"?: boolean;
        /**
          * 选中颜色（支持 CSS 变量覆盖）
         */
        "color"?: string;
        /**
          * 受控模式：为 true 时组件不主动修改 value，仅触发事件
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 总星数
          * @default 5
         */
        "count"?: number;
        /**
          * 禁用交互
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 图标名称（默认 star）
          * @default 'star'
         */
        "icon"?: string;
        /**
          * 值变化事件（返回新值）
         */
        "onLdesignChange"?: (event: LdesignRateCustomEvent<number>) => void;
        /**
          * hover 变化事件（返回悬浮值）
         */
        "onLdesignHoverChange"?: (event: LdesignRateCustomEvent<number>) => void;
        /**
          * 只读（展示，不可交互）
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 尺寸（影响图标大小与间距）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 提示文案（数组），hover 时显示。可传属性为 JSON 字符串或以属性方式传递数组
         */
        "tooltips"?: string[] | string;
        /**
          * 当前分值（支持受控）
          * @default 0
         */
        "value"?: number;
        /**
          * 未选中颜色（支持 CSS 变量覆盖）
         */
        "voidColor"?: string;
    }
    /**
     * ResizeBox 伸缩框
     * 可通过拖拽指定边来改变容器宽高
     */
    interface LdesignResizeBox {
        /**
          * 受控模式：为 true 时，不会修改 width/height，外部应在事件中设置新值传回
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 角落把手：top-left/top-right/bottom-right/bottom-left。字符串或数组。默认仅启用 bottom-right。
          * @default 'bottom-right'
         */
        "corners"?: string | Array<'top-left' | 'top-right' | 'bottom-right' | 'bottom-left'>;
        /**
          * 允许伸缩的边：top/right/bottom/left。默认允许 right 与 bottom，满足常见的“右/下/右下角”拖拽需求
          * @default 'right,bottom'
         */
        "directions"?: string | Array<'top' | 'right' | 'bottom' | 'left'>;
        /**
          * 是否禁用伸缩
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 初始高度。可传数字（px）或任何合法 CSS 高度值（如 'auto'）。拖拽后以 px 写回。
          * @default 200
         */
        "height"?: number | string;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * @default 60
         */
        "minHeight"?: number;
        /**
          * 最小/最大尺寸（px）
          * @default 80
         */
        "minWidth"?: number;
        "onLdesignResize"?: (event: LdesignResizeBoxCustomEvent<{ width: number; height: number; edge: string }>) => void;
        "onLdesignResizeEnd"?: (event: LdesignResizeBoxCustomEvent<{ width: number; height: number; edge: string }>) => void;
        /**
          * 拖拽开始/进行中/结束事件
         */
        "onLdesignResizeStart"?: (event: LdesignResizeBoxCustomEvent<{ width: number; height: number; edge: string }>) => void;
        /**
          * 尺寸标识，仅影响样式（边框、把手大小等）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 吸附步进（px）。>0 时，拖拽尺寸会对齐到该步进的整数倍。
          * @default 0
         */
        "snap"?: number;
        /**
          * 初始宽度。可传数字（px）或任何合法 CSS 宽度值（如 '100%'）。拖拽后以 px 写回。
          * @default 360
         */
        "width"?: number | string;
    }
    /**
     * Ripple 水波纹效果
     * 用法：把 <ldesign-ripple /> 放入任意元素内部（建议放最后），即可在该元素上获得点击水波纹效果。
     * 例如：
     * <button class="btn">按钮<ldesign-ripple /></button>
     */
    interface LdesignRipple {
        /**
          * 是否居中触发
          * @default false
         */
        "centered"?: boolean;
        /**
          * 波纹颜色，默认 currentColor
         */
        "color"?: string;
        /**
          * 自定义类名
         */
        "customClass"?: string;
        /**
          * 波纹方向
          * @default 'outward'
         */
        "direction"?: 'outward' | 'inward' | 'both';
        /**
          * 禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 膨胀动画时长(ms)
          * @default 600
         */
        "duration"?: number;
        /**
          * 缓动函数
          * @default 'cubic-bezier(0.4, 0, 0.2, 1)'
         */
        "easing"?: string;
        /**
          * 淡出时长(ms)
          * @default 300
         */
        "fadeOutDuration"?: number;
        /**
          * 是否启用发光效果
          * @default false
         */
        "glow"?: boolean;
        /**
          * 发光强度
          * @default 0.5
         */
        "glowIntensity"?: number;
        /**
          * 是否启用振动反馈 (需要浏览器支持)
          * @default false
         */
        "haptic"?: boolean;
        /**
          * 振动强度 (1-10)
          * @default 5
         */
        "hapticIntensity"?: number;
        /**
          * 是否启用键盘触发 (Enter/Space)
          * @default true
         */
        "keyboardEnabled"?: boolean;
        /**
          * 多层波纹延迟 (ms)
          * @default 120
         */
        "layerDelay"?: number;
        /**
          * 同时存在的最大波纹数量
          * @default 8
         */
        "maxRipples"?: number;
        /**
          * 是否启用多层波纹
          * @default false
         */
        "multiLayer"?: boolean;
        /**
          * 波纹不透明度
          * @default 0.24
         */
        "opacity"?: number;
        /**
          * 半径：auto 或固定像素
          * @default 'auto'
         */
        "radius"?: 'auto' | number;
        /**
          * 波纹大小模式
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large' | 'extra-large';
        /**
          * 是否启用声音反馈
          * @default false
         */
        "sound"?: boolean;
        /**
          * 声音音量 (0-1)
          * @default 0.1
         */
        "soundVolume"?: number;
        /**
          * 最小触发间隔 (ms)
          * @default 0
         */
        "throttle"?: number;
        /**
          * 是否允许触摸设备
          * @default true
         */
        "touchEnabled"?: boolean;
        /**
          * 触发方式
          * @default 'pointerdown'
         */
        "trigger"?: 'pointerdown' | 'mousedown' | 'click';
        /**
          * 是否不裁剪边界
          * @default false
         */
        "unbounded"?: boolean;
        /**
          * 波纹效果类型
          * @default 'default'
         */
        "variant"?: 'default' | 'light' | 'strong' | 'pulse' | 'gradient';
    }
    /**
     * Row 行容器
     * - 作为一行的网格容器
     * - 可独立配置列数与间距，或继承上级 ldesign-grid 的默认值
     */
    interface LdesignRow {
        /**
          * 每行的列数；未设置时将继承上级 ldesign-grid 的 cols（默认 24）
         */
        "cols"?: number;
        /**
          * 是否密集填充（尽量填补空位）；未设置时继承上级 grid，默认 true
         */
        "dense"?: boolean;
        /**
          * 统一间距（横纵同时生效），number 视为 px；未设置则继承上级 ldesign-grid 的 gap
         */
        "gap"?: number | string;
        /**
          * 横向列间距；未设置时取 gap，再继承上级 grid 的 x-gap/gap
         */
        "xGap"?: number | string;
        /**
          * 纵向行间距；未设置时取 gap，再继承上级 grid 的 y-gap/gap
         */
        "yGap"?: number | string;
    }
    /**
     * ldesign-scrollbar 自定义滚动条
     * - 包裹任意内容，提供可完全自定义样式的滚动条（纵向/横向）
     * - 支持拖拽拇指、点击轨道跳转、自动/常显、轨道类型切换
     * - 通过 CSS 变量覆盖或直接覆盖内部类名实现“完全自主”的样式定制
     */
    interface LdesignScrollbar {
        /**
          * 是否一直显示（默认悬浮显示）
          * @default false
         */
        "always"?: boolean;
        /**
          * 自动隐藏延迟（ms）。<=0 表示不自动隐藏（与 always 类似，但 hover 仍会显示）
          * @default 800
         */
        "autoHideDelay"?: number;
        /**
          * 方向：vertical | horizontal | both
          * @default 'both'
         */
        "direction"?: 'vertical' | 'horizontal' | 'both';
        /**
          * 是否禁用滚动交互
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 拖拽滚动（鼠标中键，或按住 Alt+左键）
          * @default false
         */
        "dragScroll"?: boolean;
        /**
          * 拖拽触发方式：middle（中键）| left-alt（Alt+左键）| left（左键）
          * @default 'middle'
         */
        "dragScrollTrigger"?: 'middle' | 'left-alt' | 'left';
        /**
          * 水平条位置：bottom | top
          * @default 'bottom'
         */
        "hPosition"?: 'bottom' | 'top';
        "initialScrollLeft"?: number;
        /**
          * 初始滚动位置（可选）
         */
        "initialScrollTop"?: number;
        /**
          * 键盘步进（像素）
          * @default 40
         */
        "keyStep"?: number;
        /**
          * 是否启用键盘控制（wrap 聚焦时）
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 布局：overlay 叠加在内容之上；space 预留滚动条空间
          * @default 'overlay'
         */
        "layout"?: 'overlay' | 'space';
        /**
          * 使用原生滚动条，不渲染自定义轨道/拇指并且不隐藏系统滚动条
          * @default false
         */
        "native"?: boolean;
        /**
          * 触达边缘事件
         */
        "onLdesignReach"?: (event: LdesignScrollbarCustomEvent<{ edge: 'top' | 'bottom' | 'left' | 'right' }>) => void;
        /**
          * 滚动事件（代理自内容容器）
         */
        "onLdesignScroll"?: (event: LdesignScrollbarCustomEvent<{ scrollTop: number; scrollLeft: number; clientWidth: number; clientHeight: number; scrollWidth: number; scrollHeight: number }>) => void;
        "onLdesignScrollEnd"?: (event: LdesignScrollbarCustomEvent<void>) => void;
        /**
          * 滚动开始/结束
         */
        "onLdesignScrollStart"?: (event: LdesignScrollbarCustomEvent<void>) => void;
        /**
          * PageUp/PageDown 的步进（像素），<=0 时按可视高度
          * @default 0
         */
        "pageStep"?: number;
        /**
          * RTL 文字方向（用于水平滚动与 scrollLeft 归一化）
          * @default false
         */
        "rtl"?: boolean;
        /**
          * 显示滚动阴影，提示可滚动方向
          * @default false
         */
        "shadows"?: boolean;
        /**
          * 是否显示微调按钮（上下/左右）
          * @default false
         */
        "showButtons"?: boolean;
        /**
          * 平滑滚动
          * @default false
         */
        "smooth"?: boolean;
        /**
          * @default 120
         */
        "snapDelay"?: number;
        /**
          * @default true
         */
        "snapEnabled"?: boolean;
        /**
          * @default 'start'
         */
        "snapMode"?: 'start' | 'center' | 'end';
        /**
          * 吸附：滚动结束后吸附到最近匹配元素
         */
        "snapSelector"?: string;
        /**
          * @default 0
         */
        "stickyBottom"?: number;
        /**
          * sticky 偏移（用于阴影起始位置）
          * @default 0
         */
        "stickyTop"?: number;
        /**
          * @default 'both'
         */
        "syncAxis"?: 'vertical' | 'horizontal' | 'both';
        /**
          * @default true
         */
        "syncEnabled"?: boolean;
        /**
          * 同步滚动组与轴
         */
        "syncGroup"?: string;
        /**
          * @default 32
         */
        "syncThrottle"?: number;
        /**
          * 最小拇指尺寸（px）
          * @default 24
         */
        "thumbMinSize"?: number;
        /**
          * 滚动条类型：bar（仅拇指）| track（显示轨道）
          * @default 'bar'
         */
        "type"?: 'bar' | 'track';
        /**
          * 垂直条位置：right | left
          * @default 'right'
         */
        "vPosition"?: 'right' | 'left';
        /**
          * 滚轮事件是否允许向父容器传播（到达边缘时总是允许）
          * @default false
         */
        "wheelPropagation"?: boolean;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface LdesignSelect {
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow"?: boolean;
        /**
          * 可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 选中项后是否自动关闭（默认：单选 true，多选 false）
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight"?: number;
        /**
          * 多选时最多展示的标签数量，超过后折叠为 +N
         */
        "maxTagCount"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple"?: boolean;
        /**
          * 选中变化事件
         */
        "onLdesignChange"?: (event: LdesignSelectCustomEvent<{ value: string | string[] | undefined; options: SelectOption[] }>) => void;
        /**
          * 对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignSelectCustomEvent<boolean>) => void;
        /**
          * 选项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "options"?: string | SelectOption[];
        /**
          * 占位文案（无选中项时）
          * @default '请选择'
         */
        "placeholder"?: string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement"?: SelectPlacement;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（Select 多数使用 click 或 manual）
          * @default 'click'
         */
        "trigger"?: SelectTrigger;
        /**
          * 值（受控）。单选时为 string，多选时为 string[]
         */
        "value"?: string | string[];
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible"?: boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface LdesignSlider {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 最大值
          * @default 100
         */
        "max"?: number;
        /**
          * 最小值
          * @default 0
         */
        "min"?: number;
        /**
          * 值改变后触发（释放拖动或点击轨道）
         */
        "onLdesignChange"?: (event: LdesignSliderCustomEvent<number>) => void;
        /**
          * 拖动时实时触发
         */
        "onLdesignInput"?: (event: LdesignSliderCustomEvent<number>) => void;
        /**
          * 是否显示当前值提示
          * @default false
         */
        "showTooltip"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 步长（> 0）
          * @default 1
         */
        "step"?: number;
        /**
          * 当前值
          * @default 0
         */
        "value"?: number;
        /**
          * 是否垂直方向
          * @default false
         */
        "vertical"?: boolean;
    }
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface LdesignSpace {
        /**
          * 交叉轴对齐方式
          * @default 'center'
         */
        "align"?: 'start' | 'center' | 'end' | 'baseline';
        /**
          * 是否占满容器宽度
          * @default false
         */
        "block"?: boolean;
        /**
          * 是否自动换行（仅在横向时有效）
          * @default false
         */
        "breakLine"?: boolean;
        /**
          * 间距方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 间距尺寸。可选预设：small | medium | large；也可传数字，单位为 px
          * @default 'medium'
         */
        "size"?: Size | number | string;
        /**
          * 分隔符样式：none 不显示分隔符；line 使用 1px 分隔线
          * @default 'none'
         */
        "split"?: 'none' | 'line';
    }
    /**
     * Split 面板分割
     * 将容器分为左右（vertical）或上下（horizontal）两部分，通过拖拽中间分割条调整比例。
     * - 组件名：<ldesign-split>
     * - 方向：vertical（左右）| horizontal（上下）
     * - 比例：value（0~1），表示起始面板所占比例。拖拽过程中会回写。
     * - 约束：firstMin / secondMin 用于限制两侧最小尺寸（px）。
     * - 事件：ldesignSplitStart / ldesignSplit / ldesignSplitEnd
     */
    interface LdesignSplit {
        /**
          * 折叠状态下是否允许通过拖拽恢复
          * @default true
         */
        "allowDragExpandWhenCollapsed"?: boolean;
        /**
          * 折叠状态：none | start | end
          * @default 'none'
         */
        "collapsed"?: 'none' | 'start' | 'end';
        /**
          * 折叠后保留的尺寸（px）
          * @default 0
         */
        "collapsedSize"?: number;
        /**
          * 是否显示快捷折叠按钮
          * @default false
         */
        "collapsible"?: boolean;
        /**
          * 分割方向：vertical=左右，horizontal=上下
          * @default 'vertical'
         */
        "direction"?: 'vertical' | 'horizontal';
        /**
          * 是否禁用拖拽
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 起始/末尾面板的最小尺寸（px）
          * @default 80
         */
        "firstMin"?: number;
        "onLdesignSplit"?: (event: LdesignSplitCustomEvent<{ value: number; direction: 'vertical' | 'horizontal' }>) => void;
        /**
          * 折叠切换事件
         */
        "onLdesignSplitCollapse"?: (event: LdesignSplitCustomEvent<{ side: 'none' | 'start' | 'end' }>) => void;
        "onLdesignSplitEnd"?: (event: LdesignSplitCustomEvent<{ value: number; direction: 'vertical' | 'horizontal' }>) => void;
        /**
          * 拖拽事件
         */
        "onLdesignSplitStart"?: (event: LdesignSplitCustomEvent<{ value: number; direction: 'vertical' | 'horizontal' }>) => void;
        /**
          * @default 80
         */
        "secondMin"?: number;
        /**
          * 分割条厚度（px）
          * @default 6
         */
        "splitterSize"?: number;
        /**
          * 起始面板比例（0~1）。拖拽过程中会以小数写回
          * @default 0.5
         */
        "value"?: number;
    }
    /**
     * ldesign-swiper 轮播图组件
     * 功能：
     * - 受控/非受控当前索引（value/defaultValue）
     * - 自动播放（autoplay + autoplayDelay + pauseOnHover + disableOnInteraction）
     * - 循环（loop）
     * - 导航按钮（navigation）
     * - 分页圆点（pagination）
     * - 触摸/鼠标拖拽切换（allowTouchMove + mouseDrag + threshold）
     * - 键盘控制（keyboard）
     * - 水平/垂直方向（direction）
     * - 每屏多项显示（slidesPerView + spaceBetween）
     * - 公共方法（next/prev/slideTo/update）
     */
    interface LdesignSwiper {
        /**
          * 允许触摸/鼠标拖拽
          * @default true
         */
        "allowTouchMove"?: boolean;
        /**
          * 自动播放
          * @default false
         */
        "autoplay"?: boolean;
        /**
          * 自动播放间隔（毫秒）
          * @default 3000
         */
        "autoplayDelay"?: number;
        /**
          * 默认激活索引（非受控）
         */
        "defaultValue"?: number;
        /**
          * 方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 交互后是否禁用自动播放
          * @default true
         */
        "disableOnInteraction"?: boolean;
        /**
          * 拖拽时显示抓手光标
          * @default true
         */
        "grabCursor"?: boolean;
        /**
          * 键盘控制
          * @default false
         */
        "keyboard"?: boolean;
        /**
          * 循环播放
          * @default false
         */
        "loop"?: boolean;
        /**
          * 鼠标拖拽（PC）
          * @default true
         */
        "mouseDrag"?: boolean;
        /**
          * 是否显示导航按钮
          * @default true
         */
        "navigation"?: boolean;
        /**
          * 切换事件：返回当前索引
         */
        "onLdesignChange"?: (event: LdesignSwiperCustomEvent<number>) => void;
        /**
          * 是否显示分页圆点
          * @default true
         */
        "pagination"?: boolean;
        /**
          * 悬浮暂停自动播放
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 每屏显示的滑块数量（>=1）
          * @default 1
         */
        "slidesPerView"?: number;
        /**
          * 滑块间距（像素）
          * @default 0
         */
        "spaceBetween"?: number;
        /**
          * 动画过渡时长（毫秒）
          * @default 300
         */
        "speed"?: number;
        /**
          * 触发切换的拖拽阈值（像素）
          * @default 50
         */
        "threshold"?: number;
        /**
          * 当前激活的索引（受控）
         */
        "value"?: number;
    }
    /**
     * ldesign-swiper-slide
     * - Swiper 的子项容器，支持 active 状态用于样式控制
     */
    interface LdesignSwiperSlide {
        /**
          * 激活态（由父级 ldesign-swiper 控制）
          * @default false
         */
        "active"?: boolean;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color"?: 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignSwitchCustomEvent<string | number | boolean>) => void;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape"?: 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant"?: 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface LdesignTabPanel {
        /**
          * 由父组件控制的激活状态（反射到属性便于样式控制）
          * @default false
         */
        "active"?: boolean;
        /**
          * 徽标
         */
        "badge"?: string | number;
        /**
          * 是否可关闭（在标签上显示关闭按钮）
          * @default false
         */
        "closable"?: boolean;
        /**
          * 销毁隐藏：在面板隐藏时销毁内容，再次显示时重新渲染
          * @default false
         */
        "destroyOnHide"?: boolean;
        /**
          * 禁用状态（不可被激活）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 图标
         */
        "icon"?: string;
        /**
          * 标签显示文本
         */
        "label": string;
        /**
          * 懒渲染：首次激活时才渲染插槽内容，之后保持渲染
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 加载中状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 面板唯一标识（用于匹配激活项）
         */
        "name": string;
        /**
          * 面板销毁事件
         */
        "onLdesignPanelDestroy"?: (event: LdesignTabPanelCustomEvent<void>) => void;
        /**
          * 面板加载完成事件
         */
        "onLdesignPanelLoad"?: (event: LdesignTabPanelCustomEvent<void>) => void;
        /**
          * 过渡动画类型
          * @default 'fade'
         */
        "transition"?: 'fade' | 'slide' | 'zoom' | 'none';
        /**
          * 过渡动画时长（毫秒）
          * @default 300
         */
        "transitionDuration"?: number;
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface LdesignTabs {
        /**
          * 是否显示新增按钮
          * @default false
         */
        "addable"?: boolean;
        /**
          * 动画过渡时长（毫秒）
          * @default 300
         */
        "animationDuration"?: number;
        /**
          * 默认激活的标签（非受控）
         */
        "defaultValue"?: string;
        /**
          * 点击新增按钮
         */
        "onLdesignAdd"?: (event: LdesignTabsCustomEvent<void>) => void;
        /**
          * 切换事件（返回激活的 name）
         */
        "onLdesignChange"?: (event: LdesignTabsCustomEvent<string>) => void;
        /**
          * 点击关闭某个面板
         */
        "onLdesignRemove"?: (event: LdesignTabsCustomEvent<{ name: string }>) => void;
        /**
          * 拖拽排序
         */
        "onLdesignReorder"?: (event: LdesignTabsCustomEvent<{ items: TabMeta[] }>) => void;
        /**
          * 选项卡位置
          * @default 'top'
         */
        "placement"?: TabsPlacement;
        /**
          * 是否自动适应响应式布局
          * @default true
         */
        "responsive"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 是否可拖拽排序
          * @default false
         */
        "sortable"?: boolean;
        /**
          * 是否启用触摸滑动切换
          * @default false
         */
        "swipeable"?: boolean;
        /**
          * 选项卡外观类型
          * @default 'line'
         */
        "type"?: TabsType;
        /**
          * 是否隐藏超出部分的标签页（使用更多下拉菜单）
          * @default false
         */
        "useDropdown"?: boolean;
        /**
          * 当前激活的标签（受控）
         */
        "value"?: string;
    }
    /**
     * Tag 标签组件
     * 用于标记和分类
     */
    interface LdesignTag {
        /**
          * 右上角数字/文本角标
         */
        "badge"?: string | number;
        /**
          * 右上角角标脉动效果
          * @default false
         */
        "badgePulse"?: boolean;
        /**
          * 是否显示边框动画（仅在 checkable 或 clickable 时有效）
          * @default false
         */
        "borderAnimation"?: boolean;
        /**
          * 是否可选（切换选中态）
          * @default false
         */
        "checkable"?: boolean;
        /**
          * 是否可点击（非选中态），用于标签作为动作的场景
          * @default false
         */
        "clickable"?: boolean;
        /**
          * 是否可关闭
          * @default false
         */
        "closable"?: boolean;
        /**
          * 关闭按钮的无障碍文案
          * @default '关闭标签'
         */
        "closeAriaLabel"?: string;
        /**
          * 语义颜色
          * @default 'default'
         */
        "color"?: 'default' | 'primary' | 'success' | 'warning' | 'danger';
        /**
          * 自定义主色（hex/rgb/hsl）。设置后将覆盖 color 的预设色
         */
        "customColor"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 右上角小圆点
          * @default false
         */
        "dot"?: boolean;
        /**
          * 效果风格：none（默认）、gradient（渐变）、glass（毛玻璃）、neon（霓虹）
          * @default 'none'
         */
        "effect"?: 'none' | 'gradient' | 'glass' | 'neon';
        /**
          * 左侧图标
         */
        "icon"?: string;
        /**
          * 加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 选中状态变化事件（仅当 checkable 为 true 时触发）
         */
        "onLdesignChange"?: (event: LdesignTagCustomEvent<boolean>) => void;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignTagCustomEvent<MouseEvent>) => void;
        /**
          * 选中状态（与 checkable 配合使用）
          * @default false
         */
        "selected"?: boolean;
        /**
          * 形状（rectangle：直角；round：全圆角；pill：胶囊）
          * @default 'rectangle'
         */
        "shape"?: 'rectangle' | 'round' | 'pill';
        /**
          * 尺寸（small/middle/large，兼容 medium）
          * @default 'middle'
         */
        "size"?: Size;
        /**
          * 外观风格 - light: 浅色背景（默认） - solid: 实底 - outline: 描边 - ghost: 透明背景，悬停有轻微填充 - dashed: 虚线描边 - elevated: 浅色+阴影
          * @default 'light'
         */
        "variant"?: 'light' | 'solid' | 'outline' | 'ghost' | 'dashed' | 'elevated';
    }
    /**
     * TagGroup 标签组
     * - 支持拖拽排序
     * - 支持动态添加标签
     * - overflow="scroll" 提供横向滚动和可选箭头
     * - overflow="more" 根据 maxVisible 折叠为 +N
     */
    interface LdesignTagGroup {
        /**
          * 添加按钮文本
          * @default '+ 添加标签'
         */
        "addText"?: string;
        /**
          * 是否显示添加按钮
          * @default false
         */
        "addable"?: boolean;
        /**
          * 新标签默认颜色
          * @default 'default'
         */
        "defaultColor"?: 'default' | 'primary' | 'success' | 'warning' | 'danger';
        /**
          * 新标签默认样式
          * @default 'light'
         */
        "defaultVariant"?: 'light' | 'solid' | 'outline' | 'ghost' | 'dashed' | 'elevated';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否启用拖拽排序
          * @default false
         */
        "enableDrag"?: boolean;
        /**
          * 输入框占位符
          * @default '请输入标签名'
         */
        "inputPlaceholder"?: string;
        /**
          * more 模式下最多展示的项数（超出将折叠）
          * @default 5
         */
        "maxVisible"?: number;
        /**
          * more 展示文本前缀，例如 "+"
          * @default '+'
         */
        "morePrefix"?: string;
        /**
          * 标签添加事件
         */
        "onLdesignAdd"?: (event: LdesignTagGroupCustomEvent<{ label: string; id: string }>) => void;
        /**
          * 标签顺序改变事件
         */
        "onLdesignChange"?: (event: LdesignTagGroupCustomEvent<TagData[]>) => void;
        /**
          * 标签删除事件
         */
        "onLdesignRemove"?: (event: LdesignTagGroupCustomEvent<{ tag: TagData; index: number }>) => void;
        /**
          * 溢出策略：wrap（自动换行） | more（+N 收纳）
          * @default 'wrap'
         */
        "overflow"?: 'wrap' | 'more';
        /**
          * 标签数据（受控模式）
          * @default []
         */
        "tags"?: TagData[];
    }
    interface LdesignTimePicker {
        "breakpoints"?: Breakpoints1;
        /**
          * @default false
         */
        "clearable"?: boolean;
        /**
          * @default true
         */
        "confirm"?: boolean;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "disabledHours"?: number[];
        "disabledMinutes"?: number[];
        "disabledSeconds"?: number[];
        /**
          * @default 'bottom'
         */
        "drawerPlacement"?: 'left' | 'right' | 'top' | 'bottom';
        "drawerSize"?: number | string;
        "drawerTitle"?: string;
        "endValue"?: string;
        /**
          * @default 1
         */
        "hourStep"?: number;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "loading"?: boolean;
        "locale"?: TimePickerLocale;
        "maxTime"?: string;
        "minTime"?: string;
        /**
          * @default 1
         */
        "minuteStep"?: number;
        "onLdesignChange"?: (event: LdesignTimePickerCustomEvent<string | undefined | { start: string; end: string }>) => void;
        "onLdesignClose"?: (event: LdesignTimePickerCustomEvent<void>) => void;
        "onLdesignOpen"?: (event: LdesignTimePickerCustomEvent<void>) => void;
        "onLdesignPick"?: (event: LdesignTimePickerCustomEvent<{ value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' | 'clear' | 'preset' | 'touch' | 'wheel' } }>) => void;
        "onLdesignVisibleChange"?: (event: LdesignTimePickerCustomEvent<boolean>) => void;
        /**
          * @default '24h'
         */
        "outputFormat"?: '12h' | '24h';
        /**
          * @default 'auto'
         */
        "overlay"?: TimePickerOverlay;
        "panelHeight"?: number;
        /**
          * @default '选择时间'
         */
        "placeholder"?: string;
        /**
          * @default 'bottom-start' as Placement
         */
        "placement"?: Placement;
        "presets"?: TimePreset[];
        /**
          * @default false
         */
        "range"?: boolean;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default 1
         */
        "secondStep"?: number;
        /**
          * 是否展示"此刻"快捷按钮
          * @default true
         */
        "showNow"?: boolean;
        /**
          * @default true
         */
        "showSeconds"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: TimePickerSize;
        "startValue"?: string;
        /**
          * @default [1, 1, 1]
         */
        "steps"?: number[];
        /**
          * @default 'click'
         */
        "trigger"?: TimePickerTrigger;
        "value"?: string;
        /**
          * @default false
         */
        "visible"?: boolean;
        /**
          * @default 5
         */
        "visibleItems"?: number;
    }
    /**
     * Tooltip 工具提示组件
     * 基于最新 Popup 的轻量封装，继承所有新特性
     */
    interface LdesignTooltip {
        /**
          * 动画类型
          * @default 'scale'
         */
        "animation"?: TooltipAnimation;
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 自动关闭延迟
          * @default 0
         */
        "autoCloseDelay"?: number;
        /**
          * 是否显示关闭按钮（仅click触发时有效）
          * @default false
         */
        "closable"?: boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay"?: number;
        /**
          * 是否可交互（hover时鼠标可以移入tooltip）
          * @default false
         */
        "interactive"?: boolean;
        /**
          * 是否在滚动时锁定位置
          * @default false
         */
        "lockOnScroll"?: boolean;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth"?: number | string;
        /**
          * 动画位移距离
          * @default 10
         */
        "motionDistance"?: number;
        /**
          * 动画时长
          * @default 200
         */
        "motionDuration"?: number;
        /**
          * 与触发元素的间距
          * @default 8
         */
        "offsetDistance"?: number | string;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement"?: TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay"?: number;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: TooltipSize;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme"?: 'dark' | 'light';
        /**
          * 自定义类名
         */
        "tooltipClass"?: string;
        /**
          * 标题（可选）
         */
        "tooltipTitle"?: string;
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger"?: TooltipTrigger;
        /**
          * 是否受控显示
          * @default false
         */
        "visible"?: boolean;
        /**
          * 宽度（覆盖maxWidth）
         */
        "width"?: number | string;
    }
    /**
     * Transfer 穿梭框
     * 支持左右两栏列表，通过按钮将条目在两侧移动。
     */
    interface LdesignTransfer {
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string[];
        /**
          * 禁用整个组件
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否可搜索
          * @default false
         */
        "filterable"?: boolean;
        /**
          * 数据源（可传数组或 JSON 字符串）
          * @default []
         */
        "items"?: string | TransferItem[];
        /**
          * 左侧面板标题
          * @default '源列表'
         */
        "leftTitle"?: string;
        /**
          * 列表高度（px）
          * @default 240
         */
        "listHeight"?: number;
        /**
          * 值改变事件
         */
        "onLdesignChange"?: (event: LdesignTransferCustomEvent<{ value: string[]; movedKeys: string[]; direction: 'left' | 'right' }>) => void;
        /**
          * 右侧面板标题
          * @default '目标列表'
         */
        "rightTitle"?: string;
        /**
          * 目标列表值（受控）
         */
        "value"?: string[];
    }
    interface LdesignTree {
        /**
          * @default true
         */
        "allowAfter"?: boolean;
        /**
          * 全局允许放置位置
          * @default true
         */
        "allowBefore"?: boolean;
        /**
          * 自定义：是否允许拖拽该节点（JS 赋值）
         */
        "allowDrag"?: (node: TreeNode) => boolean;
        /**
          * 自定义：是否允许在目标位置放置（JS 赋值）
         */
        "allowDrop"?: (dragNode: TreeNode, dropNode: TreeNode, position: 'before' | 'after' | 'inside') => boolean;
        /**
          * @default true
         */
        "allowInside"?: boolean;
        /**
          * 是否显示复选框
          * @default false
         */
        "checkable"?: boolean;
        /**
          * 当前勾选项（受控）
         */
        "checkedKeys"?: string[] | string;
        /**
          * 远程数据 URL（根或子节点懒加载）
         */
        "dataUrl"?: string;
        /**
          * 默认勾选项（非受控）
          * @default []
         */
        "defaultCheckedKeys"?: string[] | string;
        /**
          * 默认展开项（非受控）
          * @default []
         */
        "defaultExpandedKeys"?: string[] | string;
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 拖拽悬停自动展开的延迟（毫秒）
          * @default 400
         */
        "dragExpandDelay"?: number;
        /**
          * 当前展开项（受控）
         */
        "expandedKeys"?: string[] | string;
        /**
          * 字段映射：当后端字段名非 key/label/children/isLeaf 等时可用；支持 JSON 字符串或对象（JS 赋值）
         */
        "fieldMap"?: string | { key: string; label: string; children?: string; isLeaf?: string; disabled?: string; icon?: string };
        /**
          * 层级缩进（px）
          * @default 16
         */
        "indent"?: number;
        /**
          * 树数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items"?: string | TreeNode[];
        /**
          * 选择器：读取 <script type="application/json"> 的数据
         */
        "itemsSelector"?: string;
        /**
          * 启用懒加载：展开时若无 children 则触发加载
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 可通过 JS 赋值：自定义加载函数
         */
        "loadData"?: (node?: TreeNode | undefined) => Promise<TreeNode[]>;
        /**
          * 限制最大层级深度（根为 depth=1）；未设置则不限制
         */
        "maxDepth"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple"?: boolean;
        /**
          * 是否开启节点拖拽重排
          * @default false
         */
        "nodeDraggable"?: boolean;
        /**
          * 勾选事件（包含半选）
         */
        "onLdesignCheck"?: (event: LdesignTreeCustomEvent<{ key: string; checked: boolean; checkedKeys: string[]; halfCheckedKeys: string[] }>) => void;
        /**
          * 拖拽放置事件（也用于键盘重排时回调）
         */
        "onLdesignDrop"?: (event: LdesignTreeCustomEvent<{ dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] }>) => void;
        /**
          * 展开/收起事件
         */
        "onLdesignExpand"?: (event: LdesignTreeCustomEvent<{ key: string; expanded: boolean; expandedKeys: string[] }>) => void;
        /**
          * 键盘重排事件（与 drop 事件区分来源）
         */
        "onLdesignMove"?: (event: LdesignTreeCustomEvent<{ dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] }>) => void;
        /**
          * 选中事件
         */
        "onLdesignSelect"?: (event: LdesignTreeCustomEvent<{ key: string; keys: string[]; node?: TreeNode }>) => void;
        /**
          * 懒加载参数名（dataUrl 模式下）：父键参数
          * @default 'parent'
         */
        "parentParam"?: string;
        /**
          * 是否启用键盘重排（Alt+方向键）
          * @default true
         */
        "reorderable"?: boolean;
        /**
          * 是否可选择（高亮）
          * @default true
         */
        "selectable"?: boolean;
        /**
          * 是否显示连接线（简易）
          * @default false
         */
        "showLine"?: boolean;
        /**
          * 可通过 JS 赋值：转换函数，将接口原始数据转换为 TreeNode[]
         */
        "transform"?: (raw: any) => TreeNode[];
        /**
          * 当前选中项（受控，单选为 string，多选为 string[]）
         */
        "value"?: string | string[];
    }
    interface IntrinsicElements {
        "base-component": BaseComponent;
        "l-dropdown-panel": LDropdownPanel;
        "ldesign-affix": LdesignAffix;
        "ldesign-alert": LdesignAlert;
        "ldesign-avatar": LdesignAvatar;
        "ldesign-avatar-group": LdesignAvatarGroup;
        "ldesign-backtop": LdesignBacktop;
        "ldesign-button": LdesignButton;
        "ldesign-calendar": LdesignCalendar;
        "ldesign-cascader": LdesignCascader;
        "ldesign-checkbox": LdesignCheckbox;
        "ldesign-checkbox-group": LdesignCheckboxGroup;
        "ldesign-circle-navigation": LdesignCircleNavigation;
        "ldesign-col": LdesignCol;
        "ldesign-collapse": LdesignCollapse;
        "ldesign-collapse-panel": LdesignCollapsePanel;
        "ldesign-color-input": LdesignColorInput;
        "ldesign-color-picker": LdesignColorPicker;
        "ldesign-color-picker-panel": LdesignColorPickerPanel;
        "ldesign-countdown": LdesignCountdown;
        "ldesign-date-picker": LdesignDatePicker;
        "ldesign-draggable": LdesignDraggable;
        "ldesign-drawer": LdesignDrawer;
        "ldesign-dropdown": LdesignDropdown;
        "ldesign-ellipsis": LdesignEllipsis;
        "ldesign-grid": LdesignGrid;
        "ldesign-grid-item": LdesignGridItem;
        "ldesign-icon": LdesignIcon;
        "ldesign-image": LdesignImage;
        "ldesign-image-group": LdesignImageGroup;
        "ldesign-image-preview": LdesignImagePreview;
        "ldesign-image-viewer": LdesignImageViewer;
        "ldesign-input": LdesignInput;
        "ldesign-input-number": LdesignInputNumber;
        "ldesign-loading": LdesignLoading;
        "ldesign-mention": LdesignMention;
        "ldesign-menu": LdesignMenu;
        "ldesign-message": LdesignMessage;
        "ldesign-modal": LdesignModal;
        "ldesign-notification": LdesignNotification;
        "ldesign-pagination": LdesignPagination;
        "ldesign-picker": LdesignPicker;
        "ldesign-popconfirm": LdesignPopconfirm;
        "ldesign-popup": LdesignPopup;
        "ldesign-progress": LdesignProgress;
        "ldesign-radio": LdesignRadio;
        "ldesign-radio-group": LdesignRadioGroup;
        "ldesign-rate": LdesignRate;
        "ldesign-resize-box": LdesignResizeBox;
        "ldesign-ripple": LdesignRipple;
        "ldesign-row": LdesignRow;
        "ldesign-scrollbar": LdesignScrollbar;
        "ldesign-select": LdesignSelect;
        "ldesign-slider": LdesignSlider;
        "ldesign-space": LdesignSpace;
        "ldesign-split": LdesignSplit;
        "ldesign-swiper": LdesignSwiper;
        "ldesign-swiper-slide": LdesignSwiperSlide;
        "ldesign-switch": LdesignSwitch;
        "ldesign-tab-panel": LdesignTabPanel;
        "ldesign-tabs": LdesignTabs;
        "ldesign-tag": LdesignTag;
        "ldesign-tag-group": LdesignTagGroup;
        "ldesign-time-picker": LdesignTimePicker;
        "ldesign-tooltip": LdesignTooltip;
        "ldesign-transfer": LdesignTransfer;
        "ldesign-tree": LdesignTree;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * 组件基类
             * 提供通用的属性和方法
             */
            "base-component": LocalJSX.BaseComponent & JSXBase.HTMLAttributes<HTMLBaseComponentElement>;
            "l-dropdown-panel": LocalJSX.LDropdownPanel & JSXBase.HTMLAttributes<HTMLLDropdownPanelElement>;
            /**
             * Affix 固钉组件
             * - 将元素固定在页面（或指定滚动容器）顶部
             * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
             */
            "ldesign-affix": LocalJSX.LdesignAffix & JSXBase.HTMLAttributes<HTMLLdesignAffixElement>;
            /**
             * Alert 警告信息
             * 用于在页面中展示重要的提示信息，支持多种状态、样式变体、尺寸、标题/描述、操作区与可关闭。
             */
            "ldesign-alert": LocalJSX.LdesignAlert & JSXBase.HTMLAttributes<HTMLLdesignAlertElement>;
            /**
             * Avatar 头像
             * - 三种展示形态：图片、图标、文字
             * - 三种尺寸：small / medium / large，或自定义像素
             * - 两种形状：circle / square
             * - 文本头像自动缩放，支持 gap 调节左右留白
             * - 支持徽标（红点或计数）
             * - 支持响应式尺寸（clamp）
             */
            "ldesign-avatar": LocalJSX.LdesignAvatar & JSXBase.HTMLAttributes<HTMLLdesignAvatarElement>;
            /**
             * Avatar.Group 头像组合
             * - 支持溢出显示 +N
             * - 支持统一 size/shape
             * - 支持重叠间距（gap）
             */
            "ldesign-avatar-group": LocalJSX.LdesignAvatarGroup & JSXBase.HTMLAttributes<HTMLLdesignAvatarGroupElement>;
            /**
             * BackTop 返回顶部组件
             * - 支持窗口根滚动回到顶部
             * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
             * - 支持设置滚动动画速度（px/s）
             */
            "ldesign-backtop": LocalJSX.LdesignBacktop & JSXBase.HTMLAttributes<HTMLLdesignBacktopElement>;
            /**
             * Button 按钮组件
             * 基于 Ant Design 按钮组件架构重构
             * 提供多种类型、尺寸、状态的按钮
             */
            "ldesign-button": LocalJSX.LdesignButton & JSXBase.HTMLAttributes<HTMLLdesignButtonElement>;
            "ldesign-calendar": LocalJSX.LdesignCalendar & JSXBase.HTMLAttributes<HTMLLdesignCalendarElement>;
            /**
             * ldesign-cascader
             * - PC: 多层级 popup (每层独立弹出)
             * - Mobile: drawer (auto by viewport width; can be forced by overlay prop)
             */
            "ldesign-cascader": LocalJSX.LdesignCascader & JSXBase.HTMLAttributes<HTMLLdesignCascaderElement>;
            /**
             * Checkbox 复选框组件
             * 在一组备选项中进行多选
             */
            "ldesign-checkbox": LocalJSX.LdesignCheckbox & JSXBase.HTMLAttributes<HTMLLdesignCheckboxElement>;
            /**
             * CheckboxGroup 复选框组组件
             * 管理一组复选框的状态
             */
            "ldesign-checkbox-group": LocalJSX.LdesignCheckboxGroup & JSXBase.HTMLAttributes<HTMLLdesignCheckboxGroupElement>;
            /**
             * CircleNavigation 圆形导航组件
             * 支持通过 width/height 控制圆的尺寸，默认正上方为第一个元素
             */
            "ldesign-circle-navigation": LocalJSX.LdesignCircleNavigation & JSXBase.HTMLAttributes<HTMLLdesignCircleNavigationElement>;
            /**
             * Col 列
             * - 作为 ldesign-row 的子项，通过 span 指定跨列数
             * - 会观察父 Row 或祖先 Grid 的 cols 变化以自适应
             */
            "ldesign-col": LocalJSX.LdesignCol & JSXBase.HTMLAttributes<HTMLLdesignColElement>;
            /**
             * Collapse 折叠面板
             * - 支持受控/非受控、手风琴模式、动画、禁用
             * - 支持尺寸变体、主题、展开/收起全部、嵌套等高级功能
             */
            "ldesign-collapse": LocalJSX.LdesignCollapse & JSXBase.HTMLAttributes<HTMLLdesignCollapseElement>;
            /**
             * CollapsePanel 折叠面板项
             */
            "ldesign-collapse-panel": LocalJSX.LdesignCollapsePanel & JSXBase.HTMLAttributes<HTMLLdesignCollapsePanelElement>;
            /**
             * ColorInput 颜色输入（内置 Popup + ColorPicker）
             * - 点击触发显示颜色选择面板
             * - 支持透明度/预设/最近使用
             */
            "ldesign-color-input": LocalJSX.LdesignColorInput & JSXBase.HTMLAttributes<HTMLLdesignColorInputElement>;
            /**
             * ColorPicker 颜色选择器
             * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
             * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
             */
            "ldesign-color-picker": LocalJSX.LdesignColorPicker & JSXBase.HTMLAttributes<HTMLLdesignColorPickerElement>;
            /**
             * ColorPicker Panel 纯面板
             * - 不包含 Popup/触发器，仅渲染颜色选择面板
             * - 适合内嵌在任意容器，宽度默认铺满容器
             */
            "ldesign-color-picker-panel": LocalJSX.LdesignColorPickerPanel & JSXBase.HTMLAttributes<HTMLLdesignColorPickerPanelElement>;
            /**
             * Countdown 倒计时组件
             * 支持按结束时间或时长倒计时，提供格式化显示、事件与方法控制
             */
            "ldesign-countdown": LocalJSX.LdesignCountdown & JSXBase.HTMLAttributes<HTMLLdesignCountdownElement>;
            "ldesign-date-picker": LocalJSX.LdesignDatePicker & JSXBase.HTMLAttributes<HTMLLdesignDatePickerElement>;
            /**
             * ldesign-draggable
             * 通用可拖拽/缩放/旋转容器（图片优先），支持：
             * - PC：滚轮缩放、拖拽平移、双击 1x/2x 切换
             * - 移动端：双指缩放+旋转、单指平移、松手回弹、动量滚动
             * 用法：
             * 1) 直接传入 src 渲染图片
             *    <ldesign-draggable src="/big.jpg" style="width:100%;height:100%" />
             * 2) 插槽自定义内容（若无 src）：
             *    <ldesign-draggable style="width:100%;height:100%">
             *      <img src="/big.jpg" />
             *    </ldesign-draggable>
             */
            "ldesign-draggable": LocalJSX.LdesignDraggable & JSXBase.HTMLAttributes<HTMLLdesignDraggableElement>;
            "ldesign-drawer": LocalJSX.LdesignDrawer & JSXBase.HTMLAttributes<HTMLLdesignDrawerElement>;
            /**
             * Dropdown 下拉菜单（PC 级联 + 移动端单列）
             * 兼容鼠标和触屏，默认根据指针类型自适应（variant=auto）。
             */
            "ldesign-dropdown": LocalJSX.LdesignDropdown & JSXBase.HTMLAttributes<HTMLLdesignDropdownElement>;
            /**
             * ldesign-ellipsis 文本省略/展开组件
             * - 折叠时按指定行数展示，右下角显示"更多"按钮
             * - 展开后：若最后一行还有空间，则"收起"出现在最后一行最右侧；否则换到下一行右侧
             * - 兼容 PC 与移动端，按钮有较大点击热区
             */
            "ldesign-ellipsis": LocalJSX.LdesignEllipsis & JSXBase.HTMLAttributes<HTMLLdesignEllipsisElement>;
            /**
             * Grid 容器（grid -> grid-item 用法）
             * - 在内部通过计算为每个 grid-item 设置明确的行/列位置与跨度
             * - 支持设置每行列数与横纵间距
             */
            "ldesign-grid": LocalJSX.LdesignGrid & JSXBase.HTMLAttributes<HTMLLdesignGridElement>;
            /**
             * Grid 子项
             * - 通过 span 指定跨越列数
             * - 根据父容器的 cols 自动限制最大跨度
             */
            "ldesign-grid-item": LocalJSX.LdesignGridItem & JSXBase.HTMLAttributes<HTMLLdesignGridItemElement>;
            /**
             * Icon 图标组件
             * 基于 Lucide 图标库
             */
            "ldesign-icon": LocalJSX.LdesignIcon & JSXBase.HTMLAttributes<HTMLLdesignIconElement>;
            /**
             * Image 图片组件
             * - 支持懒加载（IntersectionObserver + 原生 loading）
             * - 支持占位/骨架、错误占位、回退图
             * - 支持响应式图片（srcset/sizes）
             * - 支持 object-fit / object-position
             * - 支持预览（遮罩、缩放、拖拽）
             */
            "ldesign-image": LocalJSX.LdesignImage & JSXBase.HTMLAttributes<HTMLLdesignImageElement>;
            /**
             * ImageGroup 图集容器
             * - 使用 CSS Grid 布局
             * - 支持列数与间距
             * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
             */
            "ldesign-image-group": LocalJSX.LdesignImageGroup & JSXBase.HTMLAttributes<HTMLLdesignImageGroupElement>;
            /**
             * ldesign-image-preview
             * 图片预览组件，支持缩放、拖拽、旋转等交互
             * 用法：
             * 1) 编程式调用：
             *    const preview = document.querySelector('ldesign-image-preview');
             *    preview.show('https://example.com/image.jpg');
             * 2) 作为图片组件的预览功能：
             *    <ldesign-image src="..." preview></ldesign-image>
             */
            "ldesign-image-preview": LocalJSX.LdesignImagePreview & JSXBase.HTMLAttributes<HTMLLdesignImagePreviewElement>;
            /**
             * ImageViewer 图片预览器
             * - 支持多图预览、左右切换、循环
             * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
             * - 支持顶部缩略图快速切换
             * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
             */
            "ldesign-image-viewer": LocalJSX.LdesignImageViewer & JSXBase.HTMLAttributes<HTMLLdesignImageViewerElement>;
            /**
             * Input 输入框组件
             * 通过鼠标或键盘输入内容，是最基础的表单域的包装
             */
            "ldesign-input": LocalJSX.LdesignInput & JSXBase.HTMLAttributes<HTMLLdesignInputElement>;
            /**
             * InputNumber 数字输入框
             * - 支持步进按钮、键盘操作（可关闭）、最小/最大值限制、精度控制
             * - 提供 formatter / parser 以实现显示格式化与解析
             */
            "ldesign-input-number": LocalJSX.LdesignInputNumber & JSXBase.HTMLAttributes<HTMLLdesignInputNumberElement>;
            /**
             * Loading 加载组件
             * 轻量的加载指示器，支持两种形态：spinner | dots
             */
            "ldesign-loading": LocalJSX.LdesignLoading & JSXBase.HTMLAttributes<HTMLLdesignLoadingElement>;
            /**
             * ldesign-mention 提及组件（contenteditable 版本）
             * - 使用可编辑 div 实现富文本输入，支持在文本中高亮渲染提及 token
             * - 候选浮层定位于光标位置（通过隐藏锚点 + ldesign-popup 定位）
             */
            "ldesign-mention": LocalJSX.LdesignMention & JSXBase.HTMLAttributes<HTMLLdesignMentionElement>;
            "ldesign-menu": LocalJSX.LdesignMenu & JSXBase.HTMLAttributes<HTMLLdesignMenuElement>;
            /**
             * Message 全局提示
             * 高性能轻量级的全局反馈组件
             * 特性：
             * - 支持多种消息类型
             * - GPU 加速动画
             * - 内存优化与对象池
             * - 响应式设计
             * - 暗黑模式支持
             * - 无障碍访问
             */
            "ldesign-message": LocalJSX.LdesignMessage & JSXBase.HTMLAttributes<HTMLLdesignMessageElement>;
            /**
             * Modal 模态框组件
             */
            "ldesign-modal": LocalJSX.LdesignModal & JSXBase.HTMLAttributes<HTMLLdesignModalElement>;
            /**
             * Notification 通知提醒
             * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
             */
            "ldesign-notification": LocalJSX.LdesignNotification & JSXBase.HTMLAttributes<HTMLLdesignNotificationElement>;
            /**
             * Pagination 分页组件
             * 用于数据分页，提供页码切换、页大小切换与快速跳转
             */
            "ldesign-pagination": LocalJSX.LdesignPagination & JSXBase.HTMLAttributes<HTMLLdesignPaginationElement>;
            /**
             * ldesign-picker
             * 通用滚轮选择器（单列）
             * - PC：鼠标滚轮按“行”步进，按速度取整步数
             * - 移动端：手势滑动（Pointer Events）+ 惯性 + 吸附到最近项
             * - 支持配置容器高度与每项高度；容器通常为 itemHeight 的奇数倍（3/5/7...）
             * - 正中间指示器高度与子项一致
             */
            "ldesign-picker": LocalJSX.LdesignPicker & JSXBase.HTMLAttributes<HTMLLdesignPickerElement>;
            /**
             * Popconfirm 气泡确认框
             * 基于最新 Popup 进行封装，提供确认/取消操作
             * 支持动画、主题、尺寸等特性
             */
            "ldesign-popconfirm": LocalJSX.LdesignPopconfirm & JSXBase.HTMLAttributes<HTMLLdesignPopconfirmElement>;
            /**
             * ldesign-popup（重写版）
             * 目标：
             * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
             * - 在所有方向上保持一致的 offset 语义：
             *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
             *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
             * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
             * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
             */
            "ldesign-popup": LocalJSX.LdesignPopup & JSXBase.HTMLAttributes<HTMLLdesignPopupElement>;
            /**
             * Progress 进度�?
             * 支持：线形、环形、仪表盘、步骤条，多尺寸/状�?文本/自定义颜色等
             */
            "ldesign-progress": LocalJSX.LdesignProgress & JSXBase.HTMLAttributes<HTMLLdesignProgressElement>;
            /**
             * Radio 单选框组件
             * 在一组备选项中进行单选
             */
            "ldesign-radio": LocalJSX.LdesignRadio & JSXBase.HTMLAttributes<HTMLLdesignRadioElement>;
            /**
             * RadioGroup 单选框组组件
             * 管理一组单选框的状态
             */
            "ldesign-radio-group": LocalJSX.LdesignRadioGroup & JSXBase.HTMLAttributes<HTMLLdesignRadioGroupElement>;
            /**
             * Rate 评分组件
             * - 支持半星、清空、只读、禁用、键盘可访问
             * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
             */
            "ldesign-rate": LocalJSX.LdesignRate & JSXBase.HTMLAttributes<HTMLLdesignRateElement>;
            /**
             * ResizeBox 伸缩框
             * 可通过拖拽指定边来改变容器宽高
             */
            "ldesign-resize-box": LocalJSX.LdesignResizeBox & JSXBase.HTMLAttributes<HTMLLdesignResizeBoxElement>;
            /**
             * Ripple 水波纹效果
             * 用法：把 <ldesign-ripple /> 放入任意元素内部（建议放最后），即可在该元素上获得点击水波纹效果。
             * 例如：
             * <button class="btn">按钮<ldesign-ripple /></button>
             */
            "ldesign-ripple": LocalJSX.LdesignRipple & JSXBase.HTMLAttributes<HTMLLdesignRippleElement>;
            /**
             * Row 行容器
             * - 作为一行的网格容器
             * - 可独立配置列数与间距，或继承上级 ldesign-grid 的默认值
             */
            "ldesign-row": LocalJSX.LdesignRow & JSXBase.HTMLAttributes<HTMLLdesignRowElement>;
            /**
             * ldesign-scrollbar 自定义滚动条
             * - 包裹任意内容，提供可完全自定义样式的滚动条（纵向/横向）
             * - 支持拖拽拇指、点击轨道跳转、自动/常显、轨道类型切换
             * - 通过 CSS 变量覆盖或直接覆盖内部类名实现“完全自主”的样式定制
             */
            "ldesign-scrollbar": LocalJSX.LdesignScrollbar & JSXBase.HTMLAttributes<HTMLLdesignScrollbarElement>;
            /**
             * Select 选择器
             * 基于 <ldesign-popup> 实现，支持单选/多选。
             */
            "ldesign-select": LocalJSX.LdesignSelect & JSXBase.HTMLAttributes<HTMLLdesignSelectElement>;
            /**
             * Slider 滑块组件
             * 通过拖动滑块在一定数值区间内进行选择
             */
            "ldesign-slider": LocalJSX.LdesignSlider & JSXBase.HTMLAttributes<HTMLLdesignSliderElement>;
            /**
             * Space 间距组件
             * 用于在一组元素之间提供一致的间距与对齐控制
             */
            "ldesign-space": LocalJSX.LdesignSpace & JSXBase.HTMLAttributes<HTMLLdesignSpaceElement>;
            /**
             * Split 面板分割
             * 将容器分为左右（vertical）或上下（horizontal）两部分，通过拖拽中间分割条调整比例。
             * - 组件名：<ldesign-split>
             * - 方向：vertical（左右）| horizontal（上下）
             * - 比例：value（0~1），表示起始面板所占比例。拖拽过程中会回写。
             * - 约束：firstMin / secondMin 用于限制两侧最小尺寸（px）。
             * - 事件：ldesignSplitStart / ldesignSplit / ldesignSplitEnd
             */
            "ldesign-split": LocalJSX.LdesignSplit & JSXBase.HTMLAttributes<HTMLLdesignSplitElement>;
            /**
             * ldesign-swiper 轮播图组件
             * 功能：
             * - 受控/非受控当前索引（value/defaultValue）
             * - 自动播放（autoplay + autoplayDelay + pauseOnHover + disableOnInteraction）
             * - 循环（loop）
             * - 导航按钮（navigation）
             * - 分页圆点（pagination）
             * - 触摸/鼠标拖拽切换（allowTouchMove + mouseDrag + threshold）
             * - 键盘控制（keyboard）
             * - 水平/垂直方向（direction）
             * - 每屏多项显示（slidesPerView + spaceBetween）
             * - 公共方法（next/prev/slideTo/update）
             */
            "ldesign-swiper": LocalJSX.LdesignSwiper & JSXBase.HTMLAttributes<HTMLLdesignSwiperElement>;
            /**
             * ldesign-swiper-slide
             * - Swiper 的子项容器，支持 active 状态用于样式控制
             */
            "ldesign-swiper-slide": LocalJSX.LdesignSwiperSlide & JSXBase.HTMLAttributes<HTMLLdesignSwiperSlideElement>;
            /**
             * Switch 开关组件
             * 表示两种相互对立的状态间的切换，多用于触发「开/关」
             */
            "ldesign-switch": LocalJSX.LdesignSwitch & JSXBase.HTMLAttributes<HTMLLdesignSwitchElement>;
            /**
             * TabPanel 选项卡面板
             * - 由 <ldesign-tabs> 管理激活状态
             */
            "ldesign-tab-panel": LocalJSX.LdesignTabPanel & JSXBase.HTMLAttributes<HTMLLdesignTabPanelElement>;
            /**
             * Tabs 选项卡组件
             * - 通过水平或垂直的标签页切换展示内容
             */
            "ldesign-tabs": LocalJSX.LdesignTabs & JSXBase.HTMLAttributes<HTMLLdesignTabsElement>;
            /**
             * Tag 标签组件
             * 用于标记和分类
             */
            "ldesign-tag": LocalJSX.LdesignTag & JSXBase.HTMLAttributes<HTMLLdesignTagElement>;
            /**
             * TagGroup 标签组
             * - 支持拖拽排序
             * - 支持动态添加标签
             * - overflow="scroll" 提供横向滚动和可选箭头
             * - overflow="more" 根据 maxVisible 折叠为 +N
             */
            "ldesign-tag-group": LocalJSX.LdesignTagGroup & JSXBase.HTMLAttributes<HTMLLdesignTagGroupElement>;
            "ldesign-time-picker": LocalJSX.LdesignTimePicker & JSXBase.HTMLAttributes<HTMLLdesignTimePickerElement>;
            /**
             * Tooltip 工具提示组件
             * 基于最新 Popup 的轻量封装，继承所有新特性
             */
            "ldesign-tooltip": LocalJSX.LdesignTooltip & JSXBase.HTMLAttributes<HTMLLdesignTooltipElement>;
            /**
             * Transfer 穿梭框
             * 支持左右两栏列表，通过按钮将条目在两侧移动。
             */
            "ldesign-transfer": LocalJSX.LdesignTransfer & JSXBase.HTMLAttributes<HTMLLdesignTransferElement>;
            "ldesign-tree": LocalJSX.LdesignTree & JSXBase.HTMLAttributes<HTMLLdesignTreeElement>;
        }
    }
}
